package com.newco.marketplace.dto.vo.ledger;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.sears.os.vo.SerializableBaseVO;

public class LuCountryExample extends SerializableBaseVO{
    /**
	 * 
	 */
	private static final long serialVersionUID = -3060304576426393940L;

	/**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table lu_country
     *
     * @abatorgenerated Fri Aug 17 14:39:13 CDT 2007
     */
    private String orderByClause;

    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table lu_country
     *
     * @abatorgenerated Fri Aug 17 14:39:13 CDT 2007
     */
    private List oredCriteria = new ArrayList();

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table lu_country
     *
     * @abatorgenerated Fri Aug 17 14:39:13 CDT 2007
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table lu_country
     *
     * @abatorgenerated Fri Aug 17 14:39:13 CDT 2007
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table lu_country
     *
     * @abatorgenerated Fri Aug 17 14:39:13 CDT 2007
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table lu_country
     *
     * @abatorgenerated Fri Aug 17 14:39:13 CDT 2007
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table lu_country
     *
     * @abatorgenerated Fri Aug 17 14:39:13 CDT 2007
     */
    public Criteria createCriteria() {
        Criteria criteria = new Criteria();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This class was generated by Abator for iBATIS.
     * This class corresponds to the database table lu_country
     *
     * @abatorgenerated Fri Aug 17 14:39:13 CDT 2007
     */
    public static class Criteria {
        private List criteriaWithoutValue;

        private List criteriaWithSingleValue;

        private List criteriaWithListValue;

        private List criteriaWithBetweenValue;

        private Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        private void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        private void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        private void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andIdIsNull() {
            criteriaWithoutValue.add("id is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            criteriaWithoutValue.add("id is not null");
            return this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return this;
        }

        public Criteria andIdIn(List values) {
            addCriterion("id in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List values) {
            addCriterion("id not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return this;
        }

        public Criteria andTypeIsNull() {
            criteriaWithoutValue.add("type is null");
            return this;
        }

        public Criteria andTypeIsNotNull() {
            criteriaWithoutValue.add("type is not null");
            return this;
        }

        public Criteria andTypeEqualTo(String value) {
            addCriterion("type =", value, "type");
            return this;
        }

        public Criteria andTypeNotEqualTo(String value) {
            addCriterion("type <>", value, "type");
            return this;
        }

        public Criteria andTypeGreaterThan(String value) {
            addCriterion("type >", value, "type");
            return this;
        }

        public Criteria andTypeGreaterThanOrEqualTo(String value) {
            addCriterion("type >=", value, "type");
            return this;
        }

        public Criteria andTypeLessThan(String value) {
            addCriterion("type <", value, "type");
            return this;
        }

        public Criteria andTypeLessThanOrEqualTo(String value) {
            addCriterion("type <=", value, "type");
            return this;
        }

        public Criteria andTypeLike(String value) {
            addCriterion("type like", value, "type");
            return this;
        }

        public Criteria andTypeNotLike(String value) {
            addCriterion("type not like", value, "type");
            return this;
        }

        public Criteria andTypeIn(List values) {
            addCriterion("type in", values, "type");
            return this;
        }

        public Criteria andTypeNotIn(List values) {
            addCriterion("type not in", values, "type");
            return this;
        }

        public Criteria andTypeBetween(String value1, String value2) {
            addCriterion("type between", value1, value2, "type");
            return this;
        }

        public Criteria andTypeNotBetween(String value1, String value2) {
            addCriterion("type not between", value1, value2, "type");
            return this;
        }

        public Criteria andDescrIsNull() {
            criteriaWithoutValue.add("descr is null");
            return this;
        }

        public Criteria andDescrIsNotNull() {
            criteriaWithoutValue.add("descr is not null");
            return this;
        }

        public Criteria andDescrEqualTo(String value) {
            addCriterion("descr =", value, "descr");
            return this;
        }

        public Criteria andDescrNotEqualTo(String value) {
            addCriterion("descr <>", value, "descr");
            return this;
        }

        public Criteria andDescrGreaterThan(String value) {
            addCriterion("descr >", value, "descr");
            return this;
        }

        public Criteria andDescrGreaterThanOrEqualTo(String value) {
            addCriterion("descr >=", value, "descr");
            return this;
        }

        public Criteria andDescrLessThan(String value) {
            addCriterion("descr <", value, "descr");
            return this;
        }

        public Criteria andDescrLessThanOrEqualTo(String value) {
            addCriterion("descr <=", value, "descr");
            return this;
        }

        public Criteria andDescrLike(String value) {
            addCriterion("descr like", value, "descr");
            return this;
        }

        public Criteria andDescrNotLike(String value) {
            addCriterion("descr not like", value, "descr");
            return this;
        }

        public Criteria andDescrIn(List values) {
            addCriterion("descr in", values, "descr");
            return this;
        }

        public Criteria andDescrNotIn(List values) {
            addCriterion("descr not in", values, "descr");
            return this;
        }

        public Criteria andDescrBetween(String value1, String value2) {
            addCriterion("descr between", value1, value2, "descr");
            return this;
        }

        public Criteria andDescrNotBetween(String value1, String value2) {
            addCriterion("descr not between", value1, value2, "descr");
            return this;
        }

        public Criteria andSort_orderIsNull() {
            criteriaWithoutValue.add("sort_order is null");
            return this;
        }

        public Criteria andSort_orderIsNotNull() {
            criteriaWithoutValue.add("sort_order is not null");
            return this;
        }

        public Criteria andSort_orderEqualTo(Integer value) {
            addCriterion("sort_order =", value, "sort_order");
            return this;
        }

        public Criteria andSort_orderNotEqualTo(Integer value) {
            addCriterion("sort_order <>", value, "sort_order");
            return this;
        }

        public Criteria andSort_orderGreaterThan(Integer value) {
            addCriterion("sort_order >", value, "sort_order");
            return this;
        }

        public Criteria andSort_orderGreaterThanOrEqualTo(Integer value) {
            addCriterion("sort_order >=", value, "sort_order");
            return this;
        }

        public Criteria andSort_orderLessThan(Integer value) {
            addCriterion("sort_order <", value, "sort_order");
            return this;
        }

        public Criteria andSort_orderLessThanOrEqualTo(Integer value) {
            addCriterion("sort_order <=", value, "sort_order");
            return this;
        }

        public Criteria andSort_orderIn(List values) {
            addCriterion("sort_order in", values, "sort_order");
            return this;
        }

        public Criteria andSort_orderNotIn(List values) {
            addCriterion("sort_order not in", values, "sort_order");
            return this;
        }

        public Criteria andSort_orderBetween(Integer value1, Integer value2) {
            addCriterion("sort_order between", value1, value2, "sort_order");
            return this;
        }

        public Criteria andSort_orderNotBetween(Integer value1, Integer value2) {
            addCriterion("sort_order not between", value1, value2, "sort_order");
            return this;
        }
    }
}