# Database constants
DB_URL=jdbc:mysql://151.149.118.31:3307/

#DB_SUPPLIER= The name of the supplier database.
SCHEMA_SUPPLIER_PROD=supplier_prod

#DB_ACCOUNTS= The name of the accounts database.
SCHEMA_ACCOUNTS_PROD=accounts_prod

#DB_ACCOUNTS= The name of the integration database.
SCHEMA_INTEGRATION=servicelive_integration

#DB_ACCOUNTS= The name of the slk database.
SCHEMA_SLK=slk

# DB_USER is the user name for the database
# DB_USER=supply_rpt
DB_USER=supply_usr

# DB_PASSWORD is the URL of the database
DB_PASSWORD=supply

# DB_USER=supply_rpt
SLK_DB_USER=slk_user

# DB_PASSWORD is the URL of the database
SLK_DB_PASSWORD=U@Slkdb01

SHOW_QUERY=ON

QUERY_LIMIT=1000
QUERY_INITIAL_OFFSET=0

# Date parameters for restricting records from oms_buyer_notifications table
# All records between these dates excluding the given dates would be processed by the batch.
# If this property is left blank, it would consider the entire records
PROCESS_OMS_START_DATE_YYYY_MM_DD=2012-01-01
PROCESS_OMS_END_DATE_YYYY_MM_DD=2015-01-01

# slk schema queries
SELECT_CCENKEY_TEMP=SELECT app_key FROM encryption_key WHERE app_key = 'CCENKEY_TEMP'
#UPDATE_CCENKEY_TEMP=UPDATE encryption_key SET app_value = ?, modified_date = now(), modified_by = ? WHERE app_key = 'CCENKEY_TEMP'
UPDATE_CCENKEY_TEMP=UPDATE encryption_key SET app_key = ?, modified_date = now(), modified_by = ? WHERE app_key = 'CCENKEY_TEMP'
INSERT_CCENKEY_TEMP=INSERT INTO encryption_key (app_key, app_value, app_desc, app_file, created_date, modified_date, modified_by) VALUES ('CCENKEY_TEMP',?,'Temporary Encryption Key', null, now(), null, ?)
SELECT_CC_ENCRYPTION_KEYS=SELECT app_key, app_value FROM encryption_key WHERE app_key IN ('CCENKEY','CCENKEY_TEMP')
SWAP_CC_ENCRYPTION_KEYS=UPDATE encryption_key SET app_value = ?, modified_date = now() WHERE app_key = ?

# Data backup Queries
QUERY_BACKUP_ACCOUNT_HDR_TMP=CALL sp_account_hdr_copy()
QUERY_BACKUP_OMS_BUYER_NOTIFICATION_TMP=CALL sp_oms_buyer_notifications_copy()
QUERY_BACKUP_SO_ADDITIONAL_PAYMENT_TMP=CALL sp_so_additional_payment_copy()
QUERY_BACKUP_SO_ADDITIONAL_PAYMENT_BKP_TMP=CALL sp_so_additional_payment_bkp_copy()
QUERY_BACKUP_SHC_UPSELL_PAYMENT_TMP=CALL sp_shc_upsell_payment_copy()

# Data encryption queries
QUERY_CHUNK_ACCOUNT_HDR=SELECT account_id, account_no FROM accounts_prod.account_hdr_pci WHERE account_no IS NOT NULL AND account_id > ? ORDER BY account_id LIMIT ?
# QUERY_CHUNK_OMS_BUYER_NOTIFICATION=SELECT omsBuyerNotificationId, paymentAccountNumber FROM servicelive_integration.oms_buyer_notifications_pci WHERE paymentAccountNumber is not null LIMIT ? OFFSET ?
QUERY_CHUNK_OMS_BUYER_NOTIFICATION_GT=SELECT omsBuyerNotificationId, paymentAccountNumber FROM servicelive_integration.oms_buyer_notifications_pci WHERE paymentAccountNumber IS NOT NULL AND omsBuyerNotificationId > ?
QUERY_CHUNK_OMS_BUYER_NOTIFICATION_LT=SELECT omsBuyerNotificationId, paymentAccountNumber FROM servicelive_integration.oms_buyer_notifications_pci WHERE paymentAccountNumber IS NOT NULL AND omsBuyerNotificationId > ? AND omsBuyerNotificationId <= ? 
QUERY_CHUNK_OMS_BUYER_WHERE= AND installationDate >= ? and installationDate < ?
QUERY_CHUNK_OMS_BUYER_ORDER= ORDER BY omsBuyerNotificationId LIMIT ?
# QUERY_CHUNK_SO_ADDITIONAL_PAYMENT=SELECT so_id, cc_no FROM supplier_prod.so_additional_payment_pci WHERE cc_no IS NOT NULL LIMIT ? OFFSET ?
QUERY_CHUNK_SO_ADDITIONAL_PAYMENT_GT=SELECT so_id, cc_no FROM supplier_prod.so_additional_payment_pci WHERE cc_no IS NOT NULL AND so_id > ? ORDER BY so_id LIMIT ?
QUERY_CHUNK_SO_ADDITIONAL_PAYMENT_LT=SELECT so_id, cc_no FROM supplier_prod.so_additional_payment_pci WHERE cc_no IS NOT NULL AND so_id > ? AND so_id <= ? ORDER BY so_id LIMIT ?
QUERY_CHUNK_SO_ADDITIONAL_PAYMENT_BKP=SELECT so_id, cc_no FROM supplier_prod.so_additional_payment_bkp_pci WHERE cc_no IS NOT NULL LIMIT ? OFFSET ?
QUERY_CHUNK_SHC_UPSELL_PAYMENT=SELECT shc_upsell_payment_id, payment_acc_no FROM supplier_prod.shc_upsell_payment_pci WHERE payment_acc_no IS NOT NULL AND shc_upsell_payment_id > ? ORDER BY shc_upsell_payment_id LIMIT ?

UPDATE_NEW_DATA_ACCOUNT_HDR=UPDATE accounts_prod.account_hdr set account_no = ? where account_id = ?
UPDATE_NEW_DATA_OMS_BUYER_NOTIFICATION=UPDATE servicelive_integration.oms_buyer_notifications set paymentAccountNumber = ? where omsBuyerNotificationId = ?
UPDATE_NEW_DATA_SO_ADDITIONAL_PAYMENT=UPDATE supplier_prod.so_additional_payment set cc_no = ? where so_id = ?
UPDATE_NEW_DATA_SO_ADDITIONAL_PAYMENT_BKP=UPDATE supplier_prod.so_additional_payment_bkp set cc_no = ? where so_id = ?
UPDATE_NEW_DATA_SHC_UPSELL_PAYMENT=UPDATE supplier_prod.shc_upsell_payment set payment_acc_no = ? where shc_upsell_payment_id = ?

COUNT_OMS_BUYER_NOTIFICATIONS=SELECT count(*) FROM servicelive_integration.oms_buyer_notifications_pci WHERE paymentAccountNumber IS NOT NULL
COUNT_SO_ADDITIONAL_PAYMENT=SELECT count(*) FROM supplier_prod.so_additional_payment_pci WHERE cc_no IS NOT NULL

FETCH_OMS_BUYER_NOTIFICATION_SPLITID=select omsBuyerNotificationId FROM servicelive_integration.oms_buyer_notifications_pci WHERE paymentAccountNumber IS NOT NULL 
FETCH_OMS_SPLITID_LIMIT=LIMIT ?,1
FETCH_SO_ADDITIONAL_PAYMENT_SPLITID=select so_id FROM supplier_prod.so_additional_payment_pci WHERE cc_no IS NOT NULL LIMIT ?,1
