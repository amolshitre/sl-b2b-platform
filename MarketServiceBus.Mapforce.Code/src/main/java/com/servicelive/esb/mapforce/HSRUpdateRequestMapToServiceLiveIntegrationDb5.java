/**
 * HSRUpdateRequestMapToServiceLiveIntegrationDb5.java
 *
 * This file was generated by MapForce 2011sp1.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package com.servicelive.esb.mapforce;

import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import com.altova.db.*;
import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edi.*;
import java.util.*;

public class HSRUpdateRequestMapToServiceLiveIntegrationDb5 extends com.altova.TraceProvider 
{
	static class seq1_Main implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_instance_HSRUpdateRequest;
		com.altova.db.Catalog var2_instance_ServiceLiveIntegrationDb__servicelive_integration_;
		long var3_param_integrationId;
	
		public seq1_Main(com.altova.mapforce.IMFNode var1_instance_HSRUpdateRequest, com.altova.db.Catalog var2_instance_ServiceLiveIntegrationDb__servicelive_integration_, long var3_param_integrationId)
		{
			this.var1_instance_HSRUpdateRequest = var1_instance_HSRUpdateRequest;
			this.var2_instance_ServiceLiveIntegrationDb__servicelive_integration_ = var2_instance_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var3_param_integrationId = var3_param_integrationId;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_Main closure;
			com.altova.db.Statement var5_NewStatement;
			IEnumerator var4_map_select_Root;
			public Enumerator(seq1_Main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var5_NewStatement = com.altova.db.Dbs.newStatement(closure.var2_instance_ServiceLiveIntegrationDb__servicelive_integration_, 0, "SELECT `processingDelay`, `integrationId` FROM `integrations`");
				com.altova.db.Dbs.prepareStatement(var5_NewStatement);
				var4_map_select_Root = ((closure.var1_instance_HSRUpdateRequest).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Root"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var4_map_select_Root.moveNext()) {state = 6; return false; }
				current = new MFElement("batches", "", null, (new seq2_content_batches(closure.var3_param_integrationId, closure.var1_instance_HSRUpdateRequest, ((com.altova.mapforce.IMFNode)(var4_map_select_Root.current())), closure.var2_instance_ServiceLiveIntegrationDb__servicelive_integration_)));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var4_map_select_Root.close(); var4_map_select_Root = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var4_map_select_Root.close(); var4_map_select_Root = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq2_content_batches implements IEnumerable
	{
		long var1_integrationId;
		com.altova.mapforce.IMFNode var2_HSRUpdateRequest;
		com.altova.mapforce.IMFNode var4_bv;
		com.altova.db.Catalog var5_ServiceLiveIntegrationDb__servicelive_integration_;
	
		public seq2_content_batches(long var1_integrationId, com.altova.mapforce.IMFNode var2_HSRUpdateRequest, com.altova.mapforce.IMFNode var4_bv, com.altova.db.Catalog var5_ServiceLiveIntegrationDb__servicelive_integration_)
		{
			this.var1_integrationId = var1_integrationId;
			this.var2_HSRUpdateRequest = var2_HSRUpdateRequest;
			this.var4_bv = var4_bv;
			this.var5_ServiceLiveIntegrationDb__servicelive_integration_ = var5_ServiceLiveIntegrationDb__servicelive_integration_;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq2_content_batches closure;
			IEnumerator var3_map_select_CSV;
			public Enumerator(seq2_content_batches closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				current = new MFAttribute("integrationId", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(closure.var1_integrationId)));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = new MFAttribute("fileName", "", null, com.altova.functions.Core.box(com.altova.functions.Core.documentURI(closure.var2_HSRUpdateRequest)));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				current = new MFAttribute("statusId", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("1"))))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 8;				
				current = new MFAttribute("createdOn", "", null, com.altova.functions.Core.box(com.altova.functions.Lang.now()));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 9;				
				var3_map_select_CSV = ((closure.var4_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "CSV"))).enumerator();
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 9;				
				if (!var3_map_select_CSV.moveNext()) {state = 10; return false; }
				current = new MFElement("transactions", "", null, (new seq3_content_transactions(((com.altova.mapforce.IMFNode)(var3_map_select_CSV.current())), closure.var5_ServiceLiveIntegrationDb__servicelive_integration_, closure.var1_integrationId)));
				pos++;
				return true;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				var3_map_select_CSV.close(); var3_map_select_CSV = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_map_select_CSV.close(); var3_map_select_CSV = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq3_content_transactions implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
		com.altova.db.Catalog var5_ServiceLiveIntegrationDb__servicelive_integration_;
		long var6_integrationId;
	
		public seq3_content_transactions(com.altova.mapforce.IMFNode var1_bv, com.altova.db.Catalog var5_ServiceLiveIntegrationDb__servicelive_integration_, long var6_integrationId)
		{
			this.var1_bv = var1_bv;
			this.var5_ServiceLiveIntegrationDb__servicelive_integration_ = var5_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var6_integrationId = var6_integrationId;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq3_content_transactions closure;
			com.altova.mapforce.IEnumerable var2_select_Service_Unit_Num;
			com.altova.mapforce.IEnumerable var3_select_Service_Order_Num;
			IEnumerator var4_map_SELECT__processingDe;
			int var7_;
			public Enumerator(seq3_content_transactions closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
					case 26:	if (moveNext_26()) return true; break;
					case 36:	if (moveNext_36()) return true; break;
					case 37:	if (moveNext_37()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 6;				
				var2_select_Service_Unit_Num = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Service Unit Num")));
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Service Order Status Code"))))) {state = 6; return false; }
				current = new MFAttribute("transactionTypeId", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger((java.math.BigDecimal)com.altova.functions.Core.first((new seq4_if_equal(closure.var1_bv))))))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 14;				
				if (!(com.altova.functions.Core.exists(var2_select_Service_Unit_Num))) {state = 13; return false; }
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 25;				
				var4_map_SELECT__processingDe = ((new seq5__integrations_(closure.var5_ServiceLiveIntegrationDb__servicelive_integration_))).enumerator();
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 13;				
				var3_select_Service_Order_Num = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Service Order Num")));
				if (!(com.altova.functions.Core.exists(var3_select_Service_Order_Num))) {state = 13; return false; }
				current = new MFAttribute("externalOrderNumber", "", null, com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Service_Unit_Num))), com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_Service_Order_Num))))));
				pos++;
				return true;
			}
			private boolean moveNext_25() throws Exception {
				state = 25;				
				if (!var4_map_SELECT__processingDe.moveNext()) {state = 26; return false; }
				if (!(com.altova.functions.Core.equal(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(closure.var6_integrationId)), com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(((com.altova.db.Record)(var4_map_SELECT__processingDe.current())), "integrationId")))))))) {state = 25; return false; }
				var7_ = com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("0"))));
				current = new MFAttribute("processAfter", "", null, com.altova.functions.Core.box(com.altova.functions.Lang.datetimeAdd(com.altova.functions.Lang.now(), com.altova.functions.Lang.durationFromParts(var7_, var7_, var7_, var7_, com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.longToInteger((Long)com.altova.functions.Core.first(com.altova.db.Dbs.readField(((com.altova.db.Record)(var4_map_SELECT__processingDe.current())), "processingDelay"))))), 0, new java.math.BigDecimal("0"), com.altova.CoreTypes.parseBoolean("0")))));
				pos++;
				return true;
			}
			private boolean moveNext_26() throws Exception {
				state = 36;				
				var4_map_SELECT__processingDe.close(); var4_map_SELECT__processingDe = null;
				current = new MFAttribute("createdOn", "", null, com.altova.functions.Core.box(com.altova.functions.Lang.now()));
				pos++;
				return true;
			}
			private boolean moveNext_36() throws Exception {
				state = 37;				
				current = new MFAttribute("statusId", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("3"))))));
				pos++;
				return true;
			}
			private boolean moveNext_37() throws Exception {
				state = 0;				
				current = new MFElement("serviceorders", "", null, com.altova.functions.Core.box(new MFElement("customrefs_hsr", "", null, (new seq7_content_customrefs_hsr(closure.var1_bv)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var4_map_SELECT__processingDe.close(); var4_map_SELECT__processingDe = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq4_if_equal implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq4_if_equal(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq4_if_equal closure;
			public Enumerator(seq4_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Service Order Status Code")))), "CA"))) {state = 11; return false; }
				current = new java.math.BigDecimal("3");
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = new java.math.BigDecimal("8");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq6_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_;
	
		public seq6_NewQuery(com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_)
		{
			this.var2_ServiceLiveIntegrationDb__servicelive_integration_ = var2_ServiceLiveIntegrationDb__servicelive_integration_;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq6_NewQuery closure;
			com.altova.db.Statement var1_NewQuery;
			public Enumerator(seq6_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var1_NewQuery = com.altova.db.Dbs.newQuery(closure.var2_ServiceLiveIntegrationDb__servicelive_integration_, 0);
				current = com.altova.db.Dbs.executeQuery(var1_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var1_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq5__integrations_ implements IEnumerable
	{
		com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_;
	
		public seq5__integrations_(com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_)
		{
			this.var1_ServiceLiveIntegrationDb__servicelive_integration_ = var1_ServiceLiveIntegrationDb__servicelive_integration_;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq5__integrations_ closure;
			com.altova.db.ResultSetWrapper var3_NewQuery;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq5__integrations_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var3_NewQuery = (com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq6_NewQuery(closure.var1_ServiceLiveIntegrationDb__servicelive_integration_)));
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!(com.altova.db.Dbs.moveNextRecord(var3_NewQuery))) {state = 0; return false; }
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_long(var2_NewRecord, var3_NewQuery, "processingDelay");
				com.altova.db.Dbs.read_short(var2_NewRecord, var3_NewQuery, "integrationId");
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeRecordset(var3_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq7_content_customrefs_hsr implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq7_content_customrefs_hsr(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq7_content_customrefs_hsr closure;
			com.altova.mapforce.IEnumerable var9_select_Filler;
			com.altova.mapforce.IEnumerable var8_select_ID_of_Modifying_Unit;
			com.altova.mapforce.IEnumerable var7_select_Employee_ID_Number;
			com.altova.mapforce.IEnumerable var6_select_Service_Order_Status_Code;
			com.altova.mapforce.IEnumerable var3_select_Service_Order_Num;
			boolean var5_exists;
			com.altova.mapforce.IEnumerable var2_select_Service_Unit_Num;
			boolean var4_exists;
			public Enumerator(seq7_content_customrefs_hsr closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 33:	if (moveNext_33()) return true; break;
					case 35:	if (moveNext_35()) return true; break;
					case 40:	if (moveNext_40()) return true; break;
					case 42:	if (moveNext_42()) return true; break;
					case 47:	if (moveNext_47()) return true; break;
					case 49:	if (moveNext_49()) return true; break;
					case 56:	if (moveNext_56()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 6;				
				var9_select_Filler = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Filler")));
				var8_select_ID_of_Modifying_Unit = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ID of Modifying Unit")));
				var7_select_Employee_ID_Number = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Employee ID Number")));
				var6_select_Service_Order_Status_Code = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Service Order Status Code")));
				var3_select_Service_Order_Num = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Service Order Num")));
				var5_exists = com.altova.functions.Core.exists(var3_select_Service_Order_Num);
				var2_select_Service_Unit_Num = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Service Unit Num")));
				var4_exists = com.altova.functions.Core.exists(var2_select_Service_Unit_Num);
				if (!(var4_exists)) {state = 6; return false; }
				current = new MFAttribute("unitNumber", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Service_Unit_Num)))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 15;				
				if (!(var5_exists)) {state = 13; return false; }
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 22;				
				if (!(var4_exists)) {state = 20; return false; }
				return false;
			}
			private boolean moveNext_15() throws Exception {
				state = 13;				
				current = new MFAttribute("orderNumber", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_Service_Order_Num)))));
				pos++;
				return true;
			}
			private boolean moveNext_20() throws Exception {
				state = 35;				
				if (!(com.altova.functions.Core.exists(var6_select_Service_Order_Status_Code))) {state = 33; return false; }
				return false;
			}
			private boolean moveNext_22() throws Exception {
				state = 20;				
				if (!(var5_exists)) {state = 20; return false; }
				current = new MFAttribute("orderIdstring", "", null, com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Service_Unit_Num))), com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_Service_Order_Num))))));
				pos++;
				return true;
			}
			private boolean moveNext_33() throws Exception {
				state = 42;				
				if (!(com.altova.functions.Core.exists(var7_select_Employee_ID_Number))) {state = 40; return false; }
				return false;
			}
			private boolean moveNext_35() throws Exception {
				state = 33;				
				current = new MFAttribute("serviceOrderStatusCode", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var6_select_Service_Order_Status_Code)))));
				pos++;
				return true;
			}
			private boolean moveNext_40() throws Exception {
				state = 49;				
				if (!(com.altova.functions.Core.exists(var8_select_ID_of_Modifying_Unit))) {state = 47; return false; }
				return false;
			}
			private boolean moveNext_42() throws Exception {
				state = 40;				
				current = new MFAttribute("lastModifiedEmployeeID", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var7_select_Employee_ID_Number)))));
				pos++;
				return true;
			}
			private boolean moveNext_47() throws Exception {
				state = 56;				
				if (!(com.altova.functions.Core.exists(var9_select_Filler))) {state = 0; return false; }
				return false;
			}
			private boolean moveNext_49() throws Exception {
				state = 47;				
				current = new MFAttribute("soCreationUnitNum", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var8_select_ID_of_Modifying_Unit)))));
				pos++;
				return true;
			}
			private boolean moveNext_56() throws Exception {
				state = 0;				
				current = new MFAttribute("filler", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var9_select_Filler)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}


	private boolean runDoesCloseAll = true;		

	// instances
		protected com.altova.text.ITextNode varHSRUpdateRequestInstance;
	protected java.sql.Connection varServiceLiveIntegrationDb6Instance;
	protected long varintegrationId;
		com.altova.db.DbTreeOperations.TransactionHelper transactionHelper;

	public void run(String HSRUpdateRequestSourceFilename, java.sql.Connection ServiceLiveIntegrationDb6SourceConnection, long integrationId9SourceParameter, java.sql.Connection ServiceLiveIntegrationDb5TargetConnection) throws Exception {
		// open source streams
		writeTrace("Loading " + HSRUpdateRequestSourceFilename + "...\n");
		com.altova.io.FileInput HSRUpdateRequestSource = new com.altova.io.FileInput(HSRUpdateRequestSourceFilename);

		// run
		run(HSRUpdateRequestSource, ServiceLiveIntegrationDb6SourceConnection, integrationId9SourceParameter, ServiceLiveIntegrationDb5TargetConnection);

		// close source streams
		HSRUpdateRequestSource.close();
	}


	// main entry point

	public void run(com.altova.io.Input HSRUpdateRequestSource, java.sql.Connection ServiceLiveIntegrationDb6SourceConnection, long integrationId9SourceParameter, java.sql.Connection ServiceLiveIntegrationDb5TargetConnection) throws Exception {
		// Open the source(s)
		writeTrace("Parsing Text...\n");
		com.servicelive.esb.mapforce.HSRUpdateRequest.HSRUpdateRequestDocument HSRUpdateRequestDocument = new com.servicelive.esb.mapforce.HSRUpdateRequest.HSRUpdateRequestDocument();
		HSRUpdateRequestDocument.setEncoding( "windows-1252", false, false );
		HSRUpdateRequestDocument.parse(HSRUpdateRequestSource);
		varHSRUpdateRequestInstance = HSRUpdateRequestDocument.getGenerator();
	
		HSRUpdateRequestSource.close();
		writeTrace("Connecting to ServiceLiveIntegrationDb6 database...\n");
			
		varServiceLiveIntegrationDb6Instance = ServiceLiveIntegrationDb6SourceConnection;
		
			varintegrationId = integrationId9SourceParameter;


		// Create the target

		writeTrace("Connecting to ServiceLiveIntegrationDb5 database...\n");
		{

		// Execute mapping

		seq1_Main mapping = new seq1_Main(new com.altova.text.TextDocumentAsMFNodeAdapter(varHSRUpdateRequestInstance, HSRUpdateRequestSource.getFilename()), new com.altova.db.Catalog(varServiceLiveIntegrationDb6Instance), integrationId9SourceParameter);

		writeDB(mapping, ServiceLiveIntegrationDb5TargetConnection);
		// Close the target
		}

		writeTrace("Closing " + ServiceLiveIntegrationDb5TargetConnection + ".\n");
		ServiceLiveIntegrationDb5TargetConnection.close();
		// Close the source
		varServiceLiveIntegrationDb6Instance.close();

		
		if (runDoesCloseAll)
		{
			HSRUpdateRequestSource.close();
		}
	}



		static void writeDB(com.altova.mapforce.IEnumerable input, java.sql.Connection target) throws Exception
		{
			com.altova.db.DbTreeOperations.RecordBuffer buf = null;
			com.altova.db.DbTreeOperations.TransactionHelper transactionHelper = new com.altova.db.DbTreeOperations.TransactionHelper(
				target, "", "", "", "SAVEPOINT  %%TRANSACTION_NAME%% ", "ROLLBACK TO SAVEPOINT  %%TRANSACTION_NAME%% "
			);

			com.altova.db.DbTreeOperations.TransactionSentinel sentinel = new com.altova.db.DbTreeOperations.TransactionSentinel(transactionHelper, "");
			try
			{
				for (IEnumerator en = input.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("batches"))
						writeDB_batches3(buf, node, target, transactionHelper);				
				}
				sentinel.commit();
			}
			finally
			{
				sentinel.rollback();
			}
		}

			static void writeDB_batches3(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `batches` (`integrationId`,`fileName`,`statusId`,`createdOn`) VALUES (?,?,?,?)", false);
							command.addParameter(buf.getValue("integrationId"),java.sql.Types.JAVA_OBJECT,2,-1,-1); // Type: smallint 
							command.addParameter(buf.getValue("fileName"),java.sql.Types.JAVA_OBJECT,1024,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("statusId"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("createdOn"),java.sql.Types.JAVA_OBJECT,0,-1,-1); // Type: datetime 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `batchId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				for (IEnumerator en = children.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("transactions"))
						writeDB_transactions3(buf, node, target, transactionHelper);				
				}
				}
			}
			static void writeDB_transactions3(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("batchId", parent.getValue("batchId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `transactions` (`transactionTypeId`,`externalOrderNumber`,`processAfter`,`createdOn`,`statusId`,`batchId`) VALUES (?,?,?,?,?,?)", false);
							command.addParameter(buf.getValue("transactionTypeId"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("externalOrderNumber"),java.sql.Types.JAVA_OBJECT,64,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("processAfter"),java.sql.Types.JAVA_OBJECT,0,-1,-1); // Type: datetime 
							command.addParameter(buf.getValue("createdOn"),java.sql.Types.JAVA_OBJECT,0,-1,-1); // Type: datetime 
							command.addParameter(buf.getValue("statusId"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("batchId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `transactionId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				for (IEnumerator en = children.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("serviceorders"))
						writeDB_serviceorders3(buf, node, target, transactionHelper);				
				}
				}
			}
			static void writeDB_serviceorders3(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("transactionId", parent.getValue("transactionId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `serviceorders` (`transactionId`) VALUES (?)", false);
							command.addParameter(buf.getValue("transactionId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `serviceOrderId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				for (IEnumerator en = children.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("customrefs_hsr"))
						writeDB_customrefs_hsr2(buf, node, target, transactionHelper);				
				}
				}
			}
			static void writeDB_customrefs_hsr2(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("serviceOrderId", parent.getValue("serviceOrderId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `customrefs_hsr` (`unitNumber`,`orderNumber`,`orderIdstring`,`serviceOrderStatusCode`,`lastModifiedEmployeeID`,`soCreationUnitNum`,`filler`,`serviceOrderId`) VALUES (?,?,?,?,?,?,?,?)", false);
							command.addParameter(buf.getValue("unitNumber"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("orderNumber"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("orderIdstring"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceOrderStatusCode"),java.sql.Types.JAVA_OBJECT,2,-1,-1); // Type: char 
							command.addParameter(buf.getValue("lastModifiedEmployeeID"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("soCreationUnitNum"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("filler"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceOrderId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `customRefId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}
	static IEnumerable throwUserException(String content)
	{
		throw new com.altova.UserException(content);
	}
}
