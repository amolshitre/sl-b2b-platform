/**
 * AssurantMapToServiceLiveIntegrationDb.java
 *
 * This file was generated by MapForce 2011sp1.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package com.servicelive.esb.mapforce;

import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import com.altova.db.*;
import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edi.*;
import java.util.*;

public class AssurantMapToServiceLiveIntegrationDb extends com.altova.TraceProvider 
{
	static class seq1_Main implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_instance_Assurant;
		com.altova.db.Catalog var2_instance_ServiceLiveIntegrationDb__servicelive_integration_;
		long var3_param_integrationId;
		long var4_param_buyerResourceId;
	
		public seq1_Main(com.altova.mapforce.IMFNode var1_instance_Assurant, com.altova.db.Catalog var2_instance_ServiceLiveIntegrationDb__servicelive_integration_, long var3_param_integrationId, long var4_param_buyerResourceId)
		{
			this.var1_instance_Assurant = var1_instance_Assurant;
			this.var2_instance_ServiceLiveIntegrationDb__servicelive_integration_ = var2_instance_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var3_param_integrationId = var3_param_integrationId;
			this.var4_param_buyerResourceId = var4_param_buyerResourceId;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_Main closure;
			com.altova.db.Statement var7_NewStatement;
			IEnumerator var5_map_select_Root;
			IEnumerator var6_map_select_CSV;
			public Enumerator(seq1_Main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var7_NewStatement = com.altova.db.Dbs.newStatement(closure.var2_instance_ServiceLiveIntegrationDb__servicelive_integration_, 0, "SELECT `processingDelay`, `integrationId` FROM `integrations`");
				com.altova.db.Dbs.prepareStatement(var7_NewStatement);
				var5_map_select_Root = ((closure.var1_instance_Assurant).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Root"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 9;				
				if (!var5_map_select_Root.moveNext()) {state = 6; return false; }
				var6_map_select_CSV = ((((com.altova.mapforce.IMFNode)(var5_map_select_Root.current()))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "CSV"))).enumerator();
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var5_map_select_Root.close(); var5_map_select_Root = null;
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 9;				
				if (!var6_map_select_CSV.moveNext()) {state = 10; return false; }
				current = new MFElement("batches", "", null, (new seq2_content_batches(closure.var3_param_integrationId, closure.var1_instance_Assurant, ((com.altova.mapforce.IMFNode)(var6_map_select_CSV.current())), closure.var2_instance_ServiceLiveIntegrationDb__servicelive_integration_, closure.var4_param_buyerResourceId)));
				pos++;
				return true;
			}
			private boolean moveNext_10() throws Exception {
				state = 5;				
				var6_map_select_CSV.close(); var6_map_select_CSV = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var6_map_select_CSV.close(); var6_map_select_CSV = null;
				var5_map_select_Root.close(); var5_map_select_Root = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq2_content_batches implements IEnumerable
	{
		long var1_integrationId;
		com.altova.mapforce.IMFNode var2_Assurant;
		com.altova.mapforce.IMFNode var3_bv;
		com.altova.db.Catalog var4_ServiceLiveIntegrationDb__servicelive_integration_;
		long var5_buyerResourceId;
	
		public seq2_content_batches(long var1_integrationId, com.altova.mapforce.IMFNode var2_Assurant, com.altova.mapforce.IMFNode var3_bv, com.altova.db.Catalog var4_ServiceLiveIntegrationDb__servicelive_integration_, long var5_buyerResourceId)
		{
			this.var1_integrationId = var1_integrationId;
			this.var2_Assurant = var2_Assurant;
			this.var3_bv = var3_bv;
			this.var4_ServiceLiveIntegrationDb__servicelive_integration_ = var4_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var5_buyerResourceId = var5_buyerResourceId;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq2_content_batches closure;
			public Enumerator(seq2_content_batches closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				current = new MFAttribute("integrationId", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(closure.var1_integrationId)));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = new MFAttribute("fileName", "", null, com.altova.functions.Core.box(com.altova.functions.Core.documentURI(closure.var2_Assurant)));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				current = new MFAttribute("statusId", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("1"))))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 8;				
				current = new MFAttribute("createdOn", "", null, com.altova.functions.Core.box(com.altova.functions.Lang.now()));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				current = new MFElement("transactions", "", null, (new seq3_content_transactions(closure.var3_bv, closure.var4_ServiceLiveIntegrationDb__servicelive_integration_, closure.var1_integrationId, closure.var5_buyerResourceId)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq3_content_transactions implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
		com.altova.db.Catalog var5_ServiceLiveIntegrationDb__servicelive_integration_;
		long var6_integrationId;
		long var9_buyerResourceId;
	
		public seq3_content_transactions(com.altova.mapforce.IMFNode var1_bv, com.altova.db.Catalog var5_ServiceLiveIntegrationDb__servicelive_integration_, long var6_integrationId, long var9_buyerResourceId)
		{
			this.var1_bv = var1_bv;
			this.var5_ServiceLiveIntegrationDb__servicelive_integration_ = var5_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var6_integrationId = var6_integrationId;
			this.var9_buyerResourceId = var9_buyerResourceId;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq3_content_transactions closure;
			com.altova.mapforce.IEnumerable var3_select_Incident_ID;
			com.altova.mapforce.IEnumerable var2_select_Status;
			boolean var8_exists;
			IEnumerator var4_map_SELECT__processingDe;
			int var7_;
			public Enumerator(seq3_content_transactions closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 19:	if (moveNext_19()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
					case 26:	if (moveNext_26()) return true; break;
					case 36:	if (moveNext_36()) return true; break;
					case 38:	if (moveNext_38()) return true; break;
					case 50:	if (moveNext_50()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 6;				
				var3_select_Incident_ID = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Incident ID")));
				var2_select_Status = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Status")));
				var8_exists = com.altova.functions.Core.exists(var2_select_Status);
				if (!(var8_exists)) {state = 6; return false; }
				if (!(com.altova.functions.Core.exists((new seq4_map_vmf1_inputtoresult(closure.var1_bv))))) {state = 6; return false; }
				current = new MFAttribute("transactionTypeId", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt((Long)com.altova.functions.Core.first(com.servicelive.esb.mapforce.vmf.vmf1_inputtoresult.create(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Status)))))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 21;				
				if (!(com.altova.functions.Core.exists(var3_select_Incident_ID))) {state = 19; return false; }
				return false;
			}
			private boolean moveNext_19() throws Exception {
				state = 25;				
				var4_map_SELECT__processingDe = ((new seq5__integrations_(closure.var5_ServiceLiveIntegrationDb__servicelive_integration_))).enumerator();
				return false;
			}
			private boolean moveNext_21() throws Exception {
				state = 19;				
				current = new MFAttribute("externalOrderNumber", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_Incident_ID))));
				pos++;
				return true;
			}
			private boolean moveNext_25() throws Exception {
				state = 25;				
				if (!var4_map_SELECT__processingDe.moveNext()) {state = 26; return false; }
				if (!(com.altova.functions.Core.equal(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(closure.var6_integrationId)), com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(((com.altova.db.Record)(var4_map_SELECT__processingDe.current())), "integrationId")))))))) {state = 25; return false; }
				var7_ = com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("0"))));
				current = new MFAttribute("processAfter", "", null, com.altova.functions.Core.box(com.altova.functions.Lang.datetimeAdd(com.altova.functions.Lang.now(), com.altova.functions.Lang.durationFromParts(var7_, var7_, var7_, var7_, com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.longToInteger((Long)com.altova.functions.Core.first(com.altova.db.Dbs.readField(((com.altova.db.Record)(var4_map_SELECT__processingDe.current())), "processingDelay"))))), 0, new java.math.BigDecimal("0"), com.altova.CoreTypes.parseBoolean("0")))));
				pos++;
				return true;
			}
			private boolean moveNext_26() throws Exception {
				state = 36;				
				var4_map_SELECT__processingDe.close(); var4_map_SELECT__processingDe = null;
				current = new MFAttribute("createdOn", "", null, com.altova.functions.Core.box(com.altova.functions.Lang.now()));
				pos++;
				return true;
			}
			private boolean moveNext_36() throws Exception {
				state = 38;				
				if (!(var8_exists)) {state = 38; return false; }
				if (!(com.altova.functions.Core.exists((new seq7_map_vmf1_inputtoresult(closure.var1_bv))))) {state = 38; return false; }
				current = new MFAttribute("statusId", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong((java.math.BigInteger)com.altova.functions.Core.first(com.servicelive.esb.mapforce.vmf.vmf2_inputtoresult.create(com.altova.CoreTypes.longToInteger((Long)com.altova.functions.Core.first(com.servicelive.esb.mapforce.vmf.vmf1_inputtoresult.create(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Status)))))))))));
				pos++;
				return true;
			}
			private boolean moveNext_38() throws Exception {
				state = 50;				
				current = new MFAttribute("buyerResourceId", "", null, com.altova.functions.Core.box(closure.var9_buyerResourceId));
				pos++;
				return true;
			}
			private boolean moveNext_50() throws Exception {
				state = 0;				
				current = new MFElement("serviceorders", "", null, (new seq8_content_serviceorders(closure.var1_bv)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var4_map_SELECT__processingDe.close(); var4_map_SELECT__processingDe = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq4_map_vmf1_inputtoresult implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq4_map_vmf1_inputtoresult(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq4_map_vmf1_inputtoresult closure;
			IEnumerator var1_map_vmf1_inputtoresult;
			public Enumerator(seq4_map_vmf1_inputtoresult closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_vmf1_inputtoresult = (com.servicelive.esb.mapforce.vmf.vmf1_inputtoresult.create(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Status")))))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_vmf1_inputtoresult.moveNext()) {state = 6; return false; }
				current = com.altova.CoreTypes.longToInteger(((Long)(var1_map_vmf1_inputtoresult.current())));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_vmf1_inputtoresult.close(); var1_map_vmf1_inputtoresult = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_vmf1_inputtoresult.close(); var1_map_vmf1_inputtoresult = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq6_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_;
	
		public seq6_NewQuery(com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_)
		{
			this.var2_ServiceLiveIntegrationDb__servicelive_integration_ = var2_ServiceLiveIntegrationDb__servicelive_integration_;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq6_NewQuery closure;
			com.altova.db.Statement var1_NewQuery;
			public Enumerator(seq6_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var1_NewQuery = com.altova.db.Dbs.newQuery(closure.var2_ServiceLiveIntegrationDb__servicelive_integration_, 0);
				current = com.altova.db.Dbs.executeQuery(var1_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var1_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq5__integrations_ implements IEnumerable
	{
		com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_;
	
		public seq5__integrations_(com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_)
		{
			this.var1_ServiceLiveIntegrationDb__servicelive_integration_ = var1_ServiceLiveIntegrationDb__servicelive_integration_;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq5__integrations_ closure;
			com.altova.db.ResultSetWrapper var3_NewQuery;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq5__integrations_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var3_NewQuery = (com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq6_NewQuery(closure.var1_ServiceLiveIntegrationDb__servicelive_integration_)));
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!(com.altova.db.Dbs.moveNextRecord(var3_NewQuery))) {state = 0; return false; }
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_long(var2_NewRecord, var3_NewQuery, "processingDelay");
				com.altova.db.Dbs.read_short(var2_NewRecord, var3_NewQuery, "integrationId");
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeRecordset(var3_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq7_map_vmf1_inputtoresult implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq7_map_vmf1_inputtoresult(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq7_map_vmf1_inputtoresult closure;
			IEnumerator var1_map_vmf1_inputtoresult;
			public Enumerator(seq7_map_vmf1_inputtoresult closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_vmf1_inputtoresult = (com.servicelive.esb.mapforce.vmf.vmf1_inputtoresult.create(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Status")))))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_vmf1_inputtoresult.moveNext()) {state = 6; return false; }
				current = com.altova.CoreTypes.longToInteger(((Long)(var1_map_vmf1_inputtoresult.current())));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_vmf1_inputtoresult.close(); var1_map_vmf1_inputtoresult = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_vmf1_inputtoresult.close(); var1_map_vmf1_inputtoresult = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq8_content_serviceorders implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq8_content_serviceorders(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq8_content_serviceorders closure;
			com.altova.mapforce.IEnumerable var8_select_Incident_Comments;
			com.altova.mapforce.IEnumerable var7_select_Class_Comments;
			com.altova.mapforce.IEnumerable var3_select_Class_Code;
			boolean var10_exists;
			java.lang.String var6_const__;
			IEnumerator var2_map_tokenize;
			com.altova.mapforce.IEnumerable var5_select_Class_Comments;
			IEnumerator var4_map_tokenize;
			com.altova.mapforce.IMFNode var9_select_Incident_Comments;
			IEnumerator var11_map_tokenize;
			IEnumerator var12_map_tokenize;
			public Enumerator(seq8_content_serviceorders closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 39:	if (moveNext_39()) return true; break;
					case 41:	if (moveNext_41()) return true; break;
					case 46:	if (moveNext_46()) return true; break;
					case 50:	if (moveNext_50()) return true; break;
					case 53:	if (moveNext_53()) return true; break;
					case 78:	if (moveNext_78()) return true; break;
					case 80:	if (moveNext_80()) return true; break;
					case 103:	if (moveNext_103()) return true; break;
					case 105:	if (moveNext_105()) return true; break;
					case 128:	if (moveNext_128()) return true; break;
					case 130:	if (moveNext_130()) return true; break;
					case 136:	if (moveNext_136()) return true; break;
					case 146:	if (moveNext_146()) return true; break;
					case 153:	if (moveNext_153()) return true; break;
					case 155:	if (moveNext_155()) return true; break;
					case 156:	if (moveNext_156()) return true; break;
					case 157:	if (moveNext_157()) return true; break;
					case 166:	if (moveNext_166()) return true; break;
					case 167:	if (moveNext_167()) return true; break;
					case 168:	if (moveNext_168()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 9;				
				var8_select_Incident_Comments = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Incident Comments")));
				var7_select_Class_Comments = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Class Comments")));
				var3_select_Class_Code = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Class Code")));
				var10_exists = com.altova.functions.Core.exists(var3_select_Class_Code);
				if (!(var10_exists)) {state = 6; return false; }
				var6_const__ = "^";
				var2_map_tokenize = (com.altova.functions.Core.tokenize(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_Class_Code))), var6_const__)).enumerator();
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 41;				
				if (!(com.altova.functions.Core.exists(var7_select_Class_Comments))) {state = 39; return false; }
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 21;				
				if (!var2_map_tokenize.moveNext()) {state = 10; return false; }
				if (!(com.altova.functions.Core.equal(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(var2_map_tokenize.position()))), new java.math.BigDecimal("1")))) {state = 9; return false; }
				var5_select_Class_Comments = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Class Comments")));
				if (!(com.altova.functions.Core.exists(var5_select_Class_Comments))) {state = 9; return false; }
				var4_map_tokenize = (com.altova.functions.Core.tokenize(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var5_select_Class_Comments))), var6_const__)).enumerator();
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 6;				
				var2_map_tokenize.close(); var2_map_tokenize = null;
				return false;
			}
			private boolean moveNext_21() throws Exception {
				state = 21;				
				if (!var4_map_tokenize.moveNext()) {state = 22; return false; }
				if (!(com.altova.functions.Core.equal(new java.math.BigDecimal("1"), com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(var4_map_tokenize.position())))))) {state = 21; return false; }
				current = new MFAttribute("title", "", null, com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.functions.Core.concat(((java.lang.String)(var2_map_tokenize.current())), "-"), ((java.lang.String)(var4_map_tokenize.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_22() throws Exception {
				state = 9;				
				var4_map_tokenize.close(); var4_map_tokenize = null;
				return false;
			}
			private boolean moveNext_39() throws Exception {
				state = 46;				
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat((java.lang.String)com.altova.functions.Core.first((new seq18_if_empty(closure.var1_bv))), (java.lang.String)com.altova.functions.Core.first((new seq22_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq25_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq28_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq31_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq34_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq37_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq40_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq43_if_empty(closure.var1_bv)))))))) {state = 50; return false; }
				return false;
			}
			private boolean moveNext_41() throws Exception {
				state = 39;				
				current = new MFAttribute("description", "", null, com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat((java.lang.String)com.altova.functions.Core.first((new seq9_if_empty(closure.var1_bv))), (java.lang.String)com.altova.functions.Core.first((new seq12_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq15_if_empty(closure.var1_bv)))), com.altova.functions.Lang.replace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var7_select_Class_Comments)), "^", com.altova.functions.Core.charFromCode(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("10")))))));
				pos++;
				return true;
			}
			private boolean moveNext_46() throws Exception {
				state = 53;				
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "First Name"))))) {state = 53; return false; }
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Last Name"))))) {state = 53; return false; }
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Phone"))))) {state = 53; return false; }
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Alt Phone"))))) {state = 53; return false; }
				current = new MFElement("contacts", "", null, (new seq47_content_contacts(closure.var1_bv)));
				pos++;
				return true;
			}
			private boolean moveNext_50() throws Exception {
				state = 46;				
				current = new MFAttribute("providerInstructions", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq46_cond_concat(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_53() throws Exception {
				state = 80;				
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Part/LaborFlag"))))) {state = 78; return false; }
				return false;
			}
			private boolean moveNext_78() throws Exception {
				state = 105;				
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Address 1"))))) {state = 103; return false; }
				return false;
			}
			private boolean moveNext_80() throws Exception {
				state = 78;				
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Contract Date"))))) {state = 78; return false; }
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Associated Incident"))))) {state = 78; return false; }
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ContractNum"))))) {state = 78; return false; }
				current = new MFElement("customrefs_assurant", "", null, (new seq50_content_customrefs_assurant(closure.var1_bv)));
				pos++;
				return true;
			}
			private boolean moveNext_103() throws Exception {
				state = 130;				
				if (!(com.altova.functions.Core.exists(var8_select_Incident_Comments))) {state = 128; return false; }
				return false;
			}
			private boolean moveNext_105() throws Exception {
				state = 103;				
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "City"))))) {state = 103; return false; }
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "State"))))) {state = 103; return false; }
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Zip Code"))))) {state = 103; return false; }
				current = new MFElement("locations", "", null, (new seq55_content_locations(closure.var1_bv)));
				pos++;
				return true;
			}
			private boolean moveNext_128() throws Exception {
				state = 155;				
				if (!(var10_exists)) {state = 153; return false; }
				return false;
			}
			private boolean moveNext_130() throws Exception {
				state = 128;				
				if (!((Boolean)com.altova.functions.Core.first((new seq56_if_exists(closure.var1_bv))))) {state = 136; return false; }
				return false;
			}
			private boolean moveNext_136() throws Exception {
				state = 128;				
				if (!((Boolean)com.altova.functions.Core.first((new seq57_if_exists(closure.var1_bv))))) {state = 128; return false; }
				var9_select_Incident_Comments = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var8_select_Incident_Comments);
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString(var9_select_Incident_Comments))))) {state = 146; return false; }
				return false;
			}
			private boolean moveNext_146() throws Exception {
				state = 128;				
				current = new MFElement("notes", "", null, com.altova.functions.Core.box(new MFAttribute("text", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString(var9_select_Incident_Comments)))));
				pos++;
				return true;
			}
			private boolean moveNext_153() throws Exception {
				state = 166;				
				if (!(var10_exists)) {state = 0; return false; }
				return false;
			}
			private boolean moveNext_155() throws Exception {
				state = 156;				
				var11_map_tokenize = (com.altova.functions.Core.tokenize(com.altova.functions.Core.substring(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_Class_Code))), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("0")), com.altova.CoreTypes.decimalToDouble((java.math.BigDecimal)com.altova.functions.Core.first((new seq58_if_equal(closure.var1_bv))))), "^")).enumerator();
				return false;
			}
			private boolean moveNext_156() throws Exception {
				state = 156;				
				if (!var11_map_tokenize.moveNext()) {state = 157; return false; }
				current = new MFElement("parts", "", null, (new seq59_content_parts(closure.var1_bv, var11_map_tokenize.position(), ((java.lang.String)(var11_map_tokenize.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_157() throws Exception {
				state = 153;				
				var11_map_tokenize.close(); var11_map_tokenize = null;
				return false;
			}
			private boolean moveNext_166() throws Exception {
				state = 167;				
				var12_map_tokenize = (com.altova.functions.Core.tokenize(com.altova.functions.Core.substring(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_Class_Code))), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("0")), com.altova.CoreTypes.decimalToDouble((java.math.BigDecimal)com.altova.functions.Core.first((new seq70_if_equal(closure.var1_bv))))), "^")).enumerator();
				return false;
			}
			private boolean moveNext_167() throws Exception {
				state = 167;				
				if (!var12_map_tokenize.moveNext()) {state = 168; return false; }
				current = new MFElement("tasks", "", null, (new seq71_content_tasks(closure.var1_bv, var12_map_tokenize.position(), ((java.lang.String)(var12_map_tokenize.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_168() throws Exception {
				state = 0;				
				var12_map_tokenize.close(); var12_map_tokenize = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var4_map_tokenize.close(); var4_map_tokenize = null;
				var2_map_tokenize.close(); var2_map_tokenize = null;
				var11_map_tokenize.close(); var11_map_tokenize = null;
				var12_map_tokenize.close(); var12_map_tokenize = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq9_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq9_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq9_if_empty closure;
			java.lang.String var2_map_select_Manufacturer;
			public Enumerator(seq9_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_map_select_Manufacturer = (java.lang.String)com.altova.functions.Core.first((new seq10_map_select_Manufacturer(closure.var1_bv)));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_map_select_Manufacturer)))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat("Manufacturer:", var2_map_select_Manufacturer), " !  ");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq10_map_select_Manufacturer implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq10_map_select_Manufacturer(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq10_map_select_Manufacturer closure;
			com.altova.mapforce.IEnumerable var1_map_select_Manufacturer;
			IEnumerator var3_return;
			public Enumerator(seq10_map_select_Manufacturer closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 13;				
				var1_map_select_Manufacturer = new com.altova.functions.Core.SequenceCache((new seq11_map_select_Manufacturer(closure.var2_bv)));
				if (!(com.altova.functions.Core.exists(var1_map_select_Manufacturer))) {state = 16; return false; }
				var3_return = (var1_map_select_Manufacturer).enumerator();
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 13;				
				if (!var3_return.moveNext()) {state = 14; return false; }
				current = var3_return.current();
				pos++;
				return true;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var3_return.close(); var3_return = null;
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				current = "";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var3_return.close(); var3_return = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq11_map_select_Manufacturer implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq11_map_select_Manufacturer(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq11_map_select_Manufacturer closure;
			IEnumerator var1_map_select_Manufacturer;
			public Enumerator(seq11_map_select_Manufacturer closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_select_Manufacturer = ((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Manufacturer"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_select_Manufacturer.moveNext()) {state = 6; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var1_map_select_Manufacturer.current())));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_select_Manufacturer.close(); var1_map_select_Manufacturer = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_select_Manufacturer.close(); var1_map_select_Manufacturer = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq12_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq12_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq12_if_empty closure;
			java.lang.String var2_map_select_Model_Number;
			public Enumerator(seq12_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_map_select_Model_Number = (java.lang.String)com.altova.functions.Core.first((new seq13_map_select_Model_Number(closure.var1_bv)));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_map_select_Model_Number)))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat("Model#:", var2_map_select_Model_Number), " !  ");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq13_map_select_Model_Number implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq13_map_select_Model_Number(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq13_map_select_Model_Number closure;
			com.altova.mapforce.IEnumerable var1_map_select_Model_Number;
			IEnumerator var3_return;
			public Enumerator(seq13_map_select_Model_Number closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 13;				
				var1_map_select_Model_Number = new com.altova.functions.Core.SequenceCache((new seq14_map_select_Model_Number(closure.var2_bv)));
				if (!(com.altova.functions.Core.exists(var1_map_select_Model_Number))) {state = 16; return false; }
				var3_return = (var1_map_select_Model_Number).enumerator();
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 13;				
				if (!var3_return.moveNext()) {state = 14; return false; }
				current = var3_return.current();
				pos++;
				return true;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var3_return.close(); var3_return = null;
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				current = "";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var3_return.close(); var3_return = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq14_map_select_Model_Number implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq14_map_select_Model_Number(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq14_map_select_Model_Number closure;
			IEnumerator var1_map_select_Model_Number;
			public Enumerator(seq14_map_select_Model_Number closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_select_Model_Number = ((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Model Number"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_select_Model_Number.moveNext()) {state = 6; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var1_map_select_Model_Number.current())));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_select_Model_Number.close(); var1_map_select_Model_Number = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_select_Model_Number.close(); var1_map_select_Model_Number = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq15_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq15_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq15_if_empty closure;
			java.lang.String var2_map_select_Serial_Number;
			public Enumerator(seq15_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_map_select_Serial_Number = (java.lang.String)com.altova.functions.Core.first((new seq16_map_select_Serial_Number(closure.var1_bv)));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_map_select_Serial_Number)))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat("Serial#:", var2_map_select_Serial_Number), " !  ");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq16_map_select_Serial_Number implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq16_map_select_Serial_Number(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq16_map_select_Serial_Number closure;
			com.altova.mapforce.IEnumerable var1_map_select_Serial_Number;
			IEnumerator var3_return;
			public Enumerator(seq16_map_select_Serial_Number closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 13;				
				var1_map_select_Serial_Number = new com.altova.functions.Core.SequenceCache((new seq17_map_select_Serial_Number(closure.var2_bv)));
				if (!(com.altova.functions.Core.exists(var1_map_select_Serial_Number))) {state = 16; return false; }
				var3_return = (var1_map_select_Serial_Number).enumerator();
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 13;				
				if (!var3_return.moveNext()) {state = 14; return false; }
				current = var3_return.current();
				pos++;
				return true;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var3_return.close(); var3_return = null;
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				current = "";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var3_return.close(); var3_return = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq17_map_select_Serial_Number implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq17_map_select_Serial_Number(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq17_map_select_Serial_Number closure;
			IEnumerator var1_map_select_Serial_Number;
			public Enumerator(seq17_map_select_Serial_Number closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_select_Serial_Number = ((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Serial Number"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_select_Serial_Number.moveNext()) {state = 6; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var1_map_select_Serial_Number.current())));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_select_Serial_Number.close(); var1_map_select_Serial_Number = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_select_Serial_Number.close(); var1_map_select_Serial_Number = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq18_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq18_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq18_if_empty closure;
			java.lang.String var2_cond_cond_cast_first;
			public Enumerator(seq18_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_cond_cond_cast_first = (java.lang.String)com.altova.functions.Core.first((new seq19_cond_cond_cast_first(closure.var1_bv)));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_cond_cond_cast_first)))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat("Incident Comments:", var2_cond_cond_cast_first), " !  ");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq19_cond_cond_cast_first implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq19_cond_cond_cast_first(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq19_cond_cond_cast_first closure;
			com.altova.mapforce.IEnumerable var1_cond_cond_cast_first;
			IEnumerator var3_return;
			public Enumerator(seq19_cond_cond_cast_first closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 13;				
				var1_cond_cond_cast_first = new com.altova.functions.Core.SequenceCache((new seq20_cond_cond_cast_first(closure.var2_bv)));
				if (!(com.altova.functions.Core.exists(var1_cond_cond_cast_first))) {state = 16; return false; }
				var3_return = (var1_cond_cond_cast_first).enumerator();
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 13;				
				if (!var3_return.moveNext()) {state = 14; return false; }
				current = var3_return.current();
				pos++;
				return true;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var3_return.close(); var3_return = null;
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				current = "";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var3_return.close(); var3_return = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq20_cond_cond_cast_first implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq20_cond_cond_cast_first(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq20_cond_cond_cast_first closure;
			com.altova.mapforce.IEnumerable var2_select_Incident_Comments;
			public Enumerator(seq20_cond_cond_cast_first closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_select_Incident_Comments = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Incident Comments")));
				if (!(com.altova.functions.Core.exists(var2_select_Incident_Comments))) {state = 0; return false; }
				if (!((Boolean)com.altova.functions.Core.first((new seq21_if_exists(closure.var1_bv))))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.box((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Incident_Comments))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq21_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq21_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq21_if_exists closure;
			com.altova.mapforce.IEnumerable var2_select_Status;
			com.altova.mapforce.IMFNode var3_select_Status;
			public Enumerator(seq21_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_select_Status = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Status")));
				if (!(com.altova.functions.Core.exists(var2_select_Status))) {state = 11; return false; }
				var3_select_Status = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Status);
				current = com.altova.functions.Core.logicalOr(com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString(var3_select_Status), "NEW"), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString(var3_select_Status), "UPDATE"));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq22_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq22_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq22_if_empty closure;
			java.lang.String var2_map_select_WarrantyStatus;
			public Enumerator(seq22_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_map_select_WarrantyStatus = (java.lang.String)com.altova.functions.Core.first((new seq23_map_select_WarrantyStatus(closure.var1_bv)));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_map_select_WarrantyStatus)))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat("WarrantyStatus:", var2_map_select_WarrantyStatus), " !  ");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq23_map_select_WarrantyStatus implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq23_map_select_WarrantyStatus(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq23_map_select_WarrantyStatus closure;
			com.altova.mapforce.IEnumerable var1_map_select_WarrantyStatus;
			IEnumerator var3_return;
			public Enumerator(seq23_map_select_WarrantyStatus closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 13;				
				var1_map_select_WarrantyStatus = new com.altova.functions.Core.SequenceCache((new seq24_map_select_WarrantyStatus(closure.var2_bv)));
				if (!(com.altova.functions.Core.exists(var1_map_select_WarrantyStatus))) {state = 16; return false; }
				var3_return = (var1_map_select_WarrantyStatus).enumerator();
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 13;				
				if (!var3_return.moveNext()) {state = 14; return false; }
				current = var3_return.current();
				pos++;
				return true;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var3_return.close(); var3_return = null;
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				current = "";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var3_return.close(); var3_return = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq24_map_select_WarrantyStatus implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq24_map_select_WarrantyStatus(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq24_map_select_WarrantyStatus closure;
			IEnumerator var1_map_select_WarrantyStatus;
			public Enumerator(seq24_map_select_WarrantyStatus closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_select_WarrantyStatus = ((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "WarrantyStatus"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_select_WarrantyStatus.moveNext()) {state = 6; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var1_map_select_WarrantyStatus.current())));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_select_WarrantyStatus.close(); var1_map_select_WarrantyStatus = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_select_WarrantyStatus.close(); var1_map_select_WarrantyStatus = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq25_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq25_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq25_if_empty closure;
			java.lang.String var2_cond_datetime_from_parts;
			public Enumerator(seq25_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_cond_datetime_from_parts = (java.lang.String)com.altova.functions.Core.first((new seq26_cond_datetime_from_parts(closure.var1_bv)));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_cond_datetime_from_parts)))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat("WarrantyExpirationDate:", var2_cond_datetime_from_parts), " !  ");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq26_cond_datetime_from_parts implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq26_cond_datetime_from_parts(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq26_cond_datetime_from_parts closure;
			com.altova.mapforce.IEnumerable var1_cond_datetime_from_parts;
			public Enumerator(seq26_cond_datetime_from_parts closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var1_cond_datetime_from_parts = new com.altova.functions.Core.SequenceCache((new seq27_cond_datetime_from_parts(closure.var2_bv)));
				if (!(com.altova.functions.Core.exists(var1_cond_datetime_from_parts))) {state = 15; return false; }
				current = com.altova.CoreTypes.DateTimeToString((com.altova.types.DateTime)com.altova.functions.Core.first(var1_cond_datetime_from_parts));
				pos++;
				return true;
			}
			private boolean moveNext_15() throws Exception {
				state = 0;				
				current = "";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq27_cond_datetime_from_parts implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq27_cond_datetime_from_parts(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq27_cond_datetime_from_parts closure;
			com.altova.mapforce.IEnumerable var2_select_ExpDate;
			com.altova.mapforce.IMFNode var3_select_ExpDate;
			public Enumerator(seq27_cond_datetime_from_parts closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_select_ExpDate = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ExpDate")));
				if (!(com.altova.functions.Core.exists(var2_select_ExpDate))) {state = 0; return false; }
				var3_select_ExpDate = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_ExpDate);
				current = com.altova.functions.Lang.datetimeFromParts(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.functions.Core.substring(com.altova.CoreTypes.nodeToString(var3_select_ExpDate), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("1")), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("4"))))))), com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.functions.Core.substring(com.altova.CoreTypes.nodeToString(var3_select_ExpDate), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("6")), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("2"))))))), com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.functions.Core.substring(com.altova.CoreTypes.nodeToString(var3_select_ExpDate), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("9")), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("2"))))))), com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.functions.Core.substring(com.altova.CoreTypes.nodeToString(var3_select_ExpDate), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("12")), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("2"))))))), com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.functions.Core.substring(com.altova.CoreTypes.nodeToString(var3_select_ExpDate), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("15")), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("2"))))))), com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.functions.Core.substring(com.altova.CoreTypes.nodeToString(var3_select_ExpDate), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("18")), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("2"))))))), new java.math.BigDecimal("0"), -32768);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq28_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq28_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq28_if_empty closure;
			java.lang.String var2_map_select_Part_WarrantySKU;
			public Enumerator(seq28_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_map_select_Part_WarrantySKU = (java.lang.String)com.altova.functions.Core.first((new seq29_map_select_Part_WarrantySKU(closure.var1_bv)));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_map_select_Part_WarrantySKU)))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat("PartsWarrantySKU:", var2_map_select_Part_WarrantySKU), " !  ");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq29_map_select_Part_WarrantySKU implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq29_map_select_Part_WarrantySKU(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq29_map_select_Part_WarrantySKU closure;
			com.altova.mapforce.IEnumerable var1_map_select_Part_WarrantySKU;
			IEnumerator var3_return;
			public Enumerator(seq29_map_select_Part_WarrantySKU closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 13;				
				var1_map_select_Part_WarrantySKU = new com.altova.functions.Core.SequenceCache((new seq30_map_select_Part_WarrantySKU(closure.var2_bv)));
				if (!(com.altova.functions.Core.exists(var1_map_select_Part_WarrantySKU))) {state = 16; return false; }
				var3_return = (var1_map_select_Part_WarrantySKU).enumerator();
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 13;				
				if (!var3_return.moveNext()) {state = 14; return false; }
				current = var3_return.current();
				pos++;
				return true;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var3_return.close(); var3_return = null;
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				current = "";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var3_return.close(); var3_return = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq30_map_select_Part_WarrantySKU implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq30_map_select_Part_WarrantySKU(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq30_map_select_Part_WarrantySKU closure;
			IEnumerator var1_map_select_Part_WarrantySKU;
			public Enumerator(seq30_map_select_Part_WarrantySKU closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_select_Part_WarrantySKU = ((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Part/WarrantySKU"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_select_Part_WarrantySKU.moveNext()) {state = 6; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var1_map_select_Part_WarrantySKU.current())));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_select_Part_WarrantySKU.close(); var1_map_select_Part_WarrantySKU = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_select_Part_WarrantySKU.close(); var1_map_select_Part_WarrantySKU = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq31_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq31_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq31_if_empty closure;
			java.lang.String var2_map_select_ProviderLocation;
			public Enumerator(seq31_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_map_select_ProviderLocation = (java.lang.String)com.altova.functions.Core.first((new seq32_map_select_ProviderLocation(closure.var1_bv)));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_map_select_ProviderLocation)))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat("ServiceProviderLocation:", var2_map_select_ProviderLocation), " !  ");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq32_map_select_ProviderLocation implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq32_map_select_ProviderLocation(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq32_map_select_ProviderLocation closure;
			com.altova.mapforce.IEnumerable var1_map_select_ProviderLocation;
			IEnumerator var3_return;
			public Enumerator(seq32_map_select_ProviderLocation closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 13;				
				var1_map_select_ProviderLocation = new com.altova.functions.Core.SequenceCache((new seq33_map_select_ProviderLocation(closure.var2_bv)));
				if (!(com.altova.functions.Core.exists(var1_map_select_ProviderLocation))) {state = 16; return false; }
				var3_return = (var1_map_select_ProviderLocation).enumerator();
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 13;				
				if (!var3_return.moveNext()) {state = 14; return false; }
				current = var3_return.current();
				pos++;
				return true;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var3_return.close(); var3_return = null;
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				current = "";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var3_return.close(); var3_return = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq33_map_select_ProviderLocation implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq33_map_select_ProviderLocation(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq33_map_select_ProviderLocation closure;
			IEnumerator var1_map_select_ProviderLocation;
			public Enumerator(seq33_map_select_ProviderLocation closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_select_ProviderLocation = ((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ProviderLocation"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_select_ProviderLocation.moveNext()) {state = 6; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var1_map_select_ProviderLocation.current())));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_select_ProviderLocation.close(); var1_map_select_ProviderLocation = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_select_ProviderLocation.close(); var1_map_select_ProviderLocation = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq34_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq34_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq34_if_empty closure;
			java.lang.String var2_map_select_VendorClaimNum;
			public Enumerator(seq34_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_map_select_VendorClaimNum = (java.lang.String)com.altova.functions.Core.first((new seq35_map_select_VendorClaimNum(closure.var1_bv)));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_map_select_VendorClaimNum)))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat("VendorClaim#:", var2_map_select_VendorClaimNum), " !  ");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq35_map_select_VendorClaimNum implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq35_map_select_VendorClaimNum(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq35_map_select_VendorClaimNum closure;
			com.altova.mapforce.IEnumerable var1_map_select_VendorClaimNum;
			IEnumerator var3_return;
			public Enumerator(seq35_map_select_VendorClaimNum closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 13;				
				var1_map_select_VendorClaimNum = new com.altova.functions.Core.SequenceCache((new seq36_map_select_VendorClaimNum(closure.var2_bv)));
				if (!(com.altova.functions.Core.exists(var1_map_select_VendorClaimNum))) {state = 16; return false; }
				var3_return = (var1_map_select_VendorClaimNum).enumerator();
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 13;				
				if (!var3_return.moveNext()) {state = 14; return false; }
				current = var3_return.current();
				pos++;
				return true;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var3_return.close(); var3_return = null;
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				current = "";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var3_return.close(); var3_return = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq36_map_select_VendorClaimNum implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq36_map_select_VendorClaimNum(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq36_map_select_VendorClaimNum closure;
			IEnumerator var1_map_select_VendorClaimNum;
			public Enumerator(seq36_map_select_VendorClaimNum closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_select_VendorClaimNum = ((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "VendorClaimNum"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_select_VendorClaimNum.moveNext()) {state = 6; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var1_map_select_VendorClaimNum.current())));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_select_VendorClaimNum.close(); var1_map_select_VendorClaimNum = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_select_VendorClaimNum.close(); var1_map_select_VendorClaimNum = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq37_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq37_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq37_if_empty closure;
			java.lang.String var2_map_select_SupportGroup;
			public Enumerator(seq37_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_map_select_SupportGroup = (java.lang.String)com.altova.functions.Core.first((new seq38_map_select_SupportGroup(closure.var1_bv)));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_map_select_SupportGroup)))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat("SupportGroup:", var2_map_select_SupportGroup), " !  ");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq38_map_select_SupportGroup implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq38_map_select_SupportGroup(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq38_map_select_SupportGroup closure;
			com.altova.mapforce.IEnumerable var1_map_select_SupportGroup;
			IEnumerator var3_return;
			public Enumerator(seq38_map_select_SupportGroup closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 13;				
				var1_map_select_SupportGroup = new com.altova.functions.Core.SequenceCache((new seq39_map_select_SupportGroup(closure.var2_bv)));
				if (!(com.altova.functions.Core.exists(var1_map_select_SupportGroup))) {state = 16; return false; }
				var3_return = (var1_map_select_SupportGroup).enumerator();
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 13;				
				if (!var3_return.moveNext()) {state = 14; return false; }
				current = var3_return.current();
				pos++;
				return true;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var3_return.close(); var3_return = null;
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				current = "";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var3_return.close(); var3_return = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq39_map_select_SupportGroup implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq39_map_select_SupportGroup(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq39_map_select_SupportGroup closure;
			IEnumerator var1_map_select_SupportGroup;
			public Enumerator(seq39_map_select_SupportGroup closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_select_SupportGroup = ((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "SupportGroup"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_select_SupportGroup.moveNext()) {state = 6; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var1_map_select_SupportGroup.current())));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_select_SupportGroup.close(); var1_map_select_SupportGroup = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_select_SupportGroup.close(); var1_map_select_SupportGroup = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq40_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq40_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq40_if_empty closure;
			java.lang.String var2_map_select_ServicerID;
			public Enumerator(seq40_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_map_select_ServicerID = (java.lang.String)com.altova.functions.Core.first((new seq41_map_select_ServicerID(closure.var1_bv)));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_map_select_ServicerID)))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat("ServicerID:", var2_map_select_ServicerID), " !  ");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq41_map_select_ServicerID implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq41_map_select_ServicerID(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq41_map_select_ServicerID closure;
			com.altova.mapforce.IEnumerable var1_map_select_ServicerID;
			IEnumerator var3_return;
			public Enumerator(seq41_map_select_ServicerID closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 13;				
				var1_map_select_ServicerID = new com.altova.functions.Core.SequenceCache((new seq42_map_select_ServicerID(closure.var2_bv)));
				if (!(com.altova.functions.Core.exists(var1_map_select_ServicerID))) {state = 16; return false; }
				var3_return = (var1_map_select_ServicerID).enumerator();
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 13;				
				if (!var3_return.moveNext()) {state = 14; return false; }
				current = var3_return.current();
				pos++;
				return true;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var3_return.close(); var3_return = null;
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				current = "";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var3_return.close(); var3_return = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq42_map_select_ServicerID implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq42_map_select_ServicerID(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq42_map_select_ServicerID closure;
			IEnumerator var1_map_select_ServicerID;
			public Enumerator(seq42_map_select_ServicerID closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_select_ServicerID = ((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ServicerID"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_select_ServicerID.moveNext()) {state = 6; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var1_map_select_ServicerID.current())));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_select_ServicerID.close(); var1_map_select_ServicerID = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_select_ServicerID.close(); var1_map_select_ServicerID = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq43_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq43_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq43_if_empty closure;
			java.lang.String var2_map_select_ContractTypeCode;
			public Enumerator(seq43_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_map_select_ContractTypeCode = (java.lang.String)com.altova.functions.Core.first((new seq44_map_select_ContractTypeCode(closure.var1_bv)));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_map_select_ContractTypeCode)))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat("ContractTypeCode:", var2_map_select_ContractTypeCode), " !  ");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq44_map_select_ContractTypeCode implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq44_map_select_ContractTypeCode(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq44_map_select_ContractTypeCode closure;
			com.altova.mapforce.IEnumerable var1_map_select_ContractTypeCode;
			IEnumerator var3_return;
			public Enumerator(seq44_map_select_ContractTypeCode closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 13;				
				var1_map_select_ContractTypeCode = new com.altova.functions.Core.SequenceCache((new seq45_map_select_ContractTypeCode(closure.var2_bv)));
				if (!(com.altova.functions.Core.exists(var1_map_select_ContractTypeCode))) {state = 16; return false; }
				var3_return = (var1_map_select_ContractTypeCode).enumerator();
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 13;				
				if (!var3_return.moveNext()) {state = 14; return false; }
				current = var3_return.current();
				pos++;
				return true;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var3_return.close(); var3_return = null;
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				current = "";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var3_return.close(); var3_return = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq45_map_select_ContractTypeCode implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq45_map_select_ContractTypeCode(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq45_map_select_ContractTypeCode closure;
			IEnumerator var1_map_select_ContractTypeCode;
			public Enumerator(seq45_map_select_ContractTypeCode closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_select_ContractTypeCode = ((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ContractTypeCode"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_select_ContractTypeCode.moveNext()) {state = 6; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var1_map_select_ContractTypeCode.current())));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_select_ContractTypeCode.close(); var1_map_select_ContractTypeCode = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_select_ContractTypeCode.close(); var1_map_select_ContractTypeCode = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq46_cond_concat implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq46_cond_concat(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq46_cond_concat closure;
			java.lang.String var2_concat;
			public Enumerator(seq46_cond_concat closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_concat = com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat((java.lang.String)com.altova.functions.Core.first((new seq18_if_empty(closure.var1_bv))), (java.lang.String)com.altova.functions.Core.first((new seq22_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq25_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq28_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq31_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq34_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq37_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq40_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq43_if_empty(closure.var1_bv))));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_concat)))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				current = var2_concat;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq47_content_contacts implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq47_content_contacts(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq47_content_contacts closure;
			public Enumerator(seq47_content_contacts closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				current = new MFAttribute("lastName", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Last Name"))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = new MFAttribute("firstName", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "First Name"))))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				current = new MFAttribute("email", "", null, com.altova.functions.Core.box(""));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 8;				
				current = new MFAttribute("honorific", "", null, com.altova.functions.Core.box(""));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 10;				
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Phone")))))))) {state = 14; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Alt Phone")))))))) {state = 21; return false; }
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 10;				
				current = new MFElement("phones", "", null, (new seq48_content_phones(closure.var1_bv)));
				pos++;
				return true;
			}
			private boolean moveNext_21() throws Exception {
				state = 0;				
				current = new MFElement("phones (2)", "", null, (new seq49_content_phones__2_(closure.var1_bv)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq48_content_phones implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq48_content_phones(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq48_content_phones closure;
			com.altova.mapforce.IEnumerable var2_select_Phone_Ext;
			public Enumerator(seq48_content_phones closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var2_select_Phone_Ext = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Phone Ext")));
				current = new MFAttribute("phoneNumber", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Phone")))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 7;				
				if (!(com.altova.functions.Core.exists(var2_select_Phone_Ext))) {state = 7; return false; }
				current = new MFAttribute("phoneExtension", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Phone_Ext)))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 13;				
				current = new MFAttribute("phoneType", "", null, com.altova.functions.Core.box("HOME"));
				pos++;
				return true;
			}
			private boolean moveNext_13() throws Exception {
				state = 0;				
				current = new MFAttribute("primary", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.booleanToDecimal(com.altova.CoreTypes.parseBoolean("true")))))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq49_content_phones__2_ implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq49_content_phones__2_(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq49_content_phones__2_ closure;
			com.altova.mapforce.IEnumerable var2_select_Alt_Phone_Ext;
			public Enumerator(seq49_content_phones__2_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var2_select_Alt_Phone_Ext = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Alt Phone Ext")));
				current = new MFAttribute("phoneNumber", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Alt Phone")))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 7;				
				if (!(com.altova.functions.Core.exists(var2_select_Alt_Phone_Ext))) {state = 7; return false; }
				current = new MFAttribute("phoneExtension", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Alt_Phone_Ext)))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 13;				
				current = new MFAttribute("phoneType", "", null, com.altova.functions.Core.box("OTHER"));
				pos++;
				return true;
			}
			private boolean moveNext_13() throws Exception {
				state = 0;				
				current = new MFAttribute("primary", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.booleanToDecimal(com.altova.CoreTypes.parseBoolean("false")))))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq50_content_customrefs_assurant implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq50_content_customrefs_assurant(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq50_content_customrefs_assurant closure;
			com.altova.mapforce.IEnumerable var8_select_Part_Number;
			com.altova.mapforce.IEnumerable var6_select_Class_Code;
			com.altova.mapforce.IEnumerable var4_select_Retailer;
			com.altova.mapforce.IEnumerable var3_select_Incident_ID;
			com.altova.mapforce.IMFNode var2_select_Contract_Date;
			IEnumerator var5_map_tokenize;
			IEnumerator var7_map_tokenize;
			public Enumerator(seq50_content_customrefs_assurant closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
					case 19:	if (moveNext_19()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
					case 26:	if (moveNext_26()) return true; break;
					case 27:	if (moveNext_27()) return true; break;
					case 28:	if (moveNext_28()) return true; break;
					case 41:	if (moveNext_41()) return true; break;
					case 43:	if (moveNext_43()) return true; break;
					case 44:	if (moveNext_44()) return true; break;
					case 45:	if (moveNext_45()) return true; break;
					case 57:	if (moveNext_57()) return true; break;
					case 66:	if (moveNext_66()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var8_select_Part_Number = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Part Number")));
				var6_select_Class_Code = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Class Code")));
				var4_select_Retailer = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Retailer")));
				var3_select_Incident_ID = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Incident ID")));
				var2_select_Contract_Date = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Contract Date")));
				current = new MFAttribute("partLaborFlag", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Part/LaborFlag"))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = new MFAttribute("contractDate", "", null, com.altova.functions.Core.box(com.altova.functions.Lang.datetimeFromParts(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.functions.Core.substring(com.altova.CoreTypes.nodeToString(var2_select_Contract_Date), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("1")), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("4"))))))), com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.functions.Core.substring(com.altova.CoreTypes.nodeToString(var2_select_Contract_Date), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("6")), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("2"))))))), com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.functions.Core.substring(com.altova.CoreTypes.nodeToString(var2_select_Contract_Date), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("9")), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("2"))))))), com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.functions.Core.substring(com.altova.CoreTypes.nodeToString(var2_select_Contract_Date), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("12")), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("2"))))))), com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.functions.Core.substring(com.altova.CoreTypes.nodeToString(var2_select_Contract_Date), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("15")), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("2"))))))), com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.functions.Core.substring(com.altova.CoreTypes.nodeToString(var2_select_Contract_Date), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("18")), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("2"))))))), new java.math.BigDecimal("0"), -32768)));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				current = new MFAttribute("associatedIncident", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Associated Incident"))))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 8;				
				current = new MFAttribute("contractNumber", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ContractNum"))))));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 10;				
				if (!(com.altova.functions.Core.exists(var3_select_Incident_ID))) {state = 10; return false; }
				current = new MFAttribute("incidentId", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_Incident_ID))));
				pos++;
				return true;
			}
			private boolean moveNext_10() throws Exception {
				state = 19;				
				if (!(com.altova.functions.Core.exists(var4_select_Retailer))) {state = 17; return false; }
				return false;
			}
			private boolean moveNext_17() throws Exception {
				state = 26;				
				if (!(com.altova.functions.Core.exists(var6_select_Class_Code))) {state = 24; return false; }
				return false;
			}
			private boolean moveNext_19() throws Exception {
				state = 17;				
				current = new MFAttribute("retailer", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var4_select_Retailer))));
				pos++;
				return true;
			}
			private boolean moveNext_24() throws Exception {
				state = 43;				
				if (!(com.altova.functions.Core.exists(var8_select_Part_Number))) {state = 41; return false; }
				return false;
			}
			private boolean moveNext_26() throws Exception {
				state = 27;				
				var5_map_tokenize = (com.altova.functions.Core.tokenize(com.altova.functions.Core.substring(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var6_select_Class_Code))), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("0")), com.altova.CoreTypes.decimalToDouble((java.math.BigDecimal)com.altova.functions.Core.first((new seq51_if_equal(closure.var1_bv))))), "^")).enumerator();
				return false;
			}
			private boolean moveNext_27() throws Exception {
				state = 27;				
				if (!var5_map_tokenize.moveNext()) {state = 28; return false; }
				if (!(com.altova.functions.Core.equal(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(var5_map_tokenize.position()))), new java.math.BigDecimal("1")))) {state = 27; return false; }
				current = new MFAttribute("classCode", "", null, com.altova.functions.Core.box(((java.lang.String)(var5_map_tokenize.current()))));
				pos++;
				return true;
			}
			private boolean moveNext_28() throws Exception {
				state = 24;				
				var5_map_tokenize.close(); var5_map_tokenize = null;
				return false;
			}
			private boolean moveNext_41() throws Exception {
				state = 66;				
				if (!((Boolean)com.altova.functions.Core.first((new seq54_if_exists(closure.var1_bv))))) {state = 0; return false; }
				return false;
			}
			private boolean moveNext_43() throws Exception {
				state = 44;				
				var7_map_tokenize = (com.altova.functions.Core.tokenize(com.altova.functions.Core.substring(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var8_select_Part_Number))), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("0")), com.altova.CoreTypes.decimalToDouble((java.math.BigDecimal)com.altova.functions.Core.first((new seq52_if_equal(closure.var1_bv))))), "^")).enumerator();
				return false;
			}
			private boolean moveNext_44() throws Exception {
				state = 44;				
				if (!var7_map_tokenize.moveNext()) {state = 45; return false; }
				if (!(com.altova.functions.Core.equal(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(var7_map_tokenize.position()))), new java.math.BigDecimal("1")))) {state = 44; return false; }
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(((java.lang.String)(var7_map_tokenize.current())))))) {state = 57; return false; }
				return false;
			}
			private boolean moveNext_45() throws Exception {
				state = 41;				
				var7_map_tokenize.close(); var7_map_tokenize = null;
				return false;
			}
			private boolean moveNext_57() throws Exception {
				state = 44;				
				current = new MFAttribute("primaryPartNumber", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq53_cond_cur_tokenize(((java.lang.String)(var7_map_tokenize.current())))))));
				pos++;
				return true;
			}
			private boolean moveNext_66() throws Exception {
				state = 0;				
				current = new MFAttribute("incidentContractType", "", null, com.altova.functions.Core.box("Accidental Damage"));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var5_map_tokenize.close(); var5_map_tokenize = null;
				var7_map_tokenize.close(); var7_map_tokenize = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq51_if_equal implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq51_if_equal(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq51_if_equal closure;
			java.lang.String var2_normalize_space;
			int var4_string_length;
			java.math.BigDecimal var3_;
			public Enumerator(seq51_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Class Code")))));
				var4_string_length = com.altova.functions.Core.stringLength(var2_normalize_space);
				var3_ = com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(var4_string_length)));
				if (!(com.altova.functions.Core.equal(com.altova.functions.Core.substring(var2_normalize_space, com.altova.CoreTypes.decimalToDouble(com.altova.functions.Core.subtract(var3_, new java.math.BigDecimal("1"))), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("1"))), " "))) {state = 11; return false; }
				current = com.altova.functions.Core.subtract(var3_, new java.math.BigDecimal("1"));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong((Integer)com.altova.functions.Core.first(com.altova.functions.Core.box(var4_string_length)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq52_if_equal implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq52_if_equal(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq52_if_equal closure;
			java.lang.String var2_normalize_space;
			int var4_string_length;
			java.math.BigDecimal var3_;
			public Enumerator(seq52_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Part Number")))));
				var4_string_length = com.altova.functions.Core.stringLength(var2_normalize_space);
				var3_ = com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(var4_string_length)));
				if (!(com.altova.functions.Core.equal(com.altova.functions.Core.substring(var2_normalize_space, com.altova.CoreTypes.decimalToDouble(com.altova.functions.Core.subtract(var3_, new java.math.BigDecimal("1"))), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("1"))), " "))) {state = 11; return false; }
				current = com.altova.functions.Core.subtract(var3_, new java.math.BigDecimal("1"));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong((Integer)com.altova.functions.Core.first(com.altova.functions.Core.box(var4_string_length)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq53_cond_cur_tokenize implements IEnumerable
	{
		java.lang.String var1_bv;
	
		public seq53_cond_cur_tokenize(java.lang.String var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq53_cond_cur_tokenize closure;
			public Enumerator(seq53_cond_cur_tokenize closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(closure.var1_bv)))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				current = closure.var1_bv;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq54_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq54_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq54_if_exists closure;
			com.altova.mapforce.IEnumerable var2_select_ContractTypeCode;
			public Enumerator(seq54_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_select_ContractTypeCode = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ContractTypeCode")));
				if (!(com.altova.functions.Core.exists(var2_select_ContractTypeCode))) {state = 11; return false; }
				current = (Boolean)com.altova.functions.Core.first(com.servicelive.esb.mapforce.vmf.vmf3_inputtoresult.create(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_ContractTypeCode)))));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq55_content_locations implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq55_content_locations(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq55_content_locations closure;
			com.altova.mapforce.IEnumerable var3_select_Zip_Code_Ext;
			com.altova.mapforce.IEnumerable var2_select_Address_2;
			public Enumerator(seq55_content_locations closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var3_select_Zip_Code_Ext = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Zip Code Ext")));
				var2_select_Address_2 = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Address 2")));
				current = new MFAttribute("locationName", "", null, com.altova.functions.Core.box(""));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = new MFAttribute("addressLine1", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Address 1"))))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 8;				
				if (!(com.altova.functions.Core.exists(var2_select_Address_2))) {state = 8; return false; }
				current = new MFAttribute("addressLine2", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Address_2))));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 14;				
				current = new MFAttribute("city", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "City"))))));
				pos++;
				return true;
			}
			private boolean moveNext_14() throws Exception {
				state = 15;				
				current = new MFAttribute("state", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "State"))))));
				pos++;
				return true;
			}
			private boolean moveNext_15() throws Exception {
				state = 16;				
				current = new MFAttribute("zipCode", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Zip Code"))))));
				pos++;
				return true;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(var3_select_Zip_Code_Ext))) {state = 0; return false; }
				current = new MFAttribute("zip4", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_Zip_Code_Ext))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq56_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq56_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq56_if_exists closure;
			com.altova.mapforce.IEnumerable var2_select_Status;
			com.altova.mapforce.IMFNode var3_select_Status;
			public Enumerator(seq56_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_select_Status = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Status")));
				if (!(com.altova.functions.Core.exists(var2_select_Status))) {state = 11; return false; }
				var3_select_Status = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Status);
				current = com.altova.functions.Core.logicalOr(com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString(var3_select_Status), "NEW"), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString(var3_select_Status), "UPDATE"));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq57_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq57_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq57_if_exists closure;
			com.altova.mapforce.IEnumerable var2_select_Status;
			com.altova.mapforce.IMFNode var3_select_Status;
			public Enumerator(seq57_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_select_Status = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Status")));
				if (!(com.altova.functions.Core.exists(var2_select_Status))) {state = 11; return false; }
				var3_select_Status = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Status);
				current = com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr(com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString(var3_select_Status), "NEW"), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString(var3_select_Status), "UPDATE")));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq58_if_equal implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq58_if_equal(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq58_if_equal closure;
			java.lang.String var2_normalize_space;
			int var4_string_length;
			java.math.BigDecimal var3_;
			public Enumerator(seq58_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Class Code")))));
				var4_string_length = com.altova.functions.Core.stringLength(var2_normalize_space);
				var3_ = com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(var4_string_length)));
				if (!(com.altova.functions.Core.equal(com.altova.functions.Core.substring(var2_normalize_space, com.altova.CoreTypes.decimalToDouble(com.altova.functions.Core.subtract(var3_, new java.math.BigDecimal("1"))), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("1"))), " "))) {state = 11; return false; }
				current = com.altova.functions.Core.subtract(var3_, new java.math.BigDecimal("1"));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong((Integer)com.altova.functions.Core.first(com.altova.functions.Core.box(var4_string_length)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq59_content_parts implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
		int var7_bv;
		java.lang.String var10_bv;
	
		public seq59_content_parts(com.altova.mapforce.IMFNode var1_bv, int var7_bv, java.lang.String var10_bv)
		{
			this.var1_bv = var1_bv;
			this.var7_bv = var7_bv;
			this.var10_bv = var10_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq59_content_parts closure;
			com.altova.mapforce.IEnumerable var13_select_Class_Comments;
			com.altova.mapforce.IEnumerable var9_select_Part_Number;
			com.altova.mapforce.IEnumerable var6_select_OEM_Number;
			com.altova.mapforce.IEnumerable var4_select_Serial_Number;
			com.altova.mapforce.IEnumerable var3_select_Model_Number;
			com.altova.mapforce.IEnumerable var2_select_Manufacturer;
			IEnumerator var5_map_tokenize;
			IEnumerator var8_map_tokenize;
			IEnumerator var11_map_cond_map_tokenize;
			IEnumerator var12_map_tokenize;
			public Enumerator(seq59_content_parts closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 27:	if (moveNext_27()) return true; break;
					case 29:	if (moveNext_29()) return true; break;
					case 30:	if (moveNext_30()) return true; break;
					case 31:	if (moveNext_31()) return true; break;
					case 44:	if (moveNext_44()) return true; break;
					case 46:	if (moveNext_46()) return true; break;
					case 47:	if (moveNext_47()) return true; break;
					case 48:	if (moveNext_48()) return true; break;
					case 60:	if (moveNext_60()) return true; break;
					case 61:	if (moveNext_61()) return true; break;
					case 62:	if (moveNext_62()) return true; break;
					case 70:	if (moveNext_70()) return true; break;
					case 71:	if (moveNext_71()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 6;				
				var13_select_Class_Comments = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Class Comments")));
				var9_select_Part_Number = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Part Number")));
				var6_select_OEM_Number = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "OEM Number")));
				var4_select_Serial_Number = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Serial Number")));
				var3_select_Model_Number = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Model Number")));
				var2_select_Manufacturer = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Manufacturer")));
				if (!(com.altova.functions.Core.exists(var2_select_Manufacturer))) {state = 6; return false; }
				current = new MFAttribute("manufacturer", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Manufacturer))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 15;				
				if (!(com.altova.functions.Core.exists(var3_select_Model_Number))) {state = 13; return false; }
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 22;				
				if (!(com.altova.functions.Core.exists(var4_select_Serial_Number))) {state = 20; return false; }
				return false;
			}
			private boolean moveNext_15() throws Exception {
				state = 13;				
				current = new MFAttribute("modelNumber", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_Model_Number))));
				pos++;
				return true;
			}
			private boolean moveNext_20() throws Exception {
				state = 29;				
				if (!(com.altova.functions.Core.exists(var6_select_OEM_Number))) {state = 27; return false; }
				return false;
			}
			private boolean moveNext_22() throws Exception {
				state = 20;				
				current = new MFAttribute("serialNumber", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var4_select_Serial_Number))));
				pos++;
				return true;
			}
			private boolean moveNext_27() throws Exception {
				state = 46;				
				if (!(com.altova.functions.Core.exists(var9_select_Part_Number))) {state = 44; return false; }
				return false;
			}
			private boolean moveNext_29() throws Exception {
				state = 30;				
				var5_map_tokenize = (com.altova.functions.Core.tokenize(com.altova.functions.Core.substring(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var6_select_OEM_Number))), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("0")), com.altova.CoreTypes.decimalToDouble((java.math.BigDecimal)com.altova.functions.Core.first((new seq60_if_equal(closure.var1_bv))))), "^")).enumerator();
				return false;
			}
			private boolean moveNext_30() throws Exception {
				state = 30;				
				if (!var5_map_tokenize.moveNext()) {state = 31; return false; }
				if (!(com.altova.functions.Core.equal(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(closure.var7_bv))), com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(var5_map_tokenize.position())))))) {state = 30; return false; }
				current = new MFAttribute("partNumber", "", null, com.altova.functions.Core.box(((java.lang.String)(var5_map_tokenize.current()))));
				pos++;
				return true;
			}
			private boolean moveNext_31() throws Exception {
				state = 27;				
				var5_map_tokenize.close(); var5_map_tokenize = null;
				return false;
			}
			private boolean moveNext_44() throws Exception {
				state = 60;				
				current = new MFAttribute("classCode", "", null, com.altova.functions.Core.box(closure.var10_bv));
				pos++;
				return true;
			}
			private boolean moveNext_46() throws Exception {
				state = 47;				
				var8_map_tokenize = (com.altova.functions.Core.tokenize(com.altova.functions.Core.substring(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var9_select_Part_Number))), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("0")), com.altova.CoreTypes.decimalToDouble((java.math.BigDecimal)com.altova.functions.Core.first((new seq61_if_equal(closure.var1_bv))))), "^")).enumerator();
				return false;
			}
			private boolean moveNext_47() throws Exception {
				state = 47;				
				if (!var8_map_tokenize.moveNext()) {state = 48; return false; }
				if (!(com.altova.functions.Core.equal(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(closure.var7_bv))), com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(var8_map_tokenize.position())))))) {state = 47; return false; }
				current = new MFAttribute("vendorPartNumber", "", null, com.altova.functions.Core.box(((java.lang.String)(var8_map_tokenize.current()))));
				pos++;
				return true;
			}
			private boolean moveNext_48() throws Exception {
				state = 44;				
				var8_map_tokenize.close(); var8_map_tokenize = null;
				return false;
			}
			private boolean moveNext_60() throws Exception {
				state = 61;				
				var11_map_cond_map_tokenize = ((new seq62_cond_map_tokenize(closure.var1_bv, closure.var7_bv))).enumerator();
				return false;
			}
			private boolean moveNext_61() throws Exception {
				state = 61;				
				if (!var11_map_cond_map_tokenize.moveNext()) {state = 62; return false; }
				current = new MFAttribute("description", "", null, com.altova.functions.Core.box(com.altova.functions.Core.concat((java.lang.String)com.altova.functions.Core.first((new seq65_if_empty(((java.lang.String)(var11_map_cond_map_tokenize.current()))))), (java.lang.String)com.altova.functions.Core.first((new seq66_if_empty(closure.var1_bv))))));
				pos++;
				return true;
			}
			private boolean moveNext_62() throws Exception {
				state = 70;				
				var11_map_cond_map_tokenize.close(); var11_map_cond_map_tokenize = null;
				if (!(com.altova.functions.Core.exists(var13_select_Class_Comments))) {state = 0; return false; }
				var12_map_tokenize = (com.altova.functions.Core.tokenize(com.altova.functions.Core.substring(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var13_select_Class_Comments))), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("0")), com.altova.CoreTypes.decimalToDouble((java.math.BigDecimal)com.altova.functions.Core.first((new seq69_if_equal(closure.var1_bv))))), "^")).enumerator();
				return false;
			}
			private boolean moveNext_70() throws Exception {
				state = 70;				
				if (!var12_map_tokenize.moveNext()) {state = 71; return false; }
				if (!(com.altova.functions.Core.equal(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(closure.var7_bv))), com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(var12_map_tokenize.position())))))) {state = 70; return false; }
				current = new MFAttribute("classComments", "", null, com.altova.functions.Core.box(((java.lang.String)(var12_map_tokenize.current()))));
				pos++;
				return true;
			}
			private boolean moveNext_71() throws Exception {
				state = 0;				
				var12_map_tokenize.close(); var12_map_tokenize = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var5_map_tokenize.close(); var5_map_tokenize = null;
				var8_map_tokenize.close(); var8_map_tokenize = null;
				var11_map_cond_map_tokenize.close(); var11_map_cond_map_tokenize = null;
				var12_map_tokenize.close(); var12_map_tokenize = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq60_if_equal implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq60_if_equal(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq60_if_equal closure;
			java.lang.String var2_normalize_space;
			int var4_string_length;
			java.math.BigDecimal var3_;
			public Enumerator(seq60_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "OEM Number")))));
				var4_string_length = com.altova.functions.Core.stringLength(var2_normalize_space);
				var3_ = com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(var4_string_length)));
				if (!(com.altova.functions.Core.equal(com.altova.functions.Core.substring(var2_normalize_space, com.altova.CoreTypes.decimalToDouble(com.altova.functions.Core.subtract(var3_, new java.math.BigDecimal("1"))), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("1"))), " "))) {state = 11; return false; }
				current = com.altova.functions.Core.subtract(var3_, new java.math.BigDecimal("1"));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong((Integer)com.altova.functions.Core.first(com.altova.functions.Core.box(var4_string_length)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq61_if_equal implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq61_if_equal(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq61_if_equal closure;
			java.lang.String var2_normalize_space;
			int var4_string_length;
			java.math.BigDecimal var3_;
			public Enumerator(seq61_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Part Number")))));
				var4_string_length = com.altova.functions.Core.stringLength(var2_normalize_space);
				var3_ = com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(var4_string_length)));
				if (!(com.altova.functions.Core.equal(com.altova.functions.Core.substring(var2_normalize_space, com.altova.CoreTypes.decimalToDouble(com.altova.functions.Core.subtract(var3_, new java.math.BigDecimal("1"))), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("1"))), " "))) {state = 11; return false; }
				current = com.altova.functions.Core.subtract(var3_, new java.math.BigDecimal("1"));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong((Integer)com.altova.functions.Core.first(com.altova.functions.Core.box(var4_string_length)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq62_cond_map_tokenize implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
		int var3_bv;
	
		public seq62_cond_map_tokenize(com.altova.mapforce.IMFNode var2_bv, int var3_bv)
		{
			this.var2_bv = var2_bv;
			this.var3_bv = var3_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq62_cond_map_tokenize closure;
			com.altova.mapforce.IEnumerable var1_cond_map_tokenize;
			IEnumerator var4_return;
			public Enumerator(seq62_cond_map_tokenize closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 13;				
				var1_cond_map_tokenize = new com.altova.functions.Core.SequenceCache((new seq63_cond_map_tokenize(closure.var2_bv, closure.var3_bv)));
				if (!(com.altova.functions.Core.exists(var1_cond_map_tokenize))) {state = 16; return false; }
				var4_return = (var1_cond_map_tokenize).enumerator();
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 13;				
				if (!var4_return.moveNext()) {state = 14; return false; }
				current = var4_return.current();
				pos++;
				return true;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var4_return.close(); var4_return = null;
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				current = "";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var4_return.close(); var4_return = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq63_cond_map_tokenize implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
		int var4_bv;
	
		public seq63_cond_map_tokenize(com.altova.mapforce.IMFNode var1_bv, int var4_bv)
		{
			this.var1_bv = var1_bv;
			this.var4_bv = var4_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq63_cond_map_tokenize closure;
			com.altova.mapforce.IEnumerable var3_select_Part_Comments_Description;
			IEnumerator var2_map_tokenize;
			public Enumerator(seq63_cond_map_tokenize closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 9;				
				var3_select_Part_Comments_Description = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Part Comments/Description")));
				if (!(com.altova.functions.Core.exists(var3_select_Part_Comments_Description))) {state = 0; return false; }
				var2_map_tokenize = (com.altova.functions.Core.tokenize(com.altova.functions.Core.substring(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_Part_Comments_Description))), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("0")), com.altova.CoreTypes.decimalToDouble((java.math.BigDecimal)com.altova.functions.Core.first((new seq64_if_equal(closure.var1_bv))))), "^")).enumerator();
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 9;				
				if (!var2_map_tokenize.moveNext()) {state = 10; return false; }
				if (!(com.altova.functions.Core.equal(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(closure.var4_bv))), com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(var2_map_tokenize.position())))))) {state = 9; return false; }
				current = var2_map_tokenize.current();
				pos++;
				return true;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				var2_map_tokenize.close(); var2_map_tokenize = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_map_tokenize.close(); var2_map_tokenize = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq64_if_equal implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq64_if_equal(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq64_if_equal closure;
			java.lang.String var2_normalize_space;
			int var4_string_length;
			java.math.BigDecimal var3_;
			public Enumerator(seq64_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Part Comments/Description")))));
				var4_string_length = com.altova.functions.Core.stringLength(var2_normalize_space);
				var3_ = com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(var4_string_length)));
				if (!(com.altova.functions.Core.equal(com.altova.functions.Core.substring(var2_normalize_space, com.altova.CoreTypes.decimalToDouble(com.altova.functions.Core.subtract(var3_, new java.math.BigDecimal("1"))), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("1"))), " "))) {state = 11; return false; }
				current = com.altova.functions.Core.subtract(var3_, new java.math.BigDecimal("1"));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong((Integer)com.altova.functions.Core.first(com.altova.functions.Core.box(var4_string_length)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq65_if_empty implements IEnumerable
	{
		java.lang.String var1_bv;
	
		public seq65_if_empty(java.lang.String var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq65_if_empty closure;
			public Enumerator(seq65_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(closure.var1_bv)))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat("Comments:", closure.var1_bv), " !  ");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq66_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq66_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq66_if_empty closure;
			java.lang.String var2_map_select_ShipMethod;
			public Enumerator(seq66_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_map_select_ShipMethod = (java.lang.String)com.altova.functions.Core.first((new seq67_map_select_ShipMethod(closure.var1_bv)));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_map_select_ShipMethod)))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat("ShippingMethod:", var2_map_select_ShipMethod), " !  ");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq67_map_select_ShipMethod implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq67_map_select_ShipMethod(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq67_map_select_ShipMethod closure;
			com.altova.mapforce.IEnumerable var1_map_select_ShipMethod;
			IEnumerator var3_return;
			public Enumerator(seq67_map_select_ShipMethod closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 13;				
				var1_map_select_ShipMethod = new com.altova.functions.Core.SequenceCache((new seq68_map_select_ShipMethod(closure.var2_bv)));
				if (!(com.altova.functions.Core.exists(var1_map_select_ShipMethod))) {state = 16; return false; }
				var3_return = (var1_map_select_ShipMethod).enumerator();
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 13;				
				if (!var3_return.moveNext()) {state = 14; return false; }
				current = var3_return.current();
				pos++;
				return true;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var3_return.close(); var3_return = null;
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				current = "";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var3_return.close(); var3_return = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq68_map_select_ShipMethod implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq68_map_select_ShipMethod(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq68_map_select_ShipMethod closure;
			IEnumerator var1_map_select_ShipMethod;
			public Enumerator(seq68_map_select_ShipMethod closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_select_ShipMethod = ((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ShipMethod"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_select_ShipMethod.moveNext()) {state = 6; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var1_map_select_ShipMethod.current())));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_select_ShipMethod.close(); var1_map_select_ShipMethod = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_select_ShipMethod.close(); var1_map_select_ShipMethod = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq69_if_equal implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq69_if_equal(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq69_if_equal closure;
			java.lang.String var2_normalize_space;
			int var4_string_length;
			java.math.BigDecimal var3_;
			public Enumerator(seq69_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Class Comments")))));
				var4_string_length = com.altova.functions.Core.stringLength(var2_normalize_space);
				var3_ = com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(var4_string_length)));
				if (!(com.altova.functions.Core.equal(com.altova.functions.Core.substring(var2_normalize_space, com.altova.CoreTypes.decimalToDouble(com.altova.functions.Core.subtract(var3_, new java.math.BigDecimal("1"))), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("1"))), " "))) {state = 11; return false; }
				current = com.altova.functions.Core.subtract(var3_, new java.math.BigDecimal("1"));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong((Integer)com.altova.functions.Core.first(com.altova.functions.Core.box(var4_string_length)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq70_if_equal implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq70_if_equal(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq70_if_equal closure;
			java.lang.String var2_normalize_space;
			int var4_string_length;
			java.math.BigDecimal var3_;
			public Enumerator(seq70_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Class Code")))));
				var4_string_length = com.altova.functions.Core.stringLength(var2_normalize_space);
				var3_ = com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(var4_string_length)));
				if (!(com.altova.functions.Core.equal(com.altova.functions.Core.substring(var2_normalize_space, com.altova.CoreTypes.decimalToDouble(com.altova.functions.Core.subtract(var3_, new java.math.BigDecimal("1"))), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("1"))), " "))) {state = 11; return false; }
				current = com.altova.functions.Core.subtract(var3_, new java.math.BigDecimal("1"));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong((Integer)com.altova.functions.Core.first(com.altova.functions.Core.box(var4_string_length)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq71_content_tasks implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
		int var4_bv;
		java.lang.String var5_bv;
	
		public seq71_content_tasks(com.altova.mapforce.IMFNode var1_bv, int var4_bv, java.lang.String var5_bv)
		{
			this.var1_bv = var1_bv;
			this.var4_bv = var4_bv;
			this.var5_bv = var5_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq71_content_tasks closure;
			com.altova.mapforce.IEnumerable var3_select_Class_Comments;
			boolean var6_exists;
			IEnumerator var2_map_tokenize;
			IEnumerator var7_map_tokenize;
			public Enumerator(seq71_content_tasks closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 23:	if (moveNext_23()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
					case 26:	if (moveNext_26()) return true; break;
					case 27:	if (moveNext_27()) return true; break;
					case 40:	if (moveNext_40()) return true; break;
					case 42:	if (moveNext_42()) return true; break;
					case 46:	if (moveNext_46()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 9;				
				var3_select_Class_Comments = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Class Comments")));
				var6_exists = com.altova.functions.Core.exists(var3_select_Class_Comments);
				if (!(var6_exists)) {state = 6; return false; }
				var2_map_tokenize = (com.altova.functions.Core.tokenize(com.altova.functions.Core.substring(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_Class_Comments))), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("0")), com.altova.CoreTypes.decimalToDouble((java.math.BigDecimal)com.altova.functions.Core.first((new seq72_if_equal(closure.var1_bv))))), "^")).enumerator();
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 25;				
				if (!(var6_exists)) {state = 23; return false; }
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 9;				
				if (!var2_map_tokenize.moveNext()) {state = 10; return false; }
				if (!(com.altova.functions.Core.equal(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(closure.var4_bv))), com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(var2_map_tokenize.position())))))) {state = 9; return false; }
				current = new MFAttribute("title", "", null, com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.functions.Core.concat(closure.var5_bv, "-"), ((java.lang.String)(var2_map_tokenize.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_10() throws Exception {
				state = 6;				
				var2_map_tokenize.close(); var2_map_tokenize = null;
				return false;
			}
			private boolean moveNext_23() throws Exception {
				state = 42;				
				if (!(com.altova.functions.Core.equal(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(closure.var4_bv))), new java.math.BigDecimal("1")))) {state = 40; return false; }
				return false;
			}
			private boolean moveNext_25() throws Exception {
				state = 26;				
				var7_map_tokenize = (com.altova.functions.Core.tokenize(com.altova.functions.Core.substring(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_Class_Comments))), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("0")), com.altova.CoreTypes.decimalToDouble((java.math.BigDecimal)com.altova.functions.Core.first((new seq73_if_equal(closure.var1_bv))))), "^")).enumerator();
				return false;
			}
			private boolean moveNext_26() throws Exception {
				state = 26;				
				if (!var7_map_tokenize.moveNext()) {state = 27; return false; }
				if (!(com.altova.functions.Core.equal(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(closure.var4_bv))), com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(var7_map_tokenize.position())))))) {state = 26; return false; }
				current = new MFAttribute("comments", "", null, com.altova.functions.Core.box(((java.lang.String)(var7_map_tokenize.current()))));
				pos++;
				return true;
			}
			private boolean moveNext_27() throws Exception {
				state = 23;				
				var7_map_tokenize.close(); var7_map_tokenize = null;
				return false;
			}
			private boolean moveNext_40() throws Exception {
				state = 46;				
				current = new MFAttribute("externalSku", "", null, com.altova.functions.Core.box(closure.var5_bv));
				pos++;
				return true;
			}
			private boolean moveNext_42() throws Exception {
				state = 40;				
				current = new MFAttribute("default", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("1"))))));
				pos++;
				return true;
			}
			private boolean moveNext_46() throws Exception {
				state = 0;				
				current = new MFAttribute("specialtyCode", "", null, com.altova.functions.Core.box("NA"));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var2_map_tokenize.close(); var2_map_tokenize = null;
				var7_map_tokenize.close(); var7_map_tokenize = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq72_if_equal implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq72_if_equal(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq72_if_equal closure;
			java.lang.String var2_normalize_space;
			int var4_string_length;
			java.math.BigDecimal var3_;
			public Enumerator(seq72_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Class Comments")))));
				var4_string_length = com.altova.functions.Core.stringLength(var2_normalize_space);
				var3_ = com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(var4_string_length)));
				if (!(com.altova.functions.Core.equal(com.altova.functions.Core.substring(var2_normalize_space, com.altova.CoreTypes.decimalToDouble(com.altova.functions.Core.subtract(var3_, new java.math.BigDecimal("1"))), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("1"))), " "))) {state = 11; return false; }
				current = com.altova.functions.Core.subtract(var3_, new java.math.BigDecimal("1"));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong((Integer)com.altova.functions.Core.first(com.altova.functions.Core.box(var4_string_length)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq73_if_equal implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq73_if_equal(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq73_if_equal closure;
			java.lang.String var2_normalize_space;
			int var4_string_length;
			java.math.BigDecimal var3_;
			public Enumerator(seq73_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Class Comments")))));
				var4_string_length = com.altova.functions.Core.stringLength(var2_normalize_space);
				var3_ = com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(var4_string_length)));
				if (!(com.altova.functions.Core.equal(com.altova.functions.Core.substring(var2_normalize_space, com.altova.CoreTypes.decimalToDouble(com.altova.functions.Core.subtract(var3_, new java.math.BigDecimal("1"))), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("1"))), " "))) {state = 11; return false; }
				current = com.altova.functions.Core.subtract(var3_, new java.math.BigDecimal("1"));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong((Integer)com.altova.functions.Core.first(com.altova.functions.Core.box(var4_string_length)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}


	private boolean runDoesCloseAll = true;		

	// instances
		protected com.altova.text.ITextNode varAssurantInstance;
	protected java.sql.Connection varServiceLiveIntegrationDb2Instance;
	protected long varintegrationId;
	protected long varbuyerResourceId;
		com.altova.db.DbTreeOperations.TransactionHelper transactionHelper;

	public void run(String AssurantSourceFilename, java.sql.Connection ServiceLiveIntegrationDb2SourceConnection, long integrationId3SourceParameter, long buyerResourceId2SourceParameter, java.sql.Connection ServiceLiveIntegrationDbTargetConnection) throws Exception {
		// open source streams
		writeTrace("Loading " + AssurantSourceFilename + "...\n");
		com.altova.io.FileInput AssurantSource = new com.altova.io.FileInput(AssurantSourceFilename);

		// run
		run(AssurantSource, ServiceLiveIntegrationDb2SourceConnection, integrationId3SourceParameter, buyerResourceId2SourceParameter, ServiceLiveIntegrationDbTargetConnection);

		// close source streams
		AssurantSource.close();
	}


	// main entry point

	public void run(com.altova.io.Input AssurantSource, java.sql.Connection ServiceLiveIntegrationDb2SourceConnection, long integrationId3SourceParameter, long buyerResourceId2SourceParameter, java.sql.Connection ServiceLiveIntegrationDbTargetConnection) throws Exception {
		// Open the source(s)
		writeTrace("Parsing Text...\n");
		com.servicelive.esb.mapforce.Assurant.AssurantDocument AssurantDocument = new com.servicelive.esb.mapforce.Assurant.AssurantDocument();
		AssurantDocument.setEncoding( "windows-1252", false, false );
		AssurantDocument.parse(AssurantSource);
		varAssurantInstance = AssurantDocument.getGenerator();
	
		AssurantSource.close();
		writeTrace("Connecting to ServiceLiveIntegrationDb2 database...\n");
			
		varServiceLiveIntegrationDb2Instance = ServiceLiveIntegrationDb2SourceConnection;
		
			varintegrationId = integrationId3SourceParameter;

			varbuyerResourceId = buyerResourceId2SourceParameter;


		// Create the target

		writeTrace("Connecting to ServiceLiveIntegrationDb database...\n");
		{

		// Execute mapping

		seq1_Main mapping = new seq1_Main(new com.altova.text.TextDocumentAsMFNodeAdapter(varAssurantInstance, AssurantSource.getFilename()), new com.altova.db.Catalog(varServiceLiveIntegrationDb2Instance), integrationId3SourceParameter, buyerResourceId2SourceParameter);

		writeDB(mapping, ServiceLiveIntegrationDbTargetConnection);
		// Close the target
		}

		writeTrace("Closing " + ServiceLiveIntegrationDbTargetConnection + ".\n");
		ServiceLiveIntegrationDbTargetConnection.close();
		// Close the source
		varServiceLiveIntegrationDb2Instance.close();

		
		if (runDoesCloseAll)
		{
			AssurantSource.close();
		}
	}



		static void writeDB(com.altova.mapforce.IEnumerable input, java.sql.Connection target) throws Exception
		{
			com.altova.db.DbTreeOperations.RecordBuffer buf = null;
			com.altova.db.DbTreeOperations.TransactionHelper transactionHelper = new com.altova.db.DbTreeOperations.TransactionHelper(
				target, "", "", "", "SAVEPOINT  %%TRANSACTION_NAME%% ", "ROLLBACK TO SAVEPOINT  %%TRANSACTION_NAME%% "
			);

			com.altova.db.DbTreeOperations.TransactionSentinel sentinel = new com.altova.db.DbTreeOperations.TransactionSentinel(transactionHelper, "");
			try
			{
				for (IEnumerator en = input.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("batches"))
						writeDB_batches(buf, node, target, transactionHelper);				
				}
				sentinel.commit();
			}
			finally
			{
				sentinel.rollback();
			}
		}

			static void writeDB_batches(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `batches` (`integrationId`,`fileName`,`statusId`,`createdOn`) VALUES (?,?,?,?)", false);
							command.addParameter(buf.getValue("integrationId"),java.sql.Types.JAVA_OBJECT,2,-1,-1); // Type: smallint 
							command.addParameter(buf.getValue("fileName"),java.sql.Types.JAVA_OBJECT,1024,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("statusId"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("createdOn"),java.sql.Types.JAVA_OBJECT,0,-1,-1); // Type: datetime 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `batchId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				for (IEnumerator en = children.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("transactions"))
						writeDB_transactions(buf, node, target, transactionHelper);				
				}
				}
			}
			static void writeDB_transactions(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("batchId", parent.getValue("batchId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `transactions` (`transactionTypeId`,`externalOrderNumber`,`processAfter`,`createdOn`,`statusId`,`buyerResourceId`,`batchId`) VALUES (?,?,?,?,?,?,?)", false);
							command.addParameter(buf.getValue("transactionTypeId"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("externalOrderNumber"),java.sql.Types.JAVA_OBJECT,64,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("processAfter"),java.sql.Types.JAVA_OBJECT,0,-1,-1); // Type: datetime 
							command.addParameter(buf.getValue("createdOn"),java.sql.Types.JAVA_OBJECT,0,-1,-1); // Type: datetime 
							command.addParameter(buf.getValue("statusId"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("buyerResourceId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							command.addParameter(buf.getValue("batchId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `transactionId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				for (IEnumerator en = children.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("serviceorders"))
						writeDB_serviceorders(buf, node, target, transactionHelper);				
				}
				}
			}
			static void writeDB_serviceorders(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("transactionId", parent.getValue("transactionId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `serviceorders` (`title`,`description`,`providerInstructions`,`transactionId`) VALUES (?,?,?,?)", false);
							command.addParameter(buf.getValue("title"),java.sql.Types.JAVA_OBJECT,4096,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("description"),java.sql.Types.JAVA_OBJECT,4096,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("providerInstructions"),java.sql.Types.JAVA_OBJECT,4096,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("transactionId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `serviceOrderId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				for (IEnumerator en = children.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("contacts"))
						writeDB_contacts(buf, node, target, transactionHelper);				
					if (node.getLocalName().equals("customrefs_assurant"))
						writeDB_customrefs_assurant(buf, node, target, transactionHelper);				
					if (node.getLocalName().equals("locations"))
						writeDB_locations(buf, node, target, transactionHelper);				
					if (node.getLocalName().equals("notes"))
						writeDB_notes(buf, node, target, transactionHelper);				
					if (node.getLocalName().equals("parts"))
						writeDB_parts(buf, node, target, transactionHelper);				
					if (node.getLocalName().equals("tasks"))
						writeDB_tasks(buf, node, target, transactionHelper);				
				}
				}
			}
			static void writeDB_contacts(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("serviceOrderId", parent.getValue("serviceOrderId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `contacts` (`lastName`,`firstName`,`email`,`honorific`,`serviceOrderId`) VALUES (?,?,?,?,?)", false);
							command.addParameter(buf.getValue("lastName"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("firstName"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("email"),java.sql.Types.JAVA_OBJECT,1024,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("honorific"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceOrderId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `contactId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				for (IEnumerator en = children.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("phones"))
						writeDB_phones(buf, node, target, transactionHelper);				
					if (node.getLocalName().equals("phones (2)"))
						writeDB_phones2(buf, node, target, transactionHelper);				
				}
				}
			}
			static void writeDB_phones(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("contactId", parent.getValue("contactId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `phones` (`phoneNumber`,`phoneExtension`,`phoneType`,`primary`,`contactId`) VALUES (?,?,?,?,?)", false);
							command.addParameter(buf.getValue("phoneNumber"),java.sql.Types.JAVA_OBJECT,20,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("phoneExtension"),java.sql.Types.JAVA_OBJECT,10,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("phoneType"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("primary"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("contactId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `phoneId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
			static void writeDB_phones2(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("contactId", parent.getValue("contactId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `phones` (`phoneNumber`,`phoneExtension`,`phoneType`,`primary`,`contactId`) VALUES (?,?,?,?,?)", false);
							command.addParameter(buf.getValue("phoneNumber"),java.sql.Types.JAVA_OBJECT,20,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("phoneExtension"),java.sql.Types.JAVA_OBJECT,10,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("phoneType"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("primary"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("contactId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `phoneId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
			static void writeDB_customrefs_assurant(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("serviceOrderId", parent.getValue("serviceOrderId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `customrefs_assurant` (`partLaborFlag`,`contractDate`,`associatedIncident`,`contractNumber`,`incidentId`,`retailer`,`classCode`,`primaryPartNumber`,`incidentContractType`,`serviceOrderId`)" +
" VALUES (?,?,?,?,?,?,?,?,?,?)", false);
							command.addParameter(buf.getValue("partLaborFlag"),java.sql.Types.JAVA_OBJECT,15,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("contractDate"),java.sql.Types.JAVA_OBJECT,0,-1,-1); // Type: datetime 
							command.addParameter(buf.getValue("associatedIncident"),java.sql.Types.JAVA_OBJECT,10,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("contractNumber"),java.sql.Types.JAVA_OBJECT,10,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("incidentId"),java.sql.Types.JAVA_OBJECT,20,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("retailer"),java.sql.Types.JAVA_OBJECT,10,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("classCode"),java.sql.Types.JAVA_OBJECT,10,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("primaryPartNumber"),java.sql.Types.JAVA_OBJECT,15,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("incidentContractType"),java.sql.Types.JAVA_OBJECT,30,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceOrderId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `customRefId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
			static void writeDB_locations(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("serviceOrderId", parent.getValue("serviceOrderId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `locations` (`locationName`,`addressLine1`,`addressLine2`,`city`,`state`,`zipCode`,`zip4`,`serviceOrderId`) VALUES (?,?,?,?,?,?,?,?)", false);
							command.addParameter(buf.getValue("locationName"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("addressLine1"),java.sql.Types.JAVA_OBJECT,1024,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("addressLine2"),java.sql.Types.JAVA_OBJECT,1024,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("city"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("state"),java.sql.Types.JAVA_OBJECT,2,-1,-1); // Type: char 
							command.addParameter(buf.getValue("zipCode"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("zip4"),java.sql.Types.JAVA_OBJECT,10,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceOrderId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `locationId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
			static void writeDB_notes(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("serviceOrderId", parent.getValue("serviceOrderId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `notes` (`text`,`serviceOrderId`) VALUES (?,?)", false);
							command.addParameter(buf.getValue("text"),java.sql.Types.JAVA_OBJECT,4096,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceOrderId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `noteId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
			static void writeDB_parts(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("serviceOrderId", parent.getValue("serviceOrderId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `parts` (`manufacturer`,`modelNumber`,`serialNumber`,`partNumber`,`vendorPartNumber`,`classCode`,`description`,`classComments`,`serviceOrderId`) VALUES (?,?,?,?,?,?,?,?,?)", false);
							command.addParameter(buf.getValue("manufacturer"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("modelNumber"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serialNumber"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("partNumber"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("vendorPartNumber"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("classCode"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("description"),java.sql.Types.JAVA_OBJECT,4096,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("classComments"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceOrderId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `partId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
			static void writeDB_tasks(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("serviceOrderId", parent.getValue("serviceOrderId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `tasks` (`title`,`comments`,`default`,`externalSku`,`specialtyCode`,`serviceOrderId`) VALUES (?,?,?,?,?,?)", false);
							command.addParameter(buf.getValue("title"),java.sql.Types.JAVA_OBJECT,1024,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("comments"),java.sql.Types.JAVA_OBJECT,4096,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("default"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("externalSku"),java.sql.Types.JAVA_OBJECT,18,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("specialtyCode"),java.sql.Types.JAVA_OBJECT,30,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceOrderId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `taskId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}
	static IEnumerable throwUserException(String content)
	{
		throw new com.altova.UserException(content);
	}
}
