/**
 * NPSCloseAuditMapToServiceLiveIntegrationDb8.java
 *
 * This file was generated by MapForce 2011sp1.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package com.servicelive.esb.mapforce;

import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import com.altova.db.*;
import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edi.*;
import java.util.*;

public class NPSCloseAuditMapToServiceLiveIntegrationDb8 extends com.altova.TraceProvider 
{
	static class seq1_Main implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_instance_NPSCloseAudit_AUD;
		com.altova.db.Catalog var2_instance_ServiceLiveIntegrationDb__servicelive_integration_;
		long var3_param_integrationId;
	
		public seq1_Main(com.altova.mapforce.IMFNode var1_instance_NPSCloseAudit_AUD, com.altova.db.Catalog var2_instance_ServiceLiveIntegrationDb__servicelive_integration_, long var3_param_integrationId)
		{
			this.var1_instance_NPSCloseAudit_AUD = var1_instance_NPSCloseAudit_AUD;
			this.var2_instance_ServiceLiveIntegrationDb__servicelive_integration_ = var2_instance_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var3_param_integrationId = var3_param_integrationId;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_Main closure;
			com.altova.db.Statement var10_NewStatement;
			com.altova.db.Statement var9_NewStatement;
			com.altova.db.Statement var8_NewStatement;
			com.altova.db.Statement var7_NewStatement;
			com.altova.db.Statement var6_NewStatement;
			com.altova.db.Statement var5_NewStatement;
			com.altova.db.Statement var4_NewStatement;
			public Enumerator(seq1_Main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var10_NewStatement = com.altova.db.Dbs.newStatement(closure.var2_instance_ServiceLiveIntegrationDb__servicelive_integration_, 6, "SELECT `externalStatus` FROM `serviceorders` WHERE ? = `serviceOrderId`");
				com.altova.db.Dbs.addParameter(var10_NewStatement, java.sql.Types.BIGINT,-1);
				com.altova.db.Dbs.prepareStatement(var10_NewStatement);
				var9_NewStatement = com.altova.db.Dbs.newStatement(closure.var2_instance_ServiceLiveIntegrationDb__servicelive_integration_, 5, "SELECT `relatedServiceOrderId` FROM `buyer_notifications` WHERE ? = `transactionId`");
				com.altova.db.Dbs.addParameter(var9_NewStatement, java.sql.Types.BIGINT,-1);
				com.altova.db.Dbs.prepareStatement(var9_NewStatement);
				var8_NewStatement = com.altova.db.Dbs.newStatement(closure.var2_instance_ServiceLiveIntegrationDb__servicelive_integration_, 4, "SELECT `buyerNotificationId` FROM `buyer_notifications` WHERE ? = `transactionId`");
				com.altova.db.Dbs.addParameter(var8_NewStatement, java.sql.Types.BIGINT,-1);
				com.altova.db.Dbs.prepareStatement(var8_NewStatement);
				var7_NewStatement = com.altova.db.Dbs.newStatement(closure.var2_instance_ServiceLiveIntegrationDb__servicelive_integration_, 3, "SELECT `buyerNotificationId` FROM `buyer_notifications` WHERE ? = `transactionId`");
				com.altova.db.Dbs.addParameter(var7_NewStatement, java.sql.Types.BIGINT,-1);
				com.altova.db.Dbs.prepareStatement(var7_NewStatement);
				var6_NewStatement = com.altova.db.Dbs.newStatement(closure.var2_instance_ServiceLiveIntegrationDb__servicelive_integration_, 2, "SELECT `buyerNotificationId` FROM `buyer_notifications` WHERE ? = `transactionId`");
				com.altova.db.Dbs.addParameter(var6_NewStatement, java.sql.Types.BIGINT,-1);
				com.altova.db.Dbs.prepareStatement(var6_NewStatement);
				var5_NewStatement = com.altova.db.Dbs.newStatement(closure.var2_instance_ServiceLiveIntegrationDb__servicelive_integration_, 1, "SELECT `transactionId` FROM `transactions` WHERE (? = `batchId`) AND ((externalOrderNumber = ? and transactionTypeId = 6 and ? IN (2,10) AND transactionid = \r(\rSELECT t1.transactionid FROM transacti"
 + "ons t1\rINNER JOIN batches b1 ON b1.batchid = t1.batchid\rWHERE t1.externalOrderNumber = ? AND t1.transactionTypeId = 6 AND b1.integrationId in (2,10) \rORDER BY t1.createdOn DESC LIMIT 1)))");
				com.altova.db.Dbs.addParameter(var5_NewStatement, java.sql.Types.BIGINT,-1);
				com.altova.db.Dbs.addParameter(var5_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var5_NewStatement, java.sql.Types.SMALLINT,-1);
				com.altova.db.Dbs.addParameter(var5_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.prepareStatement(var5_NewStatement);
				var4_NewStatement = com.altova.db.Dbs.newStatement(closure.var2_instance_ServiceLiveIntegrationDb__servicelive_integration_, 0, "SELECT `batchId`, `integrationId` FROM `vw_batches`");
				com.altova.db.Dbs.prepareStatement(var4_NewStatement);
				current = new MFElement("batches", "", null, (new seq2_content_batches(closure.var3_param_integrationId, closure.var1_instance_NPSCloseAudit_AUD, closure.var2_instance_ServiceLiveIntegrationDb__servicelive_integration_)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq2_content_batches implements IEnumerable
	{
		long var1_integrationId;
		com.altova.mapforce.IMFNode var2_NPSCloseAudit_AUD;
		com.altova.db.Catalog var5_ServiceLiveIntegrationDb__servicelive_integration_;
	
		public seq2_content_batches(long var1_integrationId, com.altova.mapforce.IMFNode var2_NPSCloseAudit_AUD, com.altova.db.Catalog var5_ServiceLiveIntegrationDb__servicelive_integration_)
		{
			this.var1_integrationId = var1_integrationId;
			this.var2_NPSCloseAudit_AUD = var2_NPSCloseAudit_AUD;
			this.var5_ServiceLiveIntegrationDb__servicelive_integration_ = var5_ServiceLiveIntegrationDb__servicelive_integration_;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq2_content_batches closure;
			com.altova.mapforce.IEnumerable var4_select_InstallationServiceAudit;
			IEnumerator var3_map_select_AuditRecord;
			public Enumerator(seq2_content_batches closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var4_select_InstallationServiceAudit = new com.altova.functions.Core.SequenceCache((closure.var2_NPSCloseAudit_AUD).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "InstallationServiceAudit")));
				current = new MFAttribute("integrationId", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(closure.var1_integrationId)));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = new MFAttribute("fileName", "", null, com.altova.functions.Core.box(com.altova.functions.Core.documentURI(closure.var2_NPSCloseAudit_AUD)));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				current = new MFAttribute("statusId", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("1"))))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 8;				
				current = new MFAttribute("createdOn", "", null, com.altova.functions.Core.box(com.altova.functions.Lang.now()));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 13;				
				if (!(com.altova.functions.Core.exists(var4_select_InstallationServiceAudit))) {state = 0; return false; }
				var3_map_select_AuditRecord = (((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var4_select_InstallationServiceAudit)).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "AuditRecord"))).enumerator();
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 13;				
				if (!var3_map_select_AuditRecord.moveNext()) {state = 14; return false; }
				current = new MFElement("transactions", "", null, (new seq3_content_transactions(((com.altova.mapforce.IMFNode)(var3_map_select_AuditRecord.current())), closure.var5_ServiceLiveIntegrationDb__servicelive_integration_)));
				pos++;
				return true;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var3_map_select_AuditRecord.close(); var3_map_select_AuditRecord = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_map_select_AuditRecord.close(); var3_map_select_AuditRecord = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq3_content_transactions implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
		com.altova.db.Catalog var3_ServiceLiveIntegrationDb__servicelive_integration_;
	
		public seq3_content_transactions(com.altova.mapforce.IMFNode var1_bv, com.altova.db.Catalog var3_ServiceLiveIntegrationDb__servicelive_integration_)
		{
			this.var1_bv = var1_bv;
			this.var3_ServiceLiveIntegrationDb__servicelive_integration_ = var3_ServiceLiveIntegrationDb__servicelive_integration_;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq3_content_transactions closure;
			IEnumerator var2_map_SELECT__batchId____i;
			IEnumerator var4_map_SELECT__transactionI;
			public Enumerator(seq3_content_transactions closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				current = new MFAttribute("transactionTypeId", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("9"))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = new MFAttribute("externalOrderNumber", "", null, com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ServiceUnitNumber")))), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ServiceOrderNumber")))))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				current = new MFAttribute("createdOn", "", null, com.altova.functions.Core.box(com.altova.functions.Lang.now()));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 8;				
				current = new MFAttribute("statusId", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger((java.math.BigDecimal)com.altova.functions.Core.first((new seq4_if_equal(closure.var1_bv))))))));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 9;				
				var2_map_SELECT__batchId____i = ((new seq5__vw_batches_(closure.var3_ServiceLiveIntegrationDb__servicelive_integration_))).enumerator();
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 13;				
				if (!var2_map_SELECT__batchId____i.moveNext()) {state = 10; return false; }
				var4_map_SELECT__transactionI = ((new seq7__transactions_(closure.var3_ServiceLiveIntegrationDb__servicelive_integration_, ((com.altova.db.Record)(var2_map_SELECT__batchId____i.current())), closure.var1_bv))).enumerator();
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				var2_map_SELECT__batchId____i.close(); var2_map_SELECT__batchId____i = null;
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 13;				
				if (!var4_map_SELECT__transactionI.moveNext()) {state = 14; return false; }
				current = new MFElement("buyer_notification_responses", "", null, (new seq9_content_buyer_notification_responses(closure.var3_ServiceLiveIntegrationDb__servicelive_integration_, ((com.altova.db.Record)(var4_map_SELECT__transactionI.current())), closure.var1_bv)));
				pos++;
				return true;
			}
			private boolean moveNext_14() throws Exception {
				state = 9;				
				var4_map_SELECT__transactionI.close(); var4_map_SELECT__transactionI = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var4_map_SELECT__transactionI.close(); var4_map_SELECT__transactionI = null;
				var2_map_SELECT__batchId____i.close(); var2_map_SELECT__batchId____i = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq4_if_equal implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq4_if_equal(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq4_if_equal closure;
			public Enumerator(seq4_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ReturnCode")))), "00"))) {state = 11; return false; }
				current = new java.math.BigDecimal("1");
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = new java.math.BigDecimal("2");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq6_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_;
	
		public seq6_NewQuery(com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_)
		{
			this.var2_ServiceLiveIntegrationDb__servicelive_integration_ = var2_ServiceLiveIntegrationDb__servicelive_integration_;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq6_NewQuery closure;
			com.altova.db.Statement var1_NewQuery;
			public Enumerator(seq6_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var1_NewQuery = com.altova.db.Dbs.newQuery(closure.var2_ServiceLiveIntegrationDb__servicelive_integration_, 0);
				current = com.altova.db.Dbs.executeQuery(var1_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var1_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq5__vw_batches_ implements IEnumerable
	{
		com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_;
	
		public seq5__vw_batches_(com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_)
		{
			this.var1_ServiceLiveIntegrationDb__servicelive_integration_ = var1_ServiceLiveIntegrationDb__servicelive_integration_;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq5__vw_batches_ closure;
			com.altova.db.ResultSetWrapper var3_NewQuery;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq5__vw_batches_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var3_NewQuery = (com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq6_NewQuery(closure.var1_ServiceLiveIntegrationDb__servicelive_integration_)));
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!(com.altova.db.Dbs.moveNextRecord(var3_NewQuery))) {state = 0; return false; }
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_long(var2_NewRecord, var3_NewQuery, "batchId");
				com.altova.db.Dbs.read_short(var2_NewRecord, var3_NewQuery, "integrationId");
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeRecordset(var3_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq8_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_;
		com.altova.db.Record var3_bv;
		com.altova.mapforce.IMFNode var4_bv;
	
		public seq8_NewQuery(com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_, com.altova.db.Record var3_bv, com.altova.mapforce.IMFNode var4_bv)
		{
			this.var2_ServiceLiveIntegrationDb__servicelive_integration_ = var2_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var3_bv = var3_bv;
			this.var4_bv = var4_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq8_NewQuery closure;
			com.altova.db.Statement var1_NewQuery;
			java.lang.String var5_concat;
			public Enumerator(seq8_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var1_NewQuery = com.altova.db.Dbs.newQuery(closure.var2_ServiceLiveIntegrationDb__servicelive_integration_, 1);
				var5_concat = com.altova.functions.Core.concat(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var4_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ServiceUnitNumber")))), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var4_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ServiceOrderNumber")))));
				com.altova.db.Dbs.bindParameter_long(var1_NewQuery, (Long)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var3_bv, "batchId")));
				com.altova.db.Dbs.bindParameter_String(var1_NewQuery, var5_concat);
				com.altova.db.Dbs.bindParameter_int(var1_NewQuery, (Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var3_bv, "integrationId")));
				com.altova.db.Dbs.bindParameter_String(var1_NewQuery, var5_concat);
				current = com.altova.db.Dbs.executeQuery(var1_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var1_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq7__transactions_ implements IEnumerable
	{
		com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_;
		com.altova.db.Record var2_bv;
		com.altova.mapforce.IMFNode var3_bv;
	
		public seq7__transactions_(com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_, com.altova.db.Record var2_bv, com.altova.mapforce.IMFNode var3_bv)
		{
			this.var1_ServiceLiveIntegrationDb__servicelive_integration_ = var1_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var2_bv = var2_bv;
			this.var3_bv = var3_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq7__transactions_ closure;
			com.altova.db.ResultSetWrapper var5_NewQuery;
			com.altova.db.Record var4_NewRecord;
			public Enumerator(seq7__transactions_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var5_NewQuery = (com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq8_NewQuery(closure.var1_ServiceLiveIntegrationDb__servicelive_integration_, closure.var2_bv, closure.var3_bv)));
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!(com.altova.db.Dbs.moveNextRecord(var5_NewQuery))) {state = 0; return false; }
				var4_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_long(var4_NewRecord, var5_NewQuery, "transactionId");
				current = var4_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeRecordset(var5_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq9_content_buyer_notification_responses implements IEnumerable
	{
		com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_;
		com.altova.db.Record var2_bv;
		com.altova.mapforce.IMFNode var3_bv;
	
		public seq9_content_buyer_notification_responses(com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_, com.altova.db.Record var2_bv, com.altova.mapforce.IMFNode var3_bv)
		{
			this.var1_ServiceLiveIntegrationDb__servicelive_integration_ = var1_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var2_bv = var2_bv;
			this.var3_bv = var3_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq9_content_buyer_notification_responses closure;
			com.altova.mapforce.IMFNode var4_select_ReturnCode;
			IEnumerator var5_map_distinct_values;
			public Enumerator(seq9_content_buyer_notification_responses closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 6;				
				var4_select_ReturnCode = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var3_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ReturnCode")));
				if (!(com.altova.functions.Core.exists((new seq10__buyer_notifications_(closure.var1_ServiceLiveIntegrationDb__servicelive_integration_, closure.var2_bv))))) {state = 6; return false; }
				current = new MFAttribute("buyerNotificationId", "", null, com.altova.functions.Core.box((java.math.BigInteger)com.altova.functions.Core.first((new seq12_cond_last(closure.var1_ServiceLiveIntegrationDb__servicelive_integration_, closure.var2_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 12;				
				current = new MFAttribute("returnCode", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString(var4_select_ReturnCode)));
				pos++;
				return true;
			}
			private boolean moveNext_12() throws Exception {
				state = 13;				
				current = new MFAttribute("responseStatusSuccess", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.booleanToDecimal(com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString(var4_select_ReturnCode), "00")))))));
				pos++;
				return true;
			}
			private boolean moveNext_13() throws Exception {
				state = 14;				
				var5_map_distinct_values = (com.altova.functions.Core.distinctValues((new seq18_map_select_Message(closure.var3_bv)))).enumerator();
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 14;				
				if (!var5_map_distinct_values.moveNext()) {state = 15; return false; }
				current = new MFElement("oms_buyer_notification_response_messages", "", null, com.altova.functions.Core.box(new MFAttribute("message", "", null, com.altova.functions.Core.box(((java.lang.String)(var5_map_distinct_values.current()))))));
				pos++;
				return true;
			}
			private boolean moveNext_15() throws Exception {
				state = 0;				
				var5_map_distinct_values.close(); var5_map_distinct_values = null;
				current = new MFElement("oms_buyer_notification_responses", "", null, (new seq19_content_oms_buyer_notification_responses(closure.var3_bv, closure.var1_ServiceLiveIntegrationDb__servicelive_integration_, closure.var2_bv)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var5_map_distinct_values.close(); var5_map_distinct_values = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq11_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_;
		com.altova.db.Record var3_bv;
	
		public seq11_NewQuery(com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_, com.altova.db.Record var3_bv)
		{
			this.var2_ServiceLiveIntegrationDb__servicelive_integration_ = var2_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var3_bv = var3_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq11_NewQuery closure;
			com.altova.db.Statement var1_NewQuery;
			public Enumerator(seq11_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var1_NewQuery = com.altova.db.Dbs.newQuery(closure.var2_ServiceLiveIntegrationDb__servicelive_integration_, 2);
				com.altova.db.Dbs.bindParameter_long(var1_NewQuery, (Long)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var3_bv, "transactionId")));
				current = com.altova.db.Dbs.executeQuery(var1_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var1_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq10__buyer_notifications_ implements IEnumerable
	{
		com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_;
		com.altova.db.Record var2_bv;
	
		public seq10__buyer_notifications_(com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_, com.altova.db.Record var2_bv)
		{
			this.var1_ServiceLiveIntegrationDb__servicelive_integration_ = var1_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq10__buyer_notifications_ closure;
			com.altova.db.ResultSetWrapper var4_NewQuery;
			com.altova.db.Record var3_NewRecord;
			public Enumerator(seq10__buyer_notifications_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var4_NewQuery = (com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq11_NewQuery(closure.var1_ServiceLiveIntegrationDb__servicelive_integration_, closure.var2_bv)));
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!(com.altova.db.Dbs.moveNextRecord(var4_NewQuery))) {state = 0; return false; }
				var3_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_long_BuildBigInteger_MySQL(var3_NewRecord, var4_NewQuery, "buyerNotificationId");
				current = var3_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeRecordset(var4_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq12_cond_last implements IEnumerable
	{
		com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_;
		com.altova.db.Record var2_bv;
	
		public seq12_cond_last(com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_, com.altova.db.Record var2_bv)
		{
			this.var1_ServiceLiveIntegrationDb__servicelive_integration_ = var1_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq12_cond_last closure;
			public Enumerator(seq12_cond_last closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists((new seq13__buyer_notifications_(closure.var1_ServiceLiveIntegrationDb__servicelive_integration_, closure.var2_bv))))) {state = 0; return false; }
				current = (java.math.BigInteger)com.altova.functions.Core.last((new seq15_map_SELECT__buyerNotific(closure.var1_ServiceLiveIntegrationDb__servicelive_integration_, closure.var2_bv)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq14_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_;
		com.altova.db.Record var3_bv;
	
		public seq14_NewQuery(com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_, com.altova.db.Record var3_bv)
		{
			this.var2_ServiceLiveIntegrationDb__servicelive_integration_ = var2_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var3_bv = var3_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq14_NewQuery closure;
			com.altova.db.Statement var1_NewQuery;
			public Enumerator(seq14_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var1_NewQuery = com.altova.db.Dbs.newQuery(closure.var2_ServiceLiveIntegrationDb__servicelive_integration_, 3);
				com.altova.db.Dbs.bindParameter_long(var1_NewQuery, (Long)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var3_bv, "transactionId")));
				current = com.altova.db.Dbs.executeQuery(var1_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var1_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq13__buyer_notifications_ implements IEnumerable
	{
		com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_;
		com.altova.db.Record var2_bv;
	
		public seq13__buyer_notifications_(com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_, com.altova.db.Record var2_bv)
		{
			this.var1_ServiceLiveIntegrationDb__servicelive_integration_ = var1_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq13__buyer_notifications_ closure;
			com.altova.db.ResultSetWrapper var4_NewQuery;
			com.altova.db.Record var3_NewRecord;
			public Enumerator(seq13__buyer_notifications_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var4_NewQuery = (com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq14_NewQuery(closure.var1_ServiceLiveIntegrationDb__servicelive_integration_, closure.var2_bv)));
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!(com.altova.db.Dbs.moveNextRecord(var4_NewQuery))) {state = 0; return false; }
				var3_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_long_BuildBigInteger_MySQL(var3_NewRecord, var4_NewQuery, "buyerNotificationId");
				current = var3_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeRecordset(var4_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq15_map_SELECT__buyerNotific implements IEnumerable
	{
		com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_;
		com.altova.db.Record var3_bv;
	
		public seq15_map_SELECT__buyerNotific(com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_, com.altova.db.Record var3_bv)
		{
			this.var2_ServiceLiveIntegrationDb__servicelive_integration_ = var2_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var3_bv = var3_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq15_map_SELECT__buyerNotific closure;
			IEnumerator var1_map_SELECT__buyerNotific;
			IEnumerator var4_return;
			public Enumerator(seq15_map_SELECT__buyerNotific closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_SELECT__buyerNotific = ((new seq16__buyer_notifications_(closure.var2_ServiceLiveIntegrationDb__servicelive_integration_, closure.var3_bv))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 9;				
				if (!var1_map_SELECT__buyerNotific.moveNext()) {state = 6; return false; }
				var4_return = (com.altova.db.Dbs.readField(((com.altova.db.Record)(var1_map_SELECT__buyerNotific.current())), "buyerNotificationId")).enumerator();
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_SELECT__buyerNotific.close(); var1_map_SELECT__buyerNotific = null;
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 9;				
				if (!var4_return.moveNext()) {state = 10; return false; }
				current = var4_return.current();
				pos++;
				return true;
			}
			private boolean moveNext_10() throws Exception {
				state = 5;				
				var4_return.close(); var4_return = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var4_return.close(); var4_return = null;
				var1_map_SELECT__buyerNotific.close(); var1_map_SELECT__buyerNotific = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq17_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_;
		com.altova.db.Record var3_bv;
	
		public seq17_NewQuery(com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_, com.altova.db.Record var3_bv)
		{
			this.var2_ServiceLiveIntegrationDb__servicelive_integration_ = var2_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var3_bv = var3_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq17_NewQuery closure;
			com.altova.db.Statement var1_NewQuery;
			public Enumerator(seq17_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var1_NewQuery = com.altova.db.Dbs.newQuery(closure.var2_ServiceLiveIntegrationDb__servicelive_integration_, 4);
				com.altova.db.Dbs.bindParameter_long(var1_NewQuery, (Long)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var3_bv, "transactionId")));
				current = com.altova.db.Dbs.executeQuery(var1_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var1_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq16__buyer_notifications_ implements IEnumerable
	{
		com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_;
		com.altova.db.Record var2_bv;
	
		public seq16__buyer_notifications_(com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_, com.altova.db.Record var2_bv)
		{
			this.var1_ServiceLiveIntegrationDb__servicelive_integration_ = var1_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq16__buyer_notifications_ closure;
			com.altova.db.ResultSetWrapper var4_NewQuery;
			com.altova.db.Record var3_NewRecord;
			public Enumerator(seq16__buyer_notifications_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var4_NewQuery = (com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq17_NewQuery(closure.var1_ServiceLiveIntegrationDb__servicelive_integration_, closure.var2_bv)));
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!(com.altova.db.Dbs.moveNextRecord(var4_NewQuery))) {state = 0; return false; }
				var3_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_long_BuildBigInteger_MySQL(var3_NewRecord, var4_NewQuery, "buyerNotificationId");
				current = var3_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeRecordset(var4_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq18_map_select_Message implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq18_map_select_Message(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq18_map_select_Message closure;
			IEnumerator var1_map_select_Message;
			public Enumerator(seq18_map_select_Message closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_select_Message = (((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Messages")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Message"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_select_Message.moveNext()) {state = 6; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var1_map_select_Message.current())));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_select_Message.close(); var1_map_select_Message = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_select_Message.close(); var1_map_select_Message = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq19_content_oms_buyer_notification_responses implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
		com.altova.db.Catalog var3_ServiceLiveIntegrationDb__servicelive_integration_;
		com.altova.db.Record var4_bv;
	
		public seq19_content_oms_buyer_notification_responses(com.altova.mapforce.IMFNode var1_bv, com.altova.db.Catalog var3_ServiceLiveIntegrationDb__servicelive_integration_, com.altova.db.Record var4_bv)
		{
			this.var1_bv = var1_bv;
			this.var3_ServiceLiveIntegrationDb__servicelive_integration_ = var3_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var4_bv = var4_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq19_content_oms_buyer_notification_responses closure;
			com.altova.mapforce.IMFNode var2_select_SalesCheck;
			public Enumerator(seq19_content_oms_buyer_notification_responses closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var2_select_SalesCheck = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "SalesCheck")));
				current = new MFAttribute("processId", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Process"))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = new MFAttribute("salesCheckNumber", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_SalesCheck).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Number"))))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				current = new MFAttribute("salesCheckDate", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_SalesCheck).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Date"))))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 9;				
				if (!(com.altova.functions.Core.exists((new seq20_map_SELECT__relatedServi(closure.var3_ServiceLiveIntegrationDb__servicelive_integration_, closure.var4_bv))))) {state = 9; return false; }
				current = new MFAttribute("npsStatus", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq25_cond_last(closure.var3_ServiceLiveIntegrationDb__servicelive_integration_, closure.var4_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_9() throws Exception {
				state = 15;				
				current = new MFAttribute("serviceOrderNumber", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ServiceOrderNumber"))))));
				pos++;
				return true;
			}
			private boolean moveNext_15() throws Exception {
				state = 0;				
				current = new MFAttribute("serviceUnitNumber", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ServiceUnitNumber"))))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq20_map_SELECT__relatedServi implements IEnumerable
	{
		com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_;
		com.altova.db.Record var3_bv;
	
		public seq20_map_SELECT__relatedServi(com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_, com.altova.db.Record var3_bv)
		{
			this.var2_ServiceLiveIntegrationDb__servicelive_integration_ = var2_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var3_bv = var3_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq20_map_SELECT__relatedServi closure;
			IEnumerator var1_map_SELECT__relatedServi;
			IEnumerator var4_map_read_field;
			IEnumerator var5_map_SELECT__externalStat;
			IEnumerator var6_return;
			public Enumerator(seq20_map_SELECT__relatedServi closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_SELECT__relatedServi = ((new seq21__buyer_notifications_(closure.var2_ServiceLiveIntegrationDb__servicelive_integration_, closure.var3_bv))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 9;				
				if (!var1_map_SELECT__relatedServi.moveNext()) {state = 6; return false; }
				var4_map_read_field = (com.altova.db.Dbs.readField(((com.altova.db.Record)(var1_map_SELECT__relatedServi.current())), "relatedServiceOrderId")).enumerator();
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_SELECT__relatedServi.close(); var1_map_SELECT__relatedServi = null;
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 13;				
				if (!var4_map_read_field.moveNext()) {state = 10; return false; }
				var5_map_SELECT__externalStat = ((new seq23__serviceorders_(closure.var2_ServiceLiveIntegrationDb__servicelive_integration_, ((Long)(var4_map_read_field.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 5;				
				var4_map_read_field.close(); var4_map_read_field = null;
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 17;				
				if (!var5_map_SELECT__externalStat.moveNext()) {state = 14; return false; }
				var6_return = (com.altova.db.Dbs.readField(((com.altova.db.Record)(var5_map_SELECT__externalStat.current())), "externalStatus")).enumerator();
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 9;				
				var5_map_SELECT__externalStat.close(); var5_map_SELECT__externalStat = null;
				return false;
			}
			private boolean moveNext_17() throws Exception {
				state = 17;				
				if (!var6_return.moveNext()) {state = 18; return false; }
				current = var6_return.current();
				pos++;
				return true;
			}
			private boolean moveNext_18() throws Exception {
				state = 13;				
				var6_return.close(); var6_return = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var6_return.close(); var6_return = null;
				var5_map_SELECT__externalStat.close(); var5_map_SELECT__externalStat = null;
				var4_map_read_field.close(); var4_map_read_field = null;
				var1_map_SELECT__relatedServi.close(); var1_map_SELECT__relatedServi = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq22_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_;
		com.altova.db.Record var3_bv;
	
		public seq22_NewQuery(com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_, com.altova.db.Record var3_bv)
		{
			this.var2_ServiceLiveIntegrationDb__servicelive_integration_ = var2_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var3_bv = var3_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq22_NewQuery closure;
			com.altova.db.Statement var1_NewQuery;
			public Enumerator(seq22_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var1_NewQuery = com.altova.db.Dbs.newQuery(closure.var2_ServiceLiveIntegrationDb__servicelive_integration_, 5);
				com.altova.db.Dbs.bindParameter_long(var1_NewQuery, (Long)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var3_bv, "transactionId")));
				current = com.altova.db.Dbs.executeQuery(var1_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var1_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq21__buyer_notifications_ implements IEnumerable
	{
		com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_;
		com.altova.db.Record var2_bv;
	
		public seq21__buyer_notifications_(com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_, com.altova.db.Record var2_bv)
		{
			this.var1_ServiceLiveIntegrationDb__servicelive_integration_ = var1_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq21__buyer_notifications_ closure;
			com.altova.db.ResultSetWrapper var4_NewQuery;
			com.altova.db.Record var3_NewRecord;
			public Enumerator(seq21__buyer_notifications_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var4_NewQuery = (com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq22_NewQuery(closure.var1_ServiceLiveIntegrationDb__servicelive_integration_, closure.var2_bv)));
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!(com.altova.db.Dbs.moveNextRecord(var4_NewQuery))) {state = 0; return false; }
				var3_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_long(var3_NewRecord, var4_NewQuery, "relatedServiceOrderId");
				current = var3_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeRecordset(var4_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq24_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_;
		long var3_bv;
	
		public seq24_NewQuery(com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_, long var3_bv)
		{
			this.var2_ServiceLiveIntegrationDb__servicelive_integration_ = var2_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var3_bv = var3_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq24_NewQuery closure;
			com.altova.db.Statement var1_NewQuery;
			public Enumerator(seq24_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var1_NewQuery = com.altova.db.Dbs.newQuery(closure.var2_ServiceLiveIntegrationDb__servicelive_integration_, 6);
				com.altova.db.Dbs.bindParameter_long(var1_NewQuery, closure.var3_bv);
				current = com.altova.db.Dbs.executeQuery(var1_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var1_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq23__serviceorders_ implements IEnumerable
	{
		com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_;
		long var2_bv;
	
		public seq23__serviceorders_(com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_, long var2_bv)
		{
			this.var1_ServiceLiveIntegrationDb__servicelive_integration_ = var1_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq23__serviceorders_ closure;
			com.altova.db.ResultSetWrapper var4_NewQuery;
			com.altova.db.Record var3_NewRecord;
			public Enumerator(seq23__serviceorders_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var4_NewQuery = (com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq24_NewQuery(closure.var1_ServiceLiveIntegrationDb__servicelive_integration_, closure.var2_bv)));
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!(com.altova.db.Dbs.moveNextRecord(var4_NewQuery))) {state = 0; return false; }
				var3_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_String(var3_NewRecord, var4_NewQuery, "externalStatus");
				current = var3_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeRecordset(var4_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq25_cond_last implements IEnumerable
	{
		com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_;
		com.altova.db.Record var2_bv;
	
		public seq25_cond_last(com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_, com.altova.db.Record var2_bv)
		{
			this.var1_ServiceLiveIntegrationDb__servicelive_integration_ = var1_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq25_cond_last closure;
			com.altova.mapforce.IEnumerable var3_map_SELECT__relatedServi;
			public Enumerator(seq25_cond_last closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_map_SELECT__relatedServi = new com.altova.functions.Core.SequenceCache((new seq20_map_SELECT__relatedServi(closure.var1_ServiceLiveIntegrationDb__servicelive_integration_, closure.var2_bv)));
				if (!(com.altova.functions.Core.exists(var3_map_SELECT__relatedServi))) {state = 0; return false; }
				current = (java.lang.String)com.altova.functions.Core.last(var3_map_SELECT__relatedServi);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}


	private boolean runDoesCloseAll = true;		

	// instances
	protected org.w3c.dom.Node	varNPSCloseAudit_AUD2Instance;
	protected java.sql.Connection varServiceLiveIntegrationDb1Instance;
	protected long varintegrationId;
		com.altova.db.DbTreeOperations.TransactionHelper transactionHelper;

	public void run(String NPSCloseAudit_AUD2SourceFilename, java.sql.Connection ServiceLiveIntegrationDb1SourceConnection, long integrationId14SourceParameter, java.sql.Connection ServiceLiveIntegrationDb8TargetConnection) throws Exception {
		// open source streams
		writeTrace("Loading " + NPSCloseAudit_AUD2SourceFilename + "...\n");
		com.altova.io.FileInput NPSCloseAudit_AUD2Source = new com.altova.io.FileInput(NPSCloseAudit_AUD2SourceFilename);

		// run
		run(NPSCloseAudit_AUD2Source, ServiceLiveIntegrationDb1SourceConnection, integrationId14SourceParameter, ServiceLiveIntegrationDb8TargetConnection);

		// close source streams
		NPSCloseAudit_AUD2Source.close();
	}


	// main entry point

	public void run(com.altova.io.Input NPSCloseAudit_AUD2Source, java.sql.Connection ServiceLiveIntegrationDb1SourceConnection, long integrationId14SourceParameter, java.sql.Connection ServiceLiveIntegrationDb8TargetConnection) throws Exception {
		// Open the source(s)
		org.w3c.dom.Document doc_NPSCloseAudit_AUD2 = XmlTreeOperations.loadDocument(NPSCloseAudit_AUD2Source);
		varNPSCloseAudit_AUD2Instance = doc_NPSCloseAudit_AUD2;
		NPSCloseAudit_AUD2Source.close();
		writeTrace("Connecting to ServiceLiveIntegrationDb1 database...\n");
			
		varServiceLiveIntegrationDb1Instance = ServiceLiveIntegrationDb1SourceConnection;
		
			varintegrationId = integrationId14SourceParameter;


		// Create the target

		writeTrace("Connecting to ServiceLiveIntegrationDb8 database...\n");
		{

		// Execute mapping

		seq1_Main mapping = new seq1_Main(new com.altova.xml.DOMDocumentAsMFNodeAdapter(varNPSCloseAudit_AUD2Instance, NPSCloseAudit_AUD2Source.getFilename()), new com.altova.db.Catalog(varServiceLiveIntegrationDb1Instance), integrationId14SourceParameter);

		writeDB(mapping, ServiceLiveIntegrationDb8TargetConnection);
		// Close the target
		}

		writeTrace("Closing " + ServiceLiveIntegrationDb8TargetConnection + ".\n");
		ServiceLiveIntegrationDb8TargetConnection.close();
		// Close the source
		varServiceLiveIntegrationDb1Instance.close();

		
		if (runDoesCloseAll)
		{
			NPSCloseAudit_AUD2Source.close();
		}
	}



		static void writeDB(com.altova.mapforce.IEnumerable input, java.sql.Connection target) throws Exception
		{
			com.altova.db.DbTreeOperations.RecordBuffer buf = null;
			com.altova.db.DbTreeOperations.TransactionHelper transactionHelper = new com.altova.db.DbTreeOperations.TransactionHelper(
				target, "", "", "", "SAVEPOINT  %%TRANSACTION_NAME%% ", "ROLLBACK TO SAVEPOINT  %%TRANSACTION_NAME%% "
			);

			com.altova.db.DbTreeOperations.TransactionSentinel sentinel = new com.altova.db.DbTreeOperations.TransactionSentinel(transactionHelper, "");
			try
			{
				for (IEnumerator en = input.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("batches"))
						writeDB_batches4(buf, node, target, transactionHelper);				
				}
				sentinel.commit();
			}
			finally
			{
				sentinel.rollback();
			}
		}

			static void writeDB_batches4(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `batches` (`integrationId`,`fileName`,`statusId`,`createdOn`) VALUES (?,?,?,?)", false);
							command.addParameter(buf.getValue("integrationId"),java.sql.Types.JAVA_OBJECT,2,-1,-1); // Type: smallint 
							command.addParameter(buf.getValue("fileName"),java.sql.Types.JAVA_OBJECT,1024,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("statusId"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("createdOn"),java.sql.Types.JAVA_OBJECT,0,-1,-1); // Type: datetime 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `batchId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				for (IEnumerator en = children.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("transactions"))
						writeDB_transactions4(buf, node, target, transactionHelper);				
				}
				}
			}
			static void writeDB_transactions4(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("batchId", parent.getValue("batchId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `transactions` (`transactionTypeId`,`externalOrderNumber`,`createdOn`,`statusId`,`batchId`) VALUES (?,?,?,?,?)", false);
							command.addParameter(buf.getValue("transactionTypeId"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("externalOrderNumber"),java.sql.Types.JAVA_OBJECT,64,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("createdOn"),java.sql.Types.JAVA_OBJECT,0,-1,-1); // Type: datetime 
							command.addParameter(buf.getValue("statusId"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("batchId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `transactionId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				for (IEnumerator en = children.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("buyer_notification_responses"))
						writeDB_buyer_notification_responses(buf, node, target, transactionHelper);				
				}
				}
			}
			static void writeDB_buyer_notification_responses(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("transactionId", parent.getValue("transactionId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `buyer_notification_responses` (`buyerNotificationId`,`returnCode`,`responseStatusSuccess`,`transactionId`) VALUES (?,?,?,?)", false);
							command.addParameter(buf.getValue("buyerNotificationId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint unsigned 
							command.addParameter(buf.getValue("returnCode"),java.sql.Types.JAVA_OBJECT,20,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("responseStatusSuccess"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("transactionId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `buyerNotificationResponseId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				for (IEnumerator en = children.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("oms_buyer_notification_response_messages"))
						writeDB_oms_buyer_notification_response_messages(buf, node, target, transactionHelper);				
					if (node.getLocalName().equals("oms_buyer_notification_responses"))
						writeDB_oms_buyer_notification_responses(buf, node, target, transactionHelper);				
				}
				}
			}
			static void writeDB_oms_buyer_notification_response_messages(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("buyerNotificationResponseId", parent.getValue("buyerNotificationResponseId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `oms_buyer_notification_response_messages` (`message`,`buyerNotificationResponseId`) VALUES (?,?)", false);
							command.addParameter(buf.getValue("message"),java.sql.Types.JAVA_OBJECT,2000,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("buyerNotificationResponseId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `omsBuyerNotificationResponseMessageId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
			static void writeDB_oms_buyer_notification_responses(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("buyerNotificationResponseId", parent.getValue("buyerNotificationResponseId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `oms_buyer_notification_responses` (`processId`,`salesCheckNumber`,`salesCheckDate`,`npsStatus`,`serviceOrderNumber`,`serviceUnitNumber`,`buyerNotificationResponseId`) VALUES (?,?,?,?,?,?," +
"?)", false);
							command.addParameter(buf.getValue("processId"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("salesCheckNumber"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("salesCheckDate"),java.sql.Types.JAVA_OBJECT,200,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("npsStatus"),java.sql.Types.JAVA_OBJECT,10,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceOrderNumber"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceUnitNumber"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("buyerNotificationResponseId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `omsBuyerNotificationResponseId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}
	static IEnumerable throwUserException(String content)
	{
		throw new com.altova.UserException(content);
	}
}
