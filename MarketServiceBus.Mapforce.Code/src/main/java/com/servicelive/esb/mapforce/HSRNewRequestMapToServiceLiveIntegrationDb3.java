/**
 * HSRNewRequestMapToServiceLiveIntegrationDb3.java
 *
 * This file was generated by MapForce 2011sp1.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package com.servicelive.esb.mapforce;

import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import com.altova.db.*;
import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edi.*;
import java.util.*;

public class HSRNewRequestMapToServiceLiveIntegrationDb3 extends com.altova.TraceProvider 
{
	static class seq1_Main implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_instance_HSRNewRequest;
		com.altova.db.Catalog var2_instance_ServiceLiveIntegrationDb__servicelive_integration_;
		long var3_param_integrationId;
	
		public seq1_Main(com.altova.mapforce.IMFNode var1_instance_HSRNewRequest, com.altova.db.Catalog var2_instance_ServiceLiveIntegrationDb__servicelive_integration_, long var3_param_integrationId)
		{
			this.var1_instance_HSRNewRequest = var1_instance_HSRNewRequest;
			this.var2_instance_ServiceLiveIntegrationDb__servicelive_integration_ = var2_instance_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var3_param_integrationId = var3_param_integrationId;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_Main closure;
			com.altova.db.Statement var5_NewStatement;
			IEnumerator var4_map_select_Root;
			public Enumerator(seq1_Main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var5_NewStatement = com.altova.db.Dbs.newStatement(closure.var2_instance_ServiceLiveIntegrationDb__servicelive_integration_, 0, "SELECT `processingDelay`, `integrationId` FROM `integrations`");
				com.altova.db.Dbs.prepareStatement(var5_NewStatement);
				var4_map_select_Root = ((closure.var1_instance_HSRNewRequest).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Root"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var4_map_select_Root.moveNext()) {state = 6; return false; }
				current = new MFElement("batches", "", null, (new seq2_content_batches(closure.var3_param_integrationId, closure.var1_instance_HSRNewRequest, ((com.altova.mapforce.IMFNode)(var4_map_select_Root.current())), closure.var2_instance_ServiceLiveIntegrationDb__servicelive_integration_)));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var4_map_select_Root.close(); var4_map_select_Root = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var4_map_select_Root.close(); var4_map_select_Root = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq2_content_batches implements IEnumerable
	{
		long var1_integrationId;
		com.altova.mapforce.IMFNode var2_HSRNewRequest;
		com.altova.mapforce.IMFNode var4_bv;
		com.altova.db.Catalog var5_ServiceLiveIntegrationDb__servicelive_integration_;
	
		public seq2_content_batches(long var1_integrationId, com.altova.mapforce.IMFNode var2_HSRNewRequest, com.altova.mapforce.IMFNode var4_bv, com.altova.db.Catalog var5_ServiceLiveIntegrationDb__servicelive_integration_)
		{
			this.var1_integrationId = var1_integrationId;
			this.var2_HSRNewRequest = var2_HSRNewRequest;
			this.var4_bv = var4_bv;
			this.var5_ServiceLiveIntegrationDb__servicelive_integration_ = var5_ServiceLiveIntegrationDb__servicelive_integration_;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq2_content_batches closure;
			IEnumerator var3_map_select_CSV;
			public Enumerator(seq2_content_batches closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				current = new MFAttribute("integrationId", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(closure.var1_integrationId)));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = new MFAttribute("fileName", "", null, com.altova.functions.Core.box(com.altova.functions.Core.documentURI(closure.var2_HSRNewRequest)));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				current = new MFAttribute("statusId", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("1"))))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 8;				
				current = new MFAttribute("createdOn", "", null, com.altova.functions.Core.box(com.altova.functions.Lang.now()));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 9;				
				var3_map_select_CSV = ((closure.var4_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "CSV"))).enumerator();
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 9;				
				if (!var3_map_select_CSV.moveNext()) {state = 10; return false; }
				current = new MFElement("transactions", "", null, (new seq3_content_transactions(((com.altova.mapforce.IMFNode)(var3_map_select_CSV.current())), closure.var5_ServiceLiveIntegrationDb__servicelive_integration_, closure.var1_integrationId)));
				pos++;
				return true;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				var3_map_select_CSV.close(); var3_map_select_CSV = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_map_select_CSV.close(); var3_map_select_CSV = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq3_content_transactions implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
		com.altova.db.Catalog var5_ServiceLiveIntegrationDb__servicelive_integration_;
		long var6_integrationId;
	
		public seq3_content_transactions(com.altova.mapforce.IMFNode var1_bv, com.altova.db.Catalog var5_ServiceLiveIntegrationDb__servicelive_integration_, long var6_integrationId)
		{
			this.var1_bv = var1_bv;
			this.var5_ServiceLiveIntegrationDb__servicelive_integration_ = var5_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var6_integrationId = var6_integrationId;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq3_content_transactions closure;
			com.altova.mapforce.IEnumerable var2_select_Service_Unit_Num;
			com.altova.mapforce.IEnumerable var3_select_Service_Order_Num;
			IEnumerator var4_map_SELECT__processingDe;
			int var7_;
			public Enumerator(seq3_content_transactions closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 19:	if (moveNext_19()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 30:	if (moveNext_30()) return true; break;
					case 31:	if (moveNext_31()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var2_select_Service_Unit_Num = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Service Unit Num")));
				current = new MFAttribute("transactionTypeId", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("1"))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 7;				
				if (!(com.altova.functions.Core.exists(var2_select_Service_Unit_Num))) {state = 7; return false; }
				var3_select_Service_Order_Num = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Service Order Num")));
				if (!(com.altova.functions.Core.exists(var3_select_Service_Order_Num))) {state = 7; return false; }
				current = new MFAttribute("externalOrderNumber", "", null, com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Service_Unit_Num))), com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_Service_Order_Num))))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 19;				
				var4_map_SELECT__processingDe = ((new seq4__integrations_(closure.var5_ServiceLiveIntegrationDb__servicelive_integration_))).enumerator();
				return false;
			}
			private boolean moveNext_19() throws Exception {
				state = 19;				
				if (!var4_map_SELECT__processingDe.moveNext()) {state = 20; return false; }
				if (!(com.altova.functions.Core.equal(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(closure.var6_integrationId)), com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(((com.altova.db.Record)(var4_map_SELECT__processingDe.current())), "integrationId")))))))) {state = 19; return false; }
				var7_ = com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("0"))));
				current = new MFAttribute("processAfter", "", null, com.altova.functions.Core.box(com.altova.functions.Lang.datetimeAdd(com.altova.functions.Lang.now(), com.altova.functions.Lang.durationFromParts(var7_, var7_, var7_, var7_, com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.longToInteger((Long)com.altova.functions.Core.first(com.altova.db.Dbs.readField(((com.altova.db.Record)(var4_map_SELECT__processingDe.current())), "processingDelay"))))), 0, new java.math.BigDecimal("0"), com.altova.CoreTypes.parseBoolean("0")))));
				pos++;
				return true;
			}
			private boolean moveNext_20() throws Exception {
				state = 30;				
				var4_map_SELECT__processingDe.close(); var4_map_SELECT__processingDe = null;
				current = new MFAttribute("createdOn", "", null, com.altova.functions.Core.box(com.altova.functions.Lang.now()));
				pos++;
				return true;
			}
			private boolean moveNext_30() throws Exception {
				state = 31;				
				current = new MFAttribute("statusId", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("3"))))));
				pos++;
				return true;
			}
			private boolean moveNext_31() throws Exception {
				state = 0;				
				current = new MFElement("serviceorders", "", null, (new seq6_content_serviceorders(closure.var1_bv)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var4_map_SELECT__processingDe.close(); var4_map_SELECT__processingDe = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq5_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_;
	
		public seq5_NewQuery(com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_)
		{
			this.var2_ServiceLiveIntegrationDb__servicelive_integration_ = var2_ServiceLiveIntegrationDb__servicelive_integration_;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq5_NewQuery closure;
			com.altova.db.Statement var1_NewQuery;
			public Enumerator(seq5_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var1_NewQuery = com.altova.db.Dbs.newQuery(closure.var2_ServiceLiveIntegrationDb__servicelive_integration_, 0);
				current = com.altova.db.Dbs.executeQuery(var1_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var1_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq4__integrations_ implements IEnumerable
	{
		com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_;
	
		public seq4__integrations_(com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_)
		{
			this.var1_ServiceLiveIntegrationDb__servicelive_integration_ = var1_ServiceLiveIntegrationDb__servicelive_integration_;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq4__integrations_ closure;
			com.altova.db.ResultSetWrapper var3_NewQuery;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq4__integrations_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var3_NewQuery = (com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq5_NewQuery(closure.var1_ServiceLiveIntegrationDb__servicelive_integration_)));
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!(com.altova.db.Dbs.moveNextRecord(var3_NewQuery))) {state = 0; return false; }
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_long(var2_NewRecord, var3_NewQuery, "processingDelay");
				com.altova.db.Dbs.read_short(var2_NewRecord, var3_NewQuery, "integrationId");
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeRecordset(var3_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq6_content_serviceorders implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq6_content_serviceorders(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq6_content_serviceorders closure;
			com.altova.mapforce.IEnumerable var2_select_Merchandise_Code;
			com.altova.mapforce.IEnumerable var3_select_Merchandise_Description;
			public Enumerator(seq6_content_serviceorders closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 19:	if (moveNext_19()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 62:	if (moveNext_62()) return true; break;
					case 64:	if (moveNext_64()) return true; break;
					case 86:	if (moveNext_86()) return true; break;
					case 87:	if (moveNext_87()) return true; break;
					case 89:	if (moveNext_89()) return true; break;
					case 113:	if (moveNext_113()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 6;				
				var2_select_Merchandise_Code = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Merchandise Code")));
				if (!(com.altova.functions.Core.exists(var2_select_Merchandise_Code))) {state = 6; return false; }
				var3_select_Merchandise_Description = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Merchandise Description")));
				if (!(com.altova.functions.Core.exists(var3_select_Merchandise_Description))) {state = 6; return false; }
				current = new MFAttribute("title", "", null, com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Merchandise_Code))), "-"), com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_Merchandise_Description))))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 21;				
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order Taken Time"))))) {state = 19; return false; }
				return false;
			}
			private boolean moveNext_19() throws Exception {
				state = 64;				
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Special Instructions 1"))))) {state = 62; return false; }
				return false;
			}
			private boolean moveNext_21() throws Exception {
				state = 19;				
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order Taken Date"))))) {state = 19; return false; }
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Service Requested"))))) {state = 19; return false; }
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Protection Agreement Type"))))) {state = 19; return false; }
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Protection Agreement Latest Exp"))))) {state = 19; return false; }
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Protection Agreement Plan Type"))))) {state = 19; return false; }
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Original Delivery Date"))))) {state = 19; return false; }
				current = new MFAttribute("description", "", null, com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat((java.lang.String)com.altova.functions.Core.first((new seq7_if_empty(closure.var1_bv))), (java.lang.String)com.altova.functions.Core.first((new seq8_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq9_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq10_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq11_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq12_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq13_if_empty(closure.var1_bv))))));
				pos++;
				return true;
			}
			private boolean moveNext_62() throws Exception {
				state = 86;				
				current = new MFElement("contacts", "", null, (new seq18_content_contacts(closure.var1_bv)));
				pos++;
				return true;
			}
			private boolean moveNext_64() throws Exception {
				state = 62;				
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Special Instructions 2"))))) {state = 62; return false; }
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Permanent Instructions"))))) {state = 62; return false; }
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Repair Instructions"))))) {state = 62; return false; }
				current = new MFAttribute("providerInstructions", "", null, com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat((java.lang.String)com.altova.functions.Core.first((new seq14_if_empty(closure.var1_bv))), (java.lang.String)com.altova.functions.Core.first((new seq15_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq16_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq17_if_empty(closure.var1_bv))))));
				pos++;
				return true;
			}
			private boolean moveNext_86() throws Exception {
				state = 87;				
				current = new MFElement("customrefs_hsr", "", null, (new seq25_content_customrefs_hsr(closure.var1_bv)));
				pos++;
				return true;
			}
			private boolean moveNext_87() throws Exception {
				state = 89;				
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Business Address Ind"))))) {state = 89; return false; }
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Repair Address 1"))))) {state = 89; return false; }
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "City"))))) {state = 89; return false; }
				if (!(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Postal Code"))))) {state = 89; return false; }
				current = new MFElement("locations", "", null, (new seq26_content_locations(closure.var1_bv)));
				pos++;
				return true;
			}
			private boolean moveNext_89() throws Exception {
				state = 113;				
				current = new MFElement("parts", "", null, (new seq36_content_parts(closure.var1_bv)));
				pos++;
				return true;
			}
			private boolean moveNext_113() throws Exception {
				state = 0;				
				current = new MFElement("tasks", "", null, (new seq37_content_tasks(closure.var1_bv)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq7_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq7_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq7_if_empty closure;
			java.lang.String var2_normalize_space;
			public Enumerator(seq7_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order Taken Time")))));
				if (!(com.altova.functions.Lang.empty(var2_normalize_space))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat("Order Taken Time: ", var2_normalize_space), com.altova.functions.Core.charFromCode(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("10"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq8_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq8_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq8_if_empty closure;
			java.lang.String var2_normalize_space;
			public Enumerator(seq8_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order Taken Date")))));
				if (!(com.altova.functions.Lang.empty(var2_normalize_space))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat("Order Taken Date: ", var2_normalize_space), com.altova.functions.Core.charFromCode(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("10"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq9_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq9_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq9_if_empty closure;
			java.lang.String var2_normalize_space;
			public Enumerator(seq9_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Service Requested")))));
				if (!(com.altova.functions.Lang.empty(var2_normalize_space))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat("Service Requested: ", var2_normalize_space), com.altova.functions.Core.charFromCode(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("10"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq10_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq10_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq10_if_empty closure;
			java.lang.String var2_normalize_space;
			public Enumerator(seq10_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Protection Agreement Type")))));
				if (!(com.altova.functions.Lang.empty(var2_normalize_space))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat("Protection Agreement Type: ", var2_normalize_space), com.altova.functions.Core.charFromCode(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("10"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq11_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq11_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq11_if_empty closure;
			java.lang.String var2_normalize_space;
			public Enumerator(seq11_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Protection Agreement Latest Exp")))));
				if (!(com.altova.functions.Lang.empty(var2_normalize_space))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat("Protection Agreement Plan Type: ", var2_normalize_space), com.altova.functions.Core.charFromCode(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("10"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq12_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq12_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq12_if_empty closure;
			java.lang.String var2_normalize_space;
			public Enumerator(seq12_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Protection Agreement Plan Type")))));
				if (!(com.altova.functions.Lang.empty(var2_normalize_space))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat("Protection Agreement Expiration Date: ", var2_normalize_space), com.altova.functions.Core.charFromCode(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("10"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq13_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq13_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq13_if_empty closure;
			java.lang.String var2_normalize_space;
			public Enumerator(seq13_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Original Delivery Date")))));
				if (!(com.altova.functions.Lang.empty(var2_normalize_space))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat("Original Delivery Date: ", var2_normalize_space), com.altova.functions.Core.charFromCode(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("10"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq14_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq14_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq14_if_empty closure;
			java.lang.String var2_normalize_space;
			public Enumerator(seq14_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Special Instructions 1")))));
				if (!(com.altova.functions.Lang.empty(var2_normalize_space))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(var2_normalize_space, com.altova.functions.Core.charFromCode(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("10"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq15_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq15_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq15_if_empty closure;
			java.lang.String var2_normalize_space;
			public Enumerator(seq15_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Special Instructions 2")))));
				if (!(com.altova.functions.Lang.empty(var2_normalize_space))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(var2_normalize_space, com.altova.functions.Core.charFromCode(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("10"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq16_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq16_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq16_if_empty closure;
			java.lang.String var2_normalize_space;
			public Enumerator(seq16_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Permanent Instructions")))));
				if (!(com.altova.functions.Lang.empty(var2_normalize_space))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(var2_normalize_space, com.altova.functions.Core.charFromCode(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("10"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq17_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq17_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq17_if_empty closure;
			java.lang.String var2_normalize_space;
			public Enumerator(seq17_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Repair Instructions")))));
				if (!(com.altova.functions.Lang.empty(var2_normalize_space))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(var2_normalize_space, com.altova.functions.Core.charFromCode(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("10"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq18_content_contacts implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq18_content_contacts(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq18_content_contacts closure;
			com.altova.mapforce.IEnumerable var5_select_Customer_Alt_Phone;
			com.altova.mapforce.IEnumerable var4_select_Customer_Phone;
			com.altova.mapforce.IEnumerable var3_select_Customer_First_Name;
			com.altova.mapforce.IEnumerable var2_select_Customer_Last_Name;
			public Enumerator(seq18_content_contacts closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 28:	if (moveNext_28()) return true; break;
					case 35:	if (moveNext_35()) return true; break;
					case 41:	if (moveNext_41()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 6;				
				var5_select_Customer_Alt_Phone = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer Alt Phone")));
				var4_select_Customer_Phone = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer Phone")));
				var3_select_Customer_First_Name = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer First Name")));
				var2_select_Customer_Last_Name = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer Last Name")));
				if (!(com.altova.functions.Core.exists(var2_select_Customer_Last_Name))) {state = 6; return false; }
				current = new MFAttribute("lastName", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Customer_Last_Name)))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 15;				
				if (!(com.altova.functions.Core.exists(var3_select_Customer_First_Name))) {state = 13; return false; }
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 22;				
				if (!(com.altova.functions.Core.exists(var4_select_Customer_Phone))) {state = 20; return false; }
				return false;
			}
			private boolean moveNext_15() throws Exception {
				state = 13;				
				current = new MFAttribute("firstName", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_Customer_First_Name)))));
				pos++;
				return true;
			}
			private boolean moveNext_20() throws Exception {
				state = 35;				
				if (!(com.altova.functions.Core.exists(var5_select_Customer_Alt_Phone))) {state = 0; return false; }
				return false;
			}
			private boolean moveNext_22() throws Exception {
				state = 20;				
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var4_select_Customer_Phone)))))) {state = 28; return false; }
				return false;
			}
			private boolean moveNext_28() throws Exception {
				state = 20;				
				current = new MFElement("phones", "", null, (new seq19_content_phones(closure.var1_bv)));
				pos++;
				return true;
			}
			private boolean moveNext_35() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var5_select_Customer_Alt_Phone)))))) {state = 41; return false; }
				return false;
			}
			private boolean moveNext_41() throws Exception {
				state = 0;				
				current = new MFElement("phones (2)", "", null, (new seq21_content_phones__2_(closure.var1_bv)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq19_content_phones implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq19_content_phones(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq19_content_phones closure;
			public Enumerator(seq19_content_phones closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				current = new MFAttribute("phoneNumber", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq20_cond_normalize_space(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = new MFAttribute("phoneType", "", null, com.altova.functions.Core.box("HOME"));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				current = new MFAttribute("primary", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.booleanToDecimal(com.altova.CoreTypes.parseBoolean("true")))))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq20_cond_normalize_space implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq20_cond_normalize_space(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq20_cond_normalize_space closure;
			java.lang.String var2_normalize_space;
			public Enumerator(seq20_cond_normalize_space closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer Phone")))));
				if (!(com.altova.functions.Lang.empty(var2_normalize_space))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				current = var2_normalize_space;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq21_content_phones__2_ implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq21_content_phones__2_(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq21_content_phones__2_ closure;
			com.altova.mapforce.IEnumerable var2_select_Customer_Phone;
			boolean var3_exists;
			public Enumerator(seq21_content_phones__2_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 28:	if (moveNext_28()) return true; break;
					case 34:	if (moveNext_34()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var2_select_Customer_Phone = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer Phone")));
				var3_exists = com.altova.functions.Core.exists(var2_select_Customer_Phone);
				current = new MFAttribute("phoneNumber", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq22_cond_normalize_space(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 7;				
				if (!(var3_exists)) {state = 7; return false; }
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Customer_Phone)))))) {state = 15; return false; }
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 28;				
				if (!(var3_exists)) {state = 0; return false; }
				return false;
			}
			private boolean moveNext_15() throws Exception {
				state = 7;				
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer Alt Phone")))))))) {state = 21; return false; }
				return false;
			}
			private boolean moveNext_21() throws Exception {
				state = 7;				
				current = new MFAttribute("phoneType", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq23_cond_const_WORK(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_28() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer Alt Phone")))))))) {state = 34; return false; }
				return false;
			}
			private boolean moveNext_34() throws Exception {
				state = 0;				
				current = new MFAttribute("primary", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.booleanToDecimal((Boolean)com.altova.functions.Core.first((new seq24_if_empty(closure.var1_bv)))))))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq22_cond_normalize_space implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq22_cond_normalize_space(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq22_cond_normalize_space closure;
			java.lang.String var2_normalize_space;
			public Enumerator(seq22_cond_normalize_space closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer Alt Phone")))));
				if (!(com.altova.functions.Lang.empty(var2_normalize_space))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				current = var2_normalize_space;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq23_cond_const_WORK implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq23_cond_const_WORK(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq23_cond_const_WORK closure;
			public Enumerator(seq23_cond_const_WORK closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer Phone")))))))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				current = "WORK";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq24_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq24_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq24_if_empty closure;
			public Enumerator(seq24_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer Phone")))))))) {state = 11; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq25_content_customrefs_hsr implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq25_content_customrefs_hsr(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq25_content_customrefs_hsr closure;
			com.altova.mapforce.IEnumerable var48_select_Service_Order_Creation_Unit_Num;
			com.altova.mapforce.IEnumerable var47_select_Solicit_PA_Indicator;
			com.altova.mapforce.IEnumerable var46_select_Employee_Num_who_Created_SO;
			com.altova.mapforce.IEnumerable var45_select_Labor_Warranty;
			com.altova.mapforce.IEnumerable var44_select_Exception_Part_Warranty_Exp2;
			com.altova.mapforce.IEnumerable var43_select_Labor_Warranty_Exp;
			com.altova.mapforce.IEnumerable var42_select_Part_Warranty_Exp;
			com.altova.mapforce.IEnumerable var41_select_Residential_or_Commercial_Usage;
			com.altova.mapforce.IEnumerable var40_select_System_Item_Suffix;
			com.altova.mapforce.IEnumerable var39_select_Sears_Sold_Code;
			com.altova.mapforce.IEnumerable var38_select_PA_Agreement_Num;
			com.altova.mapforce.IEnumerable var37_select_Exception_Part_Warranty_Exp;
			com.altova.mapforce.IEnumerable var36_select_Last_Modified_by_Employee_ID;
			com.altova.mapforce.IEnumerable var35_select_Service_Location_Code;
			com.altova.mapforce.IEnumerable var34_select_Service_Order_Status_Code;
			com.altova.mapforce.IEnumerable var33_select_Customer_Charge_Account_Exp;
			com.altova.mapforce.IEnumerable var32_select_Customer_Charge_Account_Num;
			com.altova.mapforce.IEnumerable var31_select_Customer_Preferred_Language;
			com.altova.mapforce.IEnumerable var30_select_Customer_Type;
			com.altova.mapforce.IEnumerable var29_select_Original_Time_To;
			com.altova.mapforce.IEnumerable var28_select_Original_Time_From;
			com.altova.mapforce.IEnumerable var27_select_Original_Scheduled_Date;
			com.altova.mapforce.IEnumerable var26_select_Promised_Time_To;
			com.altova.mapforce.IEnumerable var25_select_Promised_Time_From;
			com.altova.mapforce.IEnumerable var24_select_Promised_Date;
			com.altova.mapforce.IEnumerable var23_select_Repair_Tag_Bar_Code;
			com.altova.mapforce.IEnumerable var22_select_Authorization_Num;
			com.altova.mapforce.IEnumerable var21_select_Contract_Exp;
			com.altova.mapforce.IEnumerable var20_select_Contract_Num;
			com.altova.mapforce.IEnumerable var19_select_Proc_ID;
			com.altova.mapforce.IEnumerable var18_select_Promotion_Ind;
			com.altova.mapforce.IEnumerable var17_select_Sears_Store_Num;
			com.altova.mapforce.IEnumerable var16_select_Serial_Number;
			com.altova.mapforce.IEnumerable var15_select_Model;
			com.altova.mapforce.IEnumerable var14_select_Brand;
			com.altova.mapforce.IEnumerable var13_select_Purchase_Date;
			com.altova.mapforce.IEnumerable var12_select_Merchandise_Code;
			com.altova.mapforce.IEnumerable var11_select_Division;
			com.altova.mapforce.IEnumerable var10_select_Coverage_Type_Parts;
			com.altova.mapforce.IEnumerable var9_select_Coverage_Type_Labor;
			com.altova.mapforce.IEnumerable var8_select_Priority_Indicator;
			com.altova.mapforce.IEnumerable var7_select_Payment_Method_Ind;
			com.altova.mapforce.IEnumerable var6_select_Customer_Number;
			com.altova.mapforce.IEnumerable var3_select_Service_Order_Num;
			boolean var5_exists;
			com.altova.mapforce.IEnumerable var2_select_Service_Unit_Num;
			boolean var4_exists;
			public Enumerator(seq25_content_customrefs_hsr closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 33:	if (moveNext_33()) return true; break;
					case 35:	if (moveNext_35()) return true; break;
					case 40:	if (moveNext_40()) return true; break;
					case 42:	if (moveNext_42()) return true; break;
					case 47:	if (moveNext_47()) return true; break;
					case 49:	if (moveNext_49()) return true; break;
					case 54:	if (moveNext_54()) return true; break;
					case 56:	if (moveNext_56()) return true; break;
					case 61:	if (moveNext_61()) return true; break;
					case 63:	if (moveNext_63()) return true; break;
					case 68:	if (moveNext_68()) return true; break;
					case 70:	if (moveNext_70()) return true; break;
					case 75:	if (moveNext_75()) return true; break;
					case 77:	if (moveNext_77()) return true; break;
					case 82:	if (moveNext_82()) return true; break;
					case 84:	if (moveNext_84()) return true; break;
					case 89:	if (moveNext_89()) return true; break;
					case 91:	if (moveNext_91()) return true; break;
					case 96:	if (moveNext_96()) return true; break;
					case 98:	if (moveNext_98()) return true; break;
					case 103:	if (moveNext_103()) return true; break;
					case 105:	if (moveNext_105()) return true; break;
					case 110:	if (moveNext_110()) return true; break;
					case 112:	if (moveNext_112()) return true; break;
					case 117:	if (moveNext_117()) return true; break;
					case 119:	if (moveNext_119()) return true; break;
					case 124:	if (moveNext_124()) return true; break;
					case 126:	if (moveNext_126()) return true; break;
					case 131:	if (moveNext_131()) return true; break;
					case 133:	if (moveNext_133()) return true; break;
					case 138:	if (moveNext_138()) return true; break;
					case 140:	if (moveNext_140()) return true; break;
					case 145:	if (moveNext_145()) return true; break;
					case 147:	if (moveNext_147()) return true; break;
					case 152:	if (moveNext_152()) return true; break;
					case 154:	if (moveNext_154()) return true; break;
					case 159:	if (moveNext_159()) return true; break;
					case 161:	if (moveNext_161()) return true; break;
					case 166:	if (moveNext_166()) return true; break;
					case 168:	if (moveNext_168()) return true; break;
					case 173:	if (moveNext_173()) return true; break;
					case 175:	if (moveNext_175()) return true; break;
					case 180:	if (moveNext_180()) return true; break;
					case 182:	if (moveNext_182()) return true; break;
					case 187:	if (moveNext_187()) return true; break;
					case 189:	if (moveNext_189()) return true; break;
					case 194:	if (moveNext_194()) return true; break;
					case 196:	if (moveNext_196()) return true; break;
					case 201:	if (moveNext_201()) return true; break;
					case 203:	if (moveNext_203()) return true; break;
					case 208:	if (moveNext_208()) return true; break;
					case 210:	if (moveNext_210()) return true; break;
					case 215:	if (moveNext_215()) return true; break;
					case 217:	if (moveNext_217()) return true; break;
					case 222:	if (moveNext_222()) return true; break;
					case 224:	if (moveNext_224()) return true; break;
					case 229:	if (moveNext_229()) return true; break;
					case 231:	if (moveNext_231()) return true; break;
					case 236:	if (moveNext_236()) return true; break;
					case 238:	if (moveNext_238()) return true; break;
					case 243:	if (moveNext_243()) return true; break;
					case 245:	if (moveNext_245()) return true; break;
					case 250:	if (moveNext_250()) return true; break;
					case 252:	if (moveNext_252()) return true; break;
					case 257:	if (moveNext_257()) return true; break;
					case 259:	if (moveNext_259()) return true; break;
					case 264:	if (moveNext_264()) return true; break;
					case 266:	if (moveNext_266()) return true; break;
					case 271:	if (moveNext_271()) return true; break;
					case 273:	if (moveNext_273()) return true; break;
					case 278:	if (moveNext_278()) return true; break;
					case 280:	if (moveNext_280()) return true; break;
					case 285:	if (moveNext_285()) return true; break;
					case 287:	if (moveNext_287()) return true; break;
					case 292:	if (moveNext_292()) return true; break;
					case 294:	if (moveNext_294()) return true; break;
					case 299:	if (moveNext_299()) return true; break;
					case 301:	if (moveNext_301()) return true; break;
					case 306:	if (moveNext_306()) return true; break;
					case 308:	if (moveNext_308()) return true; break;
					case 313:	if (moveNext_313()) return true; break;
					case 315:	if (moveNext_315()) return true; break;
					case 320:	if (moveNext_320()) return true; break;
					case 322:	if (moveNext_322()) return true; break;
					case 327:	if (moveNext_327()) return true; break;
					case 329:	if (moveNext_329()) return true; break;
					case 336:	if (moveNext_336()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 6;				
				var48_select_Service_Order_Creation_Unit_Num = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Service Order Creation Unit Num")));
				var47_select_Solicit_PA_Indicator = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Solicit PA Indicator")));
				var46_select_Employee_Num_who_Created_SO = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Employee Num who Created SO")));
				var45_select_Labor_Warranty = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Labor Warranty")));
				var44_select_Exception_Part_Warranty_Exp2 = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Exception Part Warranty Exp2")));
				var43_select_Labor_Warranty_Exp = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Labor Warranty Exp")));
				var42_select_Part_Warranty_Exp = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Part Warranty Exp")));
				var41_select_Residential_or_Commercial_Usage = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Residential or Commercial Usage")));
				var40_select_System_Item_Suffix = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "System Item Suffix")));
				var39_select_Sears_Sold_Code = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Sears Sold Code")));
				var38_select_PA_Agreement_Num = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PA Agreement Num")));
				var37_select_Exception_Part_Warranty_Exp = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Exception Part Warranty Exp")));
				var36_select_Last_Modified_by_Employee_ID = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Last Modified by Employee ID")));
				var35_select_Service_Location_Code = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Service Location Code")));
				var34_select_Service_Order_Status_Code = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Service Order Status Code")));
				var33_select_Customer_Charge_Account_Exp = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer Charge Account Exp")));
				var32_select_Customer_Charge_Account_Num = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer Charge Account Num")));
				var31_select_Customer_Preferred_Language = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer Preferred Language")));
				var30_select_Customer_Type = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer Type")));
				var29_select_Original_Time_To = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Original Time To")));
				var28_select_Original_Time_From = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Original Time From")));
				var27_select_Original_Scheduled_Date = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Original Scheduled Date")));
				var26_select_Promised_Time_To = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Promised Time To")));
				var25_select_Promised_Time_From = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Promised Time From")));
				var24_select_Promised_Date = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Promised Date")));
				var23_select_Repair_Tag_Bar_Code = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Repair Tag Bar Code")));
				var22_select_Authorization_Num = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Authorization Num")));
				var21_select_Contract_Exp = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Contract Exp")));
				var20_select_Contract_Num = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Contract Num")));
				var19_select_Proc_ID = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Proc ID")));
				var18_select_Promotion_Ind = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Promotion Ind")));
				var17_select_Sears_Store_Num = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Sears Store Num")));
				var16_select_Serial_Number = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Serial Number")));
				var15_select_Model = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Model")));
				var14_select_Brand = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Brand")));
				var13_select_Purchase_Date = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Purchase Date")));
				var12_select_Merchandise_Code = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Merchandise Code")));
				var11_select_Division = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Division")));
				var10_select_Coverage_Type_Parts = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Coverage Type Parts")));
				var9_select_Coverage_Type_Labor = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Coverage Type Labor")));
				var8_select_Priority_Indicator = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Priority Indicator")));
				var7_select_Payment_Method_Ind = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Payment Method Ind")));
				var6_select_Customer_Number = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer Number")));
				var3_select_Service_Order_Num = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Service Order Num")));
				var5_exists = com.altova.functions.Core.exists(var3_select_Service_Order_Num);
				var2_select_Service_Unit_Num = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Service Unit Num")));
				var4_exists = com.altova.functions.Core.exists(var2_select_Service_Unit_Num);
				if (!(var4_exists)) {state = 6; return false; }
				current = new MFAttribute("unitNumber", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Service_Unit_Num)))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 15;				
				if (!(var5_exists)) {state = 13; return false; }
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 22;				
				if (!(var4_exists)) {state = 20; return false; }
				return false;
			}
			private boolean moveNext_15() throws Exception {
				state = 13;				
				current = new MFAttribute("orderNumber", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_Service_Order_Num))));
				pos++;
				return true;
			}
			private boolean moveNext_20() throws Exception {
				state = 35;				
				if (!(com.altova.functions.Core.exists(var6_select_Customer_Number))) {state = 33; return false; }
				return false;
			}
			private boolean moveNext_22() throws Exception {
				state = 20;				
				if (!(var5_exists)) {state = 20; return false; }
				current = new MFAttribute("orderIdstring", "", null, com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Service_Unit_Num))), com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_Service_Order_Num))))));
				pos++;
				return true;
			}
			private boolean moveNext_33() throws Exception {
				state = 42;				
				if (!(com.altova.functions.Core.exists(var7_select_Payment_Method_Ind))) {state = 40; return false; }
				return false;
			}
			private boolean moveNext_35() throws Exception {
				state = 33;				
				current = new MFAttribute("customerNumber", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var6_select_Customer_Number)))));
				pos++;
				return true;
			}
			private boolean moveNext_40() throws Exception {
				state = 49;				
				if (!(com.altova.functions.Core.exists(var8_select_Priority_Indicator))) {state = 47; return false; }
				return false;
			}
			private boolean moveNext_42() throws Exception {
				state = 40;				
				current = new MFAttribute("paymentMethod", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var7_select_Payment_Method_Ind)))));
				pos++;
				return true;
			}
			private boolean moveNext_47() throws Exception {
				state = 56;				
				if (!(com.altova.functions.Core.exists(var9_select_Coverage_Type_Labor))) {state = 54; return false; }
				return false;
			}
			private boolean moveNext_49() throws Exception {
				state = 47;				
				current = new MFAttribute("priorityIndicator", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var8_select_Priority_Indicator)))));
				pos++;
				return true;
			}
			private boolean moveNext_54() throws Exception {
				state = 63;				
				if (!(com.altova.functions.Core.exists(var10_select_Coverage_Type_Parts))) {state = 61; return false; }
				return false;
			}
			private boolean moveNext_56() throws Exception {
				state = 54;				
				current = new MFAttribute("coverageTypeLabor", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var9_select_Coverage_Type_Labor)))));
				pos++;
				return true;
			}
			private boolean moveNext_61() throws Exception {
				state = 70;				
				if (!(com.altova.functions.Core.exists(var11_select_Division))) {state = 68; return false; }
				return false;
			}
			private boolean moveNext_63() throws Exception {
				state = 61;				
				current = new MFAttribute("coverageTypeParts", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var10_select_Coverage_Type_Parts)))));
				pos++;
				return true;
			}
			private boolean moveNext_68() throws Exception {
				state = 77;				
				if (!(com.altova.functions.Core.exists(var12_select_Merchandise_Code))) {state = 75; return false; }
				return false;
			}
			private boolean moveNext_70() throws Exception {
				state = 68;				
				current = new MFAttribute("division", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var11_select_Division)))));
				pos++;
				return true;
			}
			private boolean moveNext_75() throws Exception {
				state = 84;				
				if (!(com.altova.functions.Core.exists(var13_select_Purchase_Date))) {state = 82; return false; }
				return false;
			}
			private boolean moveNext_77() throws Exception {
				state = 75;				
				current = new MFAttribute("merchandiseCode", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var12_select_Merchandise_Code)))));
				pos++;
				return true;
			}
			private boolean moveNext_82() throws Exception {
				state = 91;				
				if (!(com.altova.functions.Core.exists(var14_select_Brand))) {state = 89; return false; }
				return false;
			}
			private boolean moveNext_84() throws Exception {
				state = 82;				
				current = new MFAttribute("purchaseDate", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var13_select_Purchase_Date)))));
				pos++;
				return true;
			}
			private boolean moveNext_89() throws Exception {
				state = 98;				
				if (!(com.altova.functions.Core.exists(var15_select_Model))) {state = 96; return false; }
				return false;
			}
			private boolean moveNext_91() throws Exception {
				state = 89;				
				current = new MFAttribute("brand", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var14_select_Brand)))));
				pos++;
				return true;
			}
			private boolean moveNext_96() throws Exception {
				state = 105;				
				if (!(com.altova.functions.Core.exists(var16_select_Serial_Number))) {state = 103; return false; }
				return false;
			}
			private boolean moveNext_98() throws Exception {
				state = 96;				
				current = new MFAttribute("model", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var15_select_Model)))));
				pos++;
				return true;
			}
			private boolean moveNext_103() throws Exception {
				state = 112;				
				if (!(com.altova.functions.Core.exists(var17_select_Sears_Store_Num))) {state = 110; return false; }
				return false;
			}
			private boolean moveNext_105() throws Exception {
				state = 103;				
				current = new MFAttribute("serialNumber", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var16_select_Serial_Number)))));
				pos++;
				return true;
			}
			private boolean moveNext_110() throws Exception {
				state = 119;				
				if (!(com.altova.functions.Core.exists(var18_select_Promotion_Ind))) {state = 117; return false; }
				return false;
			}
			private boolean moveNext_112() throws Exception {
				state = 110;				
				current = new MFAttribute("searsStoreNumber", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var17_select_Sears_Store_Num)))));
				pos++;
				return true;
			}
			private boolean moveNext_117() throws Exception {
				state = 126;				
				if (!(com.altova.functions.Core.exists(var19_select_Proc_ID))) {state = 124; return false; }
				return false;
			}
			private boolean moveNext_119() throws Exception {
				state = 117;				
				current = new MFAttribute("promotionIndicator", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var18_select_Promotion_Ind)))));
				pos++;
				return true;
			}
			private boolean moveNext_124() throws Exception {
				state = 133;				
				if (!(com.altova.functions.Core.exists(var20_select_Contract_Num))) {state = 131; return false; }
				return false;
			}
			private boolean moveNext_126() throws Exception {
				state = 124;				
				current = new MFAttribute("procId", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var19_select_Proc_ID)))));
				pos++;
				return true;
			}
			private boolean moveNext_131() throws Exception {
				state = 140;				
				if (!(com.altova.functions.Core.exists(var21_select_Contract_Exp))) {state = 138; return false; }
				return false;
			}
			private boolean moveNext_133() throws Exception {
				state = 131;				
				current = new MFAttribute("contractNumber", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var20_select_Contract_Num)))));
				pos++;
				return true;
			}
			private boolean moveNext_138() throws Exception {
				state = 147;				
				if (!(com.altova.functions.Core.exists(var22_select_Authorization_Num))) {state = 145; return false; }
				return false;
			}
			private boolean moveNext_140() throws Exception {
				state = 138;				
				current = new MFAttribute("contractExpDate", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var21_select_Contract_Exp)))));
				pos++;
				return true;
			}
			private boolean moveNext_145() throws Exception {
				state = 154;				
				if (!(com.altova.functions.Core.exists(var23_select_Repair_Tag_Bar_Code))) {state = 152; return false; }
				return false;
			}
			private boolean moveNext_147() throws Exception {
				state = 145;				
				current = new MFAttribute("authorizationNumber", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var22_select_Authorization_Num)))));
				pos++;
				return true;
			}
			private boolean moveNext_152() throws Exception {
				state = 161;				
				if (!(com.altova.functions.Core.exists(var24_select_Promised_Date))) {state = 159; return false; }
				return false;
			}
			private boolean moveNext_154() throws Exception {
				state = 152;				
				current = new MFAttribute("repairTagBarCodeNum", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var23_select_Repair_Tag_Bar_Code)))));
				pos++;
				return true;
			}
			private boolean moveNext_159() throws Exception {
				state = 168;				
				if (!(com.altova.functions.Core.exists(var25_select_Promised_Time_From))) {state = 166; return false; }
				return false;
			}
			private boolean moveNext_161() throws Exception {
				state = 159;				
				current = new MFAttribute("promisedDate", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var24_select_Promised_Date)))));
				pos++;
				return true;
			}
			private boolean moveNext_166() throws Exception {
				state = 175;				
				if (!(com.altova.functions.Core.exists(var26_select_Promised_Time_To))) {state = 173; return false; }
				return false;
			}
			private boolean moveNext_168() throws Exception {
				state = 166;				
				current = new MFAttribute("promisedTimeFrom", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var25_select_Promised_Time_From)))));
				pos++;
				return true;
			}
			private boolean moveNext_173() throws Exception {
				state = 182;				
				if (!(com.altova.functions.Core.exists(var27_select_Original_Scheduled_Date))) {state = 180; return false; }
				return false;
			}
			private boolean moveNext_175() throws Exception {
				state = 173;				
				current = new MFAttribute("promisedTimeTo", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var26_select_Promised_Time_To)))));
				pos++;
				return true;
			}
			private boolean moveNext_180() throws Exception {
				state = 189;				
				if (!(com.altova.functions.Core.exists(var28_select_Original_Time_From))) {state = 187; return false; }
				return false;
			}
			private boolean moveNext_182() throws Exception {
				state = 180;				
				current = new MFAttribute("originalScheduledDate", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var27_select_Original_Scheduled_Date)))));
				pos++;
				return true;
			}
			private boolean moveNext_187() throws Exception {
				state = 196;				
				if (!(com.altova.functions.Core.exists(var29_select_Original_Time_To))) {state = 194; return false; }
				return false;
			}
			private boolean moveNext_189() throws Exception {
				state = 187;				
				current = new MFAttribute("originalTimeFrom", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var28_select_Original_Time_From)))));
				pos++;
				return true;
			}
			private boolean moveNext_194() throws Exception {
				state = 203;				
				if (!(com.altova.functions.Core.exists(var30_select_Customer_Type))) {state = 201; return false; }
				return false;
			}
			private boolean moveNext_196() throws Exception {
				state = 194;				
				current = new MFAttribute("originalTimeTo", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var29_select_Original_Time_To)))));
				pos++;
				return true;
			}
			private boolean moveNext_201() throws Exception {
				state = 210;				
				if (!(com.altova.functions.Core.exists(var31_select_Customer_Preferred_Language))) {state = 208; return false; }
				return false;
			}
			private boolean moveNext_203() throws Exception {
				state = 201;				
				current = new MFAttribute("customerType", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var30_select_Customer_Type)))));
				pos++;
				return true;
			}
			private boolean moveNext_208() throws Exception {
				state = 217;				
				if (!(com.altova.functions.Core.exists(var32_select_Customer_Charge_Account_Num))) {state = 215; return false; }
				return false;
			}
			private boolean moveNext_210() throws Exception {
				state = 208;				
				current = new MFAttribute("customerPrefLang", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var31_select_Customer_Preferred_Language)))));
				pos++;
				return true;
			}
			private boolean moveNext_215() throws Exception {
				state = 224;				
				if (!(com.altova.functions.Core.exists(var33_select_Customer_Charge_Account_Exp))) {state = 222; return false; }
				return false;
			}
			private boolean moveNext_217() throws Exception {
				state = 215;				
				current = new MFAttribute("customerChargeAccountNum", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var32_select_Customer_Charge_Account_Num)))));
				pos++;
				return true;
			}
			private boolean moveNext_222() throws Exception {
				state = 231;				
				if (!(com.altova.functions.Core.exists(var34_select_Service_Order_Status_Code))) {state = 229; return false; }
				return false;
			}
			private boolean moveNext_224() throws Exception {
				state = 222;				
				current = new MFAttribute("customerChargeAccountExp", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var33_select_Customer_Charge_Account_Exp)))));
				pos++;
				return true;
			}
			private boolean moveNext_229() throws Exception {
				state = 238;				
				if (!(com.altova.functions.Core.exists(var35_select_Service_Location_Code))) {state = 236; return false; }
				return false;
			}
			private boolean moveNext_231() throws Exception {
				state = 229;				
				current = new MFAttribute("serviceOrderStatusCode", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var34_select_Service_Order_Status_Code)))));
				pos++;
				return true;
			}
			private boolean moveNext_236() throws Exception {
				state = 245;				
				if (!(com.altova.functions.Core.exists(var36_select_Last_Modified_by_Employee_ID))) {state = 243; return false; }
				return false;
			}
			private boolean moveNext_238() throws Exception {
				state = 236;				
				current = new MFAttribute("serviceLocationCode", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var35_select_Service_Location_Code)))));
				pos++;
				return true;
			}
			private boolean moveNext_243() throws Exception {
				state = 252;				
				if (!(com.altova.functions.Core.exists(var37_select_Exception_Part_Warranty_Exp))) {state = 250; return false; }
				return false;
			}
			private boolean moveNext_245() throws Exception {
				state = 243;				
				current = new MFAttribute("lastModifiedEmployeeID", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var36_select_Last_Modified_by_Employee_ID)))));
				pos++;
				return true;
			}
			private boolean moveNext_250() throws Exception {
				state = 259;				
				if (!(com.altova.functions.Core.exists(var38_select_PA_Agreement_Num))) {state = 257; return false; }
				return false;
			}
			private boolean moveNext_252() throws Exception {
				state = 250;				
				current = new MFAttribute("exceptionPartWarrantyExpDate1", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var37_select_Exception_Part_Warranty_Exp)))));
				pos++;
				return true;
			}
			private boolean moveNext_257() throws Exception {
				state = 266;				
				if (!(com.altova.functions.Core.exists(var39_select_Sears_Sold_Code))) {state = 264; return false; }
				return false;
			}
			private boolean moveNext_259() throws Exception {
				state = 257;				
				current = new MFAttribute("paAgreementNum", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var38_select_PA_Agreement_Num)))));
				pos++;
				return true;
			}
			private boolean moveNext_264() throws Exception {
				state = 273;				
				if (!(com.altova.functions.Core.exists(var40_select_System_Item_Suffix))) {state = 271; return false; }
				return false;
			}
			private boolean moveNext_266() throws Exception {
				state = 264;				
				current = new MFAttribute("searsSoldCode", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var39_select_Sears_Sold_Code)))));
				pos++;
				return true;
			}
			private boolean moveNext_271() throws Exception {
				state = 280;				
				if (!(com.altova.functions.Core.exists(var41_select_Residential_or_Commercial_Usage))) {state = 278; return false; }
				return false;
			}
			private boolean moveNext_273() throws Exception {
				state = 271;				
				current = new MFAttribute("systemItemSuffix", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var40_select_System_Item_Suffix)))));
				pos++;
				return true;
			}
			private boolean moveNext_278() throws Exception {
				state = 287;				
				if (!(com.altova.functions.Core.exists(var42_select_Part_Warranty_Exp))) {state = 285; return false; }
				return false;
			}
			private boolean moveNext_280() throws Exception {
				state = 278;				
				current = new MFAttribute("residentalOrComUsage", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var41_select_Residential_or_Commercial_Usage)))));
				pos++;
				return true;
			}
			private boolean moveNext_285() throws Exception {
				state = 294;				
				if (!(com.altova.functions.Core.exists(var43_select_Labor_Warranty_Exp))) {state = 292; return false; }
				return false;
			}
			private boolean moveNext_287() throws Exception {
				state = 285;				
				current = new MFAttribute("partWarrantyExpDate", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var42_select_Part_Warranty_Exp)))));
				pos++;
				return true;
			}
			private boolean moveNext_292() throws Exception {
				state = 301;				
				if (!(com.altova.functions.Core.exists(var44_select_Exception_Part_Warranty_Exp2))) {state = 299; return false; }
				return false;
			}
			private boolean moveNext_294() throws Exception {
				state = 292;				
				current = new MFAttribute("laborWarrantyExpDate", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var43_select_Labor_Warranty_Exp)))));
				pos++;
				return true;
			}
			private boolean moveNext_299() throws Exception {
				state = 308;				
				if (!(com.altova.functions.Core.exists(var45_select_Labor_Warranty))) {state = 306; return false; }
				return false;
			}
			private boolean moveNext_301() throws Exception {
				state = 299;				
				current = new MFAttribute("exceptionPartWarrantyExpDate2", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var44_select_Exception_Part_Warranty_Exp2)))));
				pos++;
				return true;
			}
			private boolean moveNext_306() throws Exception {
				state = 315;				
				if (!(com.altova.functions.Core.exists(var46_select_Employee_Num_who_Created_SO))) {state = 313; return false; }
				return false;
			}
			private boolean moveNext_308() throws Exception {
				state = 306;				
				current = new MFAttribute("laborWarranty", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var45_select_Labor_Warranty)))));
				pos++;
				return true;
			}
			private boolean moveNext_313() throws Exception {
				state = 322;				
				if (!(com.altova.functions.Core.exists(var47_select_Solicit_PA_Indicator))) {state = 320; return false; }
				return false;
			}
			private boolean moveNext_315() throws Exception {
				state = 313;				
				current = new MFAttribute("createdByEmployeeId", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var46_select_Employee_Num_who_Created_SO)))));
				pos++;
				return true;
			}
			private boolean moveNext_320() throws Exception {
				state = 329;				
				if (!(com.altova.functions.Core.exists(var48_select_Service_Order_Creation_Unit_Num))) {state = 327; return false; }
				return false;
			}
			private boolean moveNext_322() throws Exception {
				state = 320;				
				current = new MFAttribute("solicitPaIndicator", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var47_select_Solicit_PA_Indicator)))));
				pos++;
				return true;
			}
			private boolean moveNext_327() throws Exception {
				state = 336;				
				if (!(var4_exists)) {state = 0; return false; }
				return false;
			}
			private boolean moveNext_329() throws Exception {
				state = 327;				
				current = new MFAttribute("soCreationUnitNum", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var48_select_Service_Order_Creation_Unit_Num)))));
				pos++;
				return true;
			}
			private boolean moveNext_336() throws Exception {
				state = 0;				
				current = new MFAttribute("serviceUnitNumber", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Service_Unit_Num)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq26_content_locations implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq26_content_locations(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq26_content_locations closure;
			boolean var5_empty;
			com.altova.mapforce.IEnumerable var4_select_State;
			com.altova.mapforce.IEnumerable var3_select_Repair_Address_2;
			com.altova.mapforce.IEnumerable var2_select_Contact_Name;
			public Enumerator(seq26_content_locations closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
					case 27:	if (moveNext_27()) return true; break;
					case 35:	if (moveNext_35()) return true; break;
					case 40:	if (moveNext_40()) return true; break;
					case 44:	if (moveNext_44()) return true; break;
					case 47:	if (moveNext_47()) return true; break;
					case 55:	if (moveNext_55()) return true; break;
					case 60:	if (moveNext_60()) return true; break;
					case 64:	if (moveNext_64()) return true; break;
					case 71:	if (moveNext_71()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var5_empty = com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Postal Code"))))));
				var4_select_State = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "State")));
				var3_select_Repair_Address_2 = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Repair Address 2")));
				var2_select_Contact_Name = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Contact Name")));
				current = new MFAttribute("locationClassification", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq27_if_equal(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 7;				
				if (!(com.altova.functions.Core.exists(var2_select_Contact_Name))) {state = 7; return false; }
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Contact_Name)))))) {state = 15; return false; }
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 20;				
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Repair Address 1")))))))) {state = 24; return false; }
				return false;
			}
			private boolean moveNext_15() throws Exception {
				state = 7;				
				current = new MFAttribute("locationNotes", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq28_cond_normalize_space(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_20() throws Exception {
				state = 27;				
				if (!(com.altova.functions.Core.exists(var3_select_Repair_Address_2))) {state = 27; return false; }
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_Repair_Address_2)))))) {state = 35; return false; }
				return false;
			}
			private boolean moveNext_24() throws Exception {
				state = 20;				
				current = new MFAttribute("addressLine1", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq29_cond_normalize_space(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_27() throws Exception {
				state = 40;				
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "City")))))))) {state = 44; return false; }
				return false;
			}
			private boolean moveNext_35() throws Exception {
				state = 27;				
				current = new MFAttribute("addressLine2", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq30_cond_normalize_space(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_40() throws Exception {
				state = 47;				
				if (!(com.altova.functions.Core.exists(var4_select_State))) {state = 47; return false; }
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var4_select_State)))))) {state = 55; return false; }
				return false;
			}
			private boolean moveNext_44() throws Exception {
				state = 40;				
				current = new MFAttribute("city", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq31_cond_normalize_space(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_47() throws Exception {
				state = 60;				
				if (!(var5_empty)) {state = 64; return false; }
				return false;
			}
			private boolean moveNext_55() throws Exception {
				state = 47;				
				current = new MFAttribute("state", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq32_cond_normalize_space(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_60() throws Exception {
				state = 0;				
				if (!(var5_empty)) {state = 71; return false; }
				return false;
			}
			private boolean moveNext_64() throws Exception {
				state = 60;				
				current = new MFAttribute("zipCode", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq33_if_greater(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_71() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.greater(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.functions.Core.stringLength(com.altova.functions.Core.normalizeSpace((java.lang.String)com.altova.functions.Core.first((new seq34_cond_normalize_space(closure.var1_bv)))))))), new java.math.BigDecimal("5")))) {state = 0; return false; }
				current = new MFAttribute("zip4", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq35_cond_substring(closure.var1_bv)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq27_if_equal implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq27_if_equal(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq27_if_equal closure;
			public Enumerator(seq27_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.equal(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Business Address Ind"))))), "Y"))) {state = 11; return false; }
				current = "COMMERCIAL";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = "RESIDENTIAL";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq28_cond_normalize_space implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq28_cond_normalize_space(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq28_cond_normalize_space closure;
			java.lang.String var2_normalize_space;
			public Enumerator(seq28_cond_normalize_space closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Contact Name")))));
				if (!(com.altova.functions.Lang.empty(var2_normalize_space))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				current = var2_normalize_space;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq29_cond_normalize_space implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq29_cond_normalize_space(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq29_cond_normalize_space closure;
			java.lang.String var2_normalize_space;
			public Enumerator(seq29_cond_normalize_space closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Repair Address 1")))));
				if (!(com.altova.functions.Lang.empty(var2_normalize_space))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				current = var2_normalize_space;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq30_cond_normalize_space implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq30_cond_normalize_space(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq30_cond_normalize_space closure;
			java.lang.String var2_normalize_space;
			public Enumerator(seq30_cond_normalize_space closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Repair Address 2")))));
				if (!(com.altova.functions.Lang.empty(var2_normalize_space))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				current = var2_normalize_space;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq31_cond_normalize_space implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq31_cond_normalize_space(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq31_cond_normalize_space closure;
			java.lang.String var2_normalize_space;
			public Enumerator(seq31_cond_normalize_space closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "City")))));
				if (!(com.altova.functions.Lang.empty(var2_normalize_space))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				current = var2_normalize_space;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq32_cond_normalize_space implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq32_cond_normalize_space(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq32_cond_normalize_space closure;
			java.lang.String var2_normalize_space;
			public Enumerator(seq32_cond_normalize_space closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "State")))));
				if (!(com.altova.functions.Lang.empty(var2_normalize_space))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				current = var2_normalize_space;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq33_if_greater implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq33_if_greater(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq33_if_greater closure;
			java.math.BigDecimal var3_const_5;
			java.lang.String var2_normalize_space;
			public Enumerator(seq33_if_greater closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_const_5 = new java.math.BigDecimal("5");
				var2_normalize_space = com.altova.functions.Core.normalizeSpace((java.lang.String)com.altova.functions.Core.first((new seq34_cond_normalize_space(closure.var1_bv))));
				if (!(com.altova.functions.Core.greater(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.functions.Core.stringLength(var2_normalize_space)))), var3_const_5))) {state = 11; return false; }
				current = com.altova.functions.Lang.left(var2_normalize_space, com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(var3_const_5))));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = var2_normalize_space;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq34_cond_normalize_space implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq34_cond_normalize_space(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq34_cond_normalize_space closure;
			java.lang.String var2_normalize_space;
			public Enumerator(seq34_cond_normalize_space closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Postal Code")))));
				if (!(com.altova.functions.Lang.empty(var2_normalize_space))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				current = var2_normalize_space;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq35_cond_substring implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq35_cond_substring(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq35_cond_substring closure;
			java.math.BigDecimal var3_const_5;
			java.lang.String var2_normalize_space;
			public Enumerator(seq35_cond_substring closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_const_5 = new java.math.BigDecimal("5");
				var2_normalize_space = com.altova.functions.Core.normalizeSpace((java.lang.String)com.altova.functions.Core.first((new seq34_cond_normalize_space(closure.var1_bv))));
				if (!(com.altova.functions.Core.greater(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.functions.Core.stringLength(var2_normalize_space)))), var3_const_5))) {state = 0; return false; }
				current = com.altova.functions.Core.substring(var2_normalize_space, com.altova.CoreTypes.decimalToDouble(var3_const_5), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("4")));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq36_content_parts implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq36_content_parts(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq36_content_parts closure;
			com.altova.mapforce.IEnumerable var7_select_Merchandise_Description;
			com.altova.mapforce.IEnumerable var6_select_Merchandise_Code;
			com.altova.mapforce.IEnumerable var5_select_Item_Num;
			com.altova.mapforce.IEnumerable var4_select_Serial_Number;
			com.altova.mapforce.IEnumerable var3_select_Model;
			com.altova.mapforce.IEnumerable var2_select_Brand;
			public Enumerator(seq36_content_parts closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 27:	if (moveNext_27()) return true; break;
					case 29:	if (moveNext_29()) return true; break;
					case 34:	if (moveNext_34()) return true; break;
					case 36:	if (moveNext_36()) return true; break;
					case 43:	if (moveNext_43()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 6;				
				var7_select_Merchandise_Description = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Merchandise Description")));
				var6_select_Merchandise_Code = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Merchandise Code")));
				var5_select_Item_Num = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Item Num")));
				var4_select_Serial_Number = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Serial Number")));
				var3_select_Model = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Model")));
				var2_select_Brand = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Brand")));
				if (!(com.altova.functions.Core.exists(var2_select_Brand))) {state = 6; return false; }
				current = new MFAttribute("manufacturer", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Brand)))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 15;				
				if (!(com.altova.functions.Core.exists(var3_select_Model))) {state = 13; return false; }
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 22;				
				if (!(com.altova.functions.Core.exists(var4_select_Serial_Number))) {state = 20; return false; }
				return false;
			}
			private boolean moveNext_15() throws Exception {
				state = 13;				
				current = new MFAttribute("modelNumber", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_Model)))));
				pos++;
				return true;
			}
			private boolean moveNext_20() throws Exception {
				state = 29;				
				if (!(com.altova.functions.Core.exists(var5_select_Item_Num))) {state = 27; return false; }
				return false;
			}
			private boolean moveNext_22() throws Exception {
				state = 20;				
				current = new MFAttribute("serialNumber", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var4_select_Serial_Number)))));
				pos++;
				return true;
			}
			private boolean moveNext_27() throws Exception {
				state = 36;				
				if (!(com.altova.functions.Core.exists(var6_select_Merchandise_Code))) {state = 34; return false; }
				return false;
			}
			private boolean moveNext_29() throws Exception {
				state = 27;				
				current = new MFAttribute("partNumber", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var5_select_Item_Num)))));
				pos++;
				return true;
			}
			private boolean moveNext_34() throws Exception {
				state = 43;				
				if (!(com.altova.functions.Core.exists(var7_select_Merchandise_Description))) {state = 0; return false; }
				return false;
			}
			private boolean moveNext_36() throws Exception {
				state = 34;				
				current = new MFAttribute("classCode", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var6_select_Merchandise_Code)))));
				pos++;
				return true;
			}
			private boolean moveNext_43() throws Exception {
				state = 0;				
				current = new MFAttribute("classComments", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var7_select_Merchandise_Description)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq37_content_tasks implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq37_content_tasks(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq37_content_tasks closure;
			com.altova.mapforce.IEnumerable var2_select_Merchandise_Code;
			boolean var4_exists;
			com.altova.mapforce.IEnumerable var3_select_Merchandise_Description;
			public Enumerator(seq37_content_tasks closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 6;				
				var2_select_Merchandise_Code = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Merchandise Code")));
				var4_exists = com.altova.functions.Core.exists(var2_select_Merchandise_Code);
				if (!(var4_exists)) {state = 6; return false; }
				var3_select_Merchandise_Description = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Merchandise Description")));
				if (!(com.altova.functions.Core.exists(var3_select_Merchandise_Description))) {state = 6; return false; }
				current = new MFAttribute("title", "", null, com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Merchandise_Code))), "-"), com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_Merchandise_Description))))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 18;				
				current = new MFAttribute("default", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("1"))))));
				pos++;
				return true;
			}
			private boolean moveNext_18() throws Exception {
				state = 0;				
				if (!(var4_exists)) {state = 0; return false; }
				current = new MFAttribute("externalSku", "", null, com.altova.functions.Core.box(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_select_Merchandise_Code)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}


	private boolean runDoesCloseAll = true;		

	// instances
		protected com.altova.text.ITextNode varHSRNewRequestInstance;
	protected java.sql.Connection varServiceLiveIntegrationDb4Instance;
	protected long varintegrationId;
		com.altova.db.DbTreeOperations.TransactionHelper transactionHelper;

	public void run(String HSRNewRequestSourceFilename, java.sql.Connection ServiceLiveIntegrationDb4SourceConnection, long integrationId6SourceParameter, java.sql.Connection ServiceLiveIntegrationDb3TargetConnection) throws Exception {
		// open source streams
		writeTrace("Loading " + HSRNewRequestSourceFilename + "...\n");
		com.altova.io.FileInput HSRNewRequestSource = new com.altova.io.FileInput(HSRNewRequestSourceFilename);

		// run
		run(HSRNewRequestSource, ServiceLiveIntegrationDb4SourceConnection, integrationId6SourceParameter, ServiceLiveIntegrationDb3TargetConnection);

		// close source streams
		HSRNewRequestSource.close();
	}


	// main entry point

	public void run(com.altova.io.Input HSRNewRequestSource, java.sql.Connection ServiceLiveIntegrationDb4SourceConnection, long integrationId6SourceParameter, java.sql.Connection ServiceLiveIntegrationDb3TargetConnection) throws Exception {
		// Open the source(s)
		writeTrace("Parsing Text...\n");
		com.servicelive.esb.mapforce.HSRNewRequest.HSRNewRequestDocument HSRNewRequestDocument = new com.servicelive.esb.mapforce.HSRNewRequest.HSRNewRequestDocument();
		HSRNewRequestDocument.setEncoding( "windows-1252", false, false );
		HSRNewRequestDocument.parse(HSRNewRequestSource);
		varHSRNewRequestInstance = HSRNewRequestDocument.getGenerator();
	
		HSRNewRequestSource.close();
		writeTrace("Connecting to ServiceLiveIntegrationDb4 database...\n");
			
		varServiceLiveIntegrationDb4Instance = ServiceLiveIntegrationDb4SourceConnection;
		
			varintegrationId = integrationId6SourceParameter;


		// Create the target

		writeTrace("Connecting to ServiceLiveIntegrationDb3 database...\n");
		{

		// Execute mapping

		seq1_Main mapping = new seq1_Main(new com.altova.text.TextDocumentAsMFNodeAdapter(varHSRNewRequestInstance, HSRNewRequestSource.getFilename()), new com.altova.db.Catalog(varServiceLiveIntegrationDb4Instance), integrationId6SourceParameter);

		writeDB(mapping, ServiceLiveIntegrationDb3TargetConnection);
		// Close the target
		}

		writeTrace("Closing " + ServiceLiveIntegrationDb3TargetConnection + ".\n");
		ServiceLiveIntegrationDb3TargetConnection.close();
		// Close the source
		varServiceLiveIntegrationDb4Instance.close();

		
		if (runDoesCloseAll)
		{
			HSRNewRequestSource.close();
		}
	}



		static void writeDB(com.altova.mapforce.IEnumerable input, java.sql.Connection target) throws Exception
		{
			com.altova.db.DbTreeOperations.RecordBuffer buf = null;
			com.altova.db.DbTreeOperations.TransactionHelper transactionHelper = new com.altova.db.DbTreeOperations.TransactionHelper(
				target, "", "", "", "SAVEPOINT  %%TRANSACTION_NAME%% ", "ROLLBACK TO SAVEPOINT  %%TRANSACTION_NAME%% "
			);

			com.altova.db.DbTreeOperations.TransactionSentinel sentinel = new com.altova.db.DbTreeOperations.TransactionSentinel(transactionHelper, "");
			try
			{
				for (IEnumerator en = input.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("batches"))
						writeDB_batches2(buf, node, target, transactionHelper);				
				}
				sentinel.commit();
			}
			finally
			{
				sentinel.rollback();
			}
		}

			static void writeDB_batches2(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `batches` (`integrationId`,`fileName`,`statusId`,`createdOn`) VALUES (?,?,?,?)", false);
							command.addParameter(buf.getValue("integrationId"),java.sql.Types.JAVA_OBJECT,2,-1,-1); // Type: smallint 
							command.addParameter(buf.getValue("fileName"),java.sql.Types.JAVA_OBJECT,1024,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("statusId"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("createdOn"),java.sql.Types.JAVA_OBJECT,0,-1,-1); // Type: datetime 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `batchId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				for (IEnumerator en = children.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("transactions"))
						writeDB_transactions2(buf, node, target, transactionHelper);				
				}
				}
			}
			static void writeDB_transactions2(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("batchId", parent.getValue("batchId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `transactions` (`transactionTypeId`,`externalOrderNumber`,`processAfter`,`createdOn`,`statusId`,`batchId`) VALUES (?,?,?,?,?,?)", false);
							command.addParameter(buf.getValue("transactionTypeId"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("externalOrderNumber"),java.sql.Types.JAVA_OBJECT,64,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("processAfter"),java.sql.Types.JAVA_OBJECT,0,-1,-1); // Type: datetime 
							command.addParameter(buf.getValue("createdOn"),java.sql.Types.JAVA_OBJECT,0,-1,-1); // Type: datetime 
							command.addParameter(buf.getValue("statusId"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("batchId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `transactionId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				for (IEnumerator en = children.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("serviceorders"))
						writeDB_serviceorders2(buf, node, target, transactionHelper);				
				}
				}
			}
			static void writeDB_serviceorders2(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("transactionId", parent.getValue("transactionId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `serviceorders` (`title`,`description`,`providerInstructions`,`transactionId`) VALUES (?,?,?,?)", false);
							command.addParameter(buf.getValue("title"),java.sql.Types.JAVA_OBJECT,4096,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("description"),java.sql.Types.JAVA_OBJECT,4096,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("providerInstructions"),java.sql.Types.JAVA_OBJECT,4096,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("transactionId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `serviceOrderId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				for (IEnumerator en = children.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("contacts"))
						writeDB_contacts2(buf, node, target, transactionHelper);				
					if (node.getLocalName().equals("customrefs_hsr"))
						writeDB_customrefs_hsr(buf, node, target, transactionHelper);				
					if (node.getLocalName().equals("locations"))
						writeDB_locations2(buf, node, target, transactionHelper);				
					if (node.getLocalName().equals("parts"))
						writeDB_parts2(buf, node, target, transactionHelper);				
					if (node.getLocalName().equals("tasks"))
						writeDB_tasks2(buf, node, target, transactionHelper);				
				}
				}
			}
			static void writeDB_contacts2(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("serviceOrderId", parent.getValue("serviceOrderId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `contacts` (`lastName`,`firstName`,`serviceOrderId`) VALUES (?,?,?)", false);
							command.addParameter(buf.getValue("lastName"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("firstName"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceOrderId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `contactId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				for (IEnumerator en = children.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("phones"))
						writeDB_phones3(buf, node, target, transactionHelper);				
					if (node.getLocalName().equals("phones (2)"))
						writeDB_phones4(buf, node, target, transactionHelper);				
				}
				}
			}
			static void writeDB_phones3(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("contactId", parent.getValue("contactId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `phones` (`phoneNumber`,`phoneType`,`primary`,`contactId`) VALUES (?,?,?,?)", false);
							command.addParameter(buf.getValue("phoneNumber"),java.sql.Types.JAVA_OBJECT,20,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("phoneType"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("primary"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("contactId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `phoneId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
			static void writeDB_phones4(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("contactId", parent.getValue("contactId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `phones` (`phoneNumber`,`phoneType`,`primary`,`contactId`) VALUES (?,?,?,?)", false);
							command.addParameter(buf.getValue("phoneNumber"),java.sql.Types.JAVA_OBJECT,20,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("phoneType"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("primary"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("contactId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `phoneId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
			static void writeDB_customrefs_hsr(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("serviceOrderId", parent.getValue("serviceOrderId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `customrefs_hsr` (`unitNumber`,`orderNumber`,`orderIdstring`,`customerNumber`,`paymentMethod`,`priorityIndicator`,`coverageTypeLabor`,`coverageTypeParts`,`division`,`merchandiseCode`,`purc" +
"haseDate`,`brand`,`model`,`serialNumber`,`searsStoreNumber`,`promotionIndicator`,`procId`,`contractNumber`,`contractExpDate`,`authorizationNumber`,`repairTagBarCodeNum`,`promisedDate`,`promisedTimeFrom" +
"`,`promisedTimeTo`,`originalScheduledDate`,`originalTimeFrom`,`originalTimeTo`,`customerType`,`customerPrefLang`,`customerChargeAccountNum`,`customerChargeAccountExp`,`serviceOrderStatusCode`,`serviceL" +
"ocationCode`,`lastModifiedEmployeeID`,`exceptionPartWarrantyExpDate1`,`paAgreementNum`,`searsSoldCode`,`systemItemSuffix`,`residentalOrComUsage`,`partWarrantyExpDate`,`laborWarrantyExpDate`,`exceptionP" +
"artWarrantyExpDate2`,`laborWarranty`,`createdByEmployeeId`,`solicitPaIndicator`,`soCreationUnitNum`,`serviceUnitNumber`,`serviceOrderId`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?" +
",?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", false);
							command.addParameter(buf.getValue("unitNumber"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("orderNumber"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("orderIdstring"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("customerNumber"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("paymentMethod"),java.sql.Types.JAVA_OBJECT,2,-1,-1); // Type: char 
							command.addParameter(buf.getValue("priorityIndicator"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: char 
							command.addParameter(buf.getValue("coverageTypeLabor"),java.sql.Types.JAVA_OBJECT,2,-1,-1); // Type: char 
							command.addParameter(buf.getValue("coverageTypeParts"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("division"),java.sql.Types.JAVA_OBJECT,3,-1,-1); // Type: char 
							command.addParameter(buf.getValue("merchandiseCode"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("purchaseDate"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("brand"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("model"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serialNumber"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("searsStoreNumber"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("promotionIndicator"),java.sql.Types.JAVA_OBJECT,2,-1,-1); // Type: char 
							command.addParameter(buf.getValue("procId"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("contractNumber"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("contractExpDate"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("authorizationNumber"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("repairTagBarCodeNum"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("promisedDate"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("promisedTimeFrom"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("promisedTimeTo"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("originalScheduledDate"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("originalTimeFrom"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("originalTimeTo"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("customerType"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: char 
							command.addParameter(buf.getValue("customerPrefLang"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: char 
							command.addParameter(buf.getValue("customerChargeAccountNum"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("customerChargeAccountExp"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceOrderStatusCode"),java.sql.Types.JAVA_OBJECT,2,-1,-1); // Type: char 
							command.addParameter(buf.getValue("serviceLocationCode"),java.sql.Types.JAVA_OBJECT,4,-1,-1); // Type: char 
							command.addParameter(buf.getValue("lastModifiedEmployeeID"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("exceptionPartWarrantyExpDate1"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("paAgreementNum"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("searsSoldCode"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: char 
							command.addParameter(buf.getValue("systemItemSuffix"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("residentalOrComUsage"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: char 
							command.addParameter(buf.getValue("partWarrantyExpDate"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("laborWarrantyExpDate"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("exceptionPartWarrantyExpDate2"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("laborWarranty"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("createdByEmployeeId"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("solicitPaIndicator"),java.sql.Types.JAVA_OBJECT,2,-1,-1); // Type: char 
							command.addParameter(buf.getValue("soCreationUnitNum"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceUnitNumber"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceOrderId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `customRefId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
			static void writeDB_locations2(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("serviceOrderId", parent.getValue("serviceOrderId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `locations` (`locationClassification`,`locationNotes`,`addressLine1`,`addressLine2`,`city`,`state`,`zipCode`,`zip4`,`serviceOrderId`) VALUES (?,?,?,?,?,?,?,?,?)", false);
							command.addParameter(buf.getValue("locationClassification"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("locationNotes"),java.sql.Types.JAVA_OBJECT,4096,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("addressLine1"),java.sql.Types.JAVA_OBJECT,1024,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("addressLine2"),java.sql.Types.JAVA_OBJECT,1024,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("city"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("state"),java.sql.Types.JAVA_OBJECT,2,-1,-1); // Type: char 
							command.addParameter(buf.getValue("zipCode"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("zip4"),java.sql.Types.JAVA_OBJECT,10,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceOrderId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `locationId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
			static void writeDB_parts2(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("serviceOrderId", parent.getValue("serviceOrderId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `parts` (`manufacturer`,`modelNumber`,`serialNumber`,`partNumber`,`classCode`,`classComments`,`serviceOrderId`) VALUES (?,?,?,?,?,?,?)", false);
							command.addParameter(buf.getValue("manufacturer"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("modelNumber"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serialNumber"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("partNumber"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("classCode"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("classComments"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceOrderId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `partId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
			static void writeDB_tasks2(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("serviceOrderId", parent.getValue("serviceOrderId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `tasks` (`title`,`default`,`externalSku`,`serviceOrderId`) VALUES (?,?,?,?)", false);
							command.addParameter(buf.getValue("title"),java.sql.Types.JAVA_OBJECT,1024,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("default"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("externalSku"),java.sql.Types.JAVA_OBJECT,18,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceOrderId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `taskId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}
	static IEnumerable throwUserException(String content)
	{
		throw new com.altova.UserException(content);
	}
}
