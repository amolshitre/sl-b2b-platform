/**
 * MarketServiceBus_Mapforce_CodeFrame.java
 *
 * This file was generated by MapForce 2011sp1.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */


package com.servicelive.esb.mapforce;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;

import com.altova.types.*;


public class MarketServiceBus_Mapforce_CodeFrame extends JFrame implements com.altova.TraceTarget {
	java.util.Hashtable	mapArguments = new java.util.Hashtable();

	
	JPanel			contentPane;
	TitledBorder	titledBorder1;
	Box 		jHeader = new Box(BoxLayout.X_AXIS);
	Box		jHeaderInfo = new Box(BoxLayout.Y_AXIS);
	Box 		jButtonPane = new Box(BoxLayout.X_AXIS);
	JScrollPane	jScrollPaneStructures	= new JScrollPane();
	JPanel		jPanelStructures		= new JPanel();
	JLabel		jIconLabel				= new JLabel();
	JLabel		jInfoLabel1				= new JLabel();
	JLabel		jInfoLabel2				= new JLabel();
	JLabel		jInfoLabel3				= new JLabel();
	JButton		jStartButton			= new JButton();
	JPanel		jPanel1					= new JPanel();
	JScrollPane	jTraceScrollPane		= new JScrollPane();
	JTextArea	jTraceTextArea			= new JTextArea();


	JLabel jAssurantLabel0 = new JLabel();
	JTextField jAssurantTextField0 = new JTextField();

	JLabel jServiceLiveIntegrationDb2Label1 = new JLabel();
	JTextField jServiceLiveIntegrationDb2TextField1 = new JTextField();

	JLabel jintegrationIdLabel2 = new JLabel();
	JTextField jintegrationIdTextField2 = new JTextField();

	JLabel jbuyerResourceIdLabel3 = new JLabel();
	JTextField jbuyerResourceIdTextField3 = new JTextField();

	JLabel jServiceLiveIntegrationDbLabel4 = new JLabel();
	JTextField jServiceLiveIntegrationDbTextField4 = new JTextField();

	JLabel jHSRNewRequestLabel5 = new JLabel();
	JTextField jHSRNewRequestTextField5 = new JTextField();

	JLabel jServiceLiveIntegrationDb4Label6 = new JLabel();
	JTextField jServiceLiveIntegrationDb4TextField6 = new JTextField();

	JLabel jintegrationIdLabel7 = new JLabel();
	JTextField jintegrationIdTextField7 = new JTextField();

	JLabel jServiceLiveIntegrationDb3Label8 = new JLabel();
	JTextField jServiceLiveIntegrationDb3TextField8 = new JTextField();

	JLabel jHSRUpdateRequestLabel9 = new JLabel();
	JTextField jHSRUpdateRequestTextField9 = new JTextField();

	JLabel jServiceLiveIntegrationDb6Label10 = new JLabel();
	JTextField jServiceLiveIntegrationDb6TextField10 = new JTextField();

	JLabel jintegrationIdLabel11 = new JLabel();
	JTextField jintegrationIdTextField11 = new JTextField();

	JLabel jServiceLiveIntegrationDb5Label12 = new JLabel();
	JTextField jServiceLiveIntegrationDb5TextField12 = new JTextField();

	JLabel jServiceLiveIntegrationDb7Label13 = new JLabel();
	JTextField jServiceLiveIntegrationDb7TextField13 = new JTextField();

	JLabel jbatchIdLabel14 = new JLabel();
	JTextField jbatchIdTextField14 = new JTextField();

	JLabel jNPSCallCloseUpdateLabel15 = new JLabel();
	JTextField jNPSCallCloseUpdateTextField15 = new JTextField();

	JLabel jservicelive_integrationLabel16 = new JLabel();
	JTextField jservicelive_integrationTextField16 = new JTextField();

	JLabel jbatchIdLabel17 = new JLabel();
	JTextField jbatchIdTextField17 = new JTextField();

	JLabel jRI_InputLabel18 = new JLabel();
	JTextField jRI_InputTextField18 = new JTextField();

	JLabel jNPSCloseAudit_AUDLabel19 = new JLabel();
	JTextField jNPSCloseAudit_AUDTextField19 = new JTextField();

	JLabel jServiceLiveIntegrationDb1Label20 = new JLabel();
	JTextField jServiceLiveIntegrationDb1TextField20 = new JTextField();

	JLabel jintegrationIdLabel21 = new JLabel();
	JTextField jintegrationIdTextField21 = new JTextField();

	JLabel jServiceLiveIntegrationDb8Label22 = new JLabel();
	JTextField jServiceLiveIntegrationDb8TextField22 = new JTextField();

	JLabel jRI_InputLabel23 = new JLabel();
	JTextField jRI_InputTextField23 = new JTextField();

	JLabel jServiceLiveIntegrationDb10Label24 = new JLabel();
	JTextField jServiceLiveIntegrationDb10TextField24 = new JTextField();

	JLabel jintegrationIdLabel25 = new JLabel();
	JTextField jintegrationIdTextField25 = new JTextField();

	JLabel jServiceLiveIntegrationDb9Label26 = new JLabel();
	JTextField jServiceLiveIntegrationDb9TextField26 = new JTextField();


	public MarketServiceBus_Mapforce_CodeFrame() {
		enableEvents(AWTEvent.WINDOW_EVENT_MASK);
		try {
			jbInit();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void jbInit() throws Exception {
		jInfoLabel1.setText("THIS APPLICATION WAS GENERATED BY MapForce 2011sp1");
		jInfoLabel2.setForeground(Color.blue);
		jInfoLabel2.setText("http://www.altova.com/mapforce");
		jInfoLabel3.setText("Please check the input and output files, and press the Start button...");
		jHeaderInfo.add(jInfoLabel1,0);
		jHeaderInfo.add(jInfoLabel2,1);
		jHeaderInfo.add(jInfoLabel3,2);
		
		jIconLabel.setIcon(new ImageIcon(MarketServiceBus_Mapforce_CodeFrame.class.getResource("mapforce.png")));
		jIconLabel.setText("");
				
		jHeader.add(jIconLabel);
		jHeader.add(Box.createHorizontalStrut(15));
		jHeader.add(jHeaderInfo);
		jHeader.add(Box.createGlue());
		
		jStartButton.setFont(new java.awt.Font("Dialog", 0, 11));
		jStartButton.setText("Start");
		jStartButton.addActionListener(new MarketServiceBus_Mapforce_CodeFrame_jStartButton_actionAdapter(this));
		jButtonPane.add(Box.createHorizontalStrut(5));
		jButtonPane.add(jStartButton);
		jButtonPane.add(Box.createGlue());
				
		jScrollPaneStructures.setBorder(BorderFactory.createLineBorder(Color.black));
		jScrollPaneStructures.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		jScrollPaneStructures.setAutoscrolls(true);
		jPanelStructures.setLayout(null);
		fillScrollPane();
		jScrollPaneStructures.getViewport().add(jPanelStructures, null);
		
		jTraceTextArea.setBackground(Color.white);
		jTraceTextArea.setForeground(Color.black);
		jTraceTextArea.setToolTipText("");
		jTraceTextArea.setText("");
		jTraceTextArea.setRows(20);
		
		jTraceScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		jTraceScrollPane.setViewportBorder(null);
		jTraceScrollPane.setAutoscrolls(true);
		jTraceScrollPane.setBorder(BorderFactory.createLineBorder(Color.black));
		jTraceScrollPane.setDebugGraphicsOptions(0);
		jTraceScrollPane.setToolTipText("");
		jTraceScrollPane.setVerifyInputWhenFocusTarget(true);
		jTraceScrollPane.getViewport().add(jTraceTextArea, null);
		jTraceScrollPane.setPreferredSize(new Dimension(0, 200));
				
		contentPane = (JPanel)this.getContentPane();
		titledBorder1 = new TitledBorder("");
		contentPane.setLayout(new BoxLayout(contentPane, BoxLayout.Y_AXIS));
		this.setSize(new Dimension(603, 511));
		this.setTitle("Mapforce Application");
		contentPane.add(jHeader, 0);
		contentPane.add(jScrollPaneStructures, 1);
		contentPane.add(jButtonPane, 2);
		contentPane.add(jTraceScrollPane, 3);
	}

	protected void fillScrollPane() {

		jAssurantLabel0.setText("Source instance of Assurant file:");
		jAssurantLabel0.setBounds(new Rectangle(15, 10, 438, 23));
		jPanelStructures.add(jAssurantLabel0, null);
		jAssurantTextField0.setText("../sample-files/Assurant-Sample.done");
		jAssurantTextField0.setBounds(new Rectangle(15, 35, 438, 23));
		jAssurantTextField0.setEditable(false);
		jPanelStructures.add(jAssurantTextField0, null);

		jServiceLiveIntegrationDb2Label1.setText("Source JDBC-URL of ServiceLiveIntegrationDb2 database:");
		jServiceLiveIntegrationDb2Label1.setBounds(new Rectangle(15, 60, 438, 23));
		jPanelStructures.add(jServiceLiveIntegrationDb2Label1, null);

		jServiceLiveIntegrationDb2TextField1.setText("jdbc:odbc:SLIntegration");
		jServiceLiveIntegrationDb2TextField1.setBounds(new Rectangle(15, 85, 438, 23));
		jServiceLiveIntegrationDb2TextField1.setEditable(false);
		jPanelStructures.add(jServiceLiveIntegrationDb2TextField1, null);

		jintegrationIdLabel2.setText("Input Parameter : integrationId");
		jintegrationIdLabel2.setBounds(new Rectangle(15, 110, 438, 23));
		jPanelStructures.add(jintegrationIdLabel2, null);

		jintegrationIdTextField2.setText("" );
		jintegrationIdTextField2.setBounds(new Rectangle(15, 135, 438, 23));
		jintegrationIdTextField2.setEditable(true);
		jintegrationIdTextField2.addKeyListener(new MarketServiceBus_Mapforce_CodeFrame_jintegrationIdTextField2_keyAdapter( this ) );
		jPanelStructures.add(jintegrationIdTextField2, null);

		jbuyerResourceIdLabel3.setText("Input Parameter : buyerResourceId");
		jbuyerResourceIdLabel3.setBounds(new Rectangle(15, 160, 438, 23));
		jPanelStructures.add(jbuyerResourceIdLabel3, null);

		jbuyerResourceIdTextField3.setText("" );
		jbuyerResourceIdTextField3.setBounds(new Rectangle(15, 185, 438, 23));
		jbuyerResourceIdTextField3.setEditable(true);
		jbuyerResourceIdTextField3.addKeyListener(new MarketServiceBus_Mapforce_CodeFrame_jbuyerResourceIdTextField3_keyAdapter( this ) );
		jPanelStructures.add(jbuyerResourceIdTextField3, null);

		jServiceLiveIntegrationDbLabel4.setText("JDBC-URL of ServiceLiveIntegrationDb database:");
		jServiceLiveIntegrationDbLabel4.setBounds(new Rectangle(15, 210, 438, 23));
		jPanelStructures.add(jServiceLiveIntegrationDbLabel4, null);

		jServiceLiveIntegrationDbTextField4.setText("jdbc:odbc:SLIntegration");
		jServiceLiveIntegrationDbTextField4.setBounds(new Rectangle(15, 235, 438, 23));
		jServiceLiveIntegrationDbTextField4.setEditable(false);
		jPanelStructures.add(jServiceLiveIntegrationDbTextField4, null);

		jHSRNewRequestLabel5.setText("Source instance of HSRNewRequest file:");
		jHSRNewRequestLabel5.setBounds(new Rectangle(15, 260, 438, 23));
		jPanelStructures.add(jHSRNewRequestLabel5, null);
		jHSRNewRequestTextField5.setText("../sample-files/HSR-NewRequest.txt");
		jHSRNewRequestTextField5.setBounds(new Rectangle(15, 285, 438, 23));
		jHSRNewRequestTextField5.setEditable(false);
		jPanelStructures.add(jHSRNewRequestTextField5, null);

		jServiceLiveIntegrationDb4Label6.setText("Source JDBC-URL of ServiceLiveIntegrationDb4 database:");
		jServiceLiveIntegrationDb4Label6.setBounds(new Rectangle(15, 310, 438, 23));
		jPanelStructures.add(jServiceLiveIntegrationDb4Label6, null);

		jServiceLiveIntegrationDb4TextField6.setText("jdbc:odbc:SLIntegration");
		jServiceLiveIntegrationDb4TextField6.setBounds(new Rectangle(15, 335, 438, 23));
		jServiceLiveIntegrationDb4TextField6.setEditable(false);
		jPanelStructures.add(jServiceLiveIntegrationDb4TextField6, null);

		jintegrationIdLabel7.setText("Input Parameter : integrationId");
		jintegrationIdLabel7.setBounds(new Rectangle(15, 360, 438, 23));
		jPanelStructures.add(jintegrationIdLabel7, null);

		jintegrationIdTextField7.setText("" );
		jintegrationIdTextField7.setBounds(new Rectangle(15, 385, 438, 23));
		jintegrationIdTextField7.setEditable(true);
		jintegrationIdTextField7.addKeyListener(new MarketServiceBus_Mapforce_CodeFrame_jintegrationIdTextField7_keyAdapter( this ) );
		jPanelStructures.add(jintegrationIdTextField7, null);

		jServiceLiveIntegrationDb3Label8.setText("JDBC-URL of ServiceLiveIntegrationDb3 database:");
		jServiceLiveIntegrationDb3Label8.setBounds(new Rectangle(15, 410, 438, 23));
		jPanelStructures.add(jServiceLiveIntegrationDb3Label8, null);

		jServiceLiveIntegrationDb3TextField8.setText("jdbc:odbc:SLIntegration");
		jServiceLiveIntegrationDb3TextField8.setBounds(new Rectangle(15, 435, 438, 23));
		jServiceLiveIntegrationDb3TextField8.setEditable(false);
		jPanelStructures.add(jServiceLiveIntegrationDb3TextField8, null);

		jHSRUpdateRequestLabel9.setText("Source instance of HSRUpdateRequest file:");
		jHSRUpdateRequestLabel9.setBounds(new Rectangle(15, 460, 438, 23));
		jPanelStructures.add(jHSRUpdateRequestLabel9, null);
		jHSRUpdateRequestTextField9.setText("../sample-files/HSR-UpdateRequest2.txt");
		jHSRUpdateRequestTextField9.setBounds(new Rectangle(15, 485, 438, 23));
		jHSRUpdateRequestTextField9.setEditable(false);
		jPanelStructures.add(jHSRUpdateRequestTextField9, null);

		jServiceLiveIntegrationDb6Label10.setText("Source JDBC-URL of ServiceLiveIntegrationDb6 database:");
		jServiceLiveIntegrationDb6Label10.setBounds(new Rectangle(15, 510, 438, 23));
		jPanelStructures.add(jServiceLiveIntegrationDb6Label10, null);

		jServiceLiveIntegrationDb6TextField10.setText("jdbc:odbc:SLIntegration");
		jServiceLiveIntegrationDb6TextField10.setBounds(new Rectangle(15, 535, 438, 23));
		jServiceLiveIntegrationDb6TextField10.setEditable(false);
		jPanelStructures.add(jServiceLiveIntegrationDb6TextField10, null);

		jintegrationIdLabel11.setText("Input Parameter : integrationId");
		jintegrationIdLabel11.setBounds(new Rectangle(15, 560, 438, 23));
		jPanelStructures.add(jintegrationIdLabel11, null);

		jintegrationIdTextField11.setText("" );
		jintegrationIdTextField11.setBounds(new Rectangle(15, 585, 438, 23));
		jintegrationIdTextField11.setEditable(true);
		jintegrationIdTextField11.addKeyListener(new MarketServiceBus_Mapforce_CodeFrame_jintegrationIdTextField11_keyAdapter( this ) );
		jPanelStructures.add(jintegrationIdTextField11, null);

		jServiceLiveIntegrationDb5Label12.setText("JDBC-URL of ServiceLiveIntegrationDb5 database:");
		jServiceLiveIntegrationDb5Label12.setBounds(new Rectangle(15, 610, 438, 23));
		jPanelStructures.add(jServiceLiveIntegrationDb5Label12, null);

		jServiceLiveIntegrationDb5TextField12.setText("jdbc:odbc:SLIntegration");
		jServiceLiveIntegrationDb5TextField12.setBounds(new Rectangle(15, 635, 438, 23));
		jServiceLiveIntegrationDb5TextField12.setEditable(false);
		jPanelStructures.add(jServiceLiveIntegrationDb5TextField12, null);

		jServiceLiveIntegrationDb7Label13.setText("Source JDBC-URL of ServiceLiveIntegrationDb7 database:");
		jServiceLiveIntegrationDb7Label13.setBounds(new Rectangle(15, 660, 438, 23));
		jPanelStructures.add(jServiceLiveIntegrationDb7Label13, null);

		jServiceLiveIntegrationDb7TextField13.setText("jdbc:odbc:SLIntegration");
		jServiceLiveIntegrationDb7TextField13.setBounds(new Rectangle(15, 685, 438, 23));
		jServiceLiveIntegrationDb7TextField13.setEditable(false);
		jPanelStructures.add(jServiceLiveIntegrationDb7TextField13, null);

		jbatchIdLabel14.setText("Input Parameter : batchId");
		jbatchIdLabel14.setBounds(new Rectangle(15, 710, 438, 23));
		jPanelStructures.add(jbatchIdLabel14, null);

		jbatchIdTextField14.setText("" );
		jbatchIdTextField14.setBounds(new Rectangle(15, 735, 438, 23));
		jbatchIdTextField14.setEditable(true);
		jbatchIdTextField14.addKeyListener(new MarketServiceBus_Mapforce_CodeFrame_jbatchIdTextField14_keyAdapter( this ) );
		jPanelStructures.add(jbatchIdTextField14, null);

		jNPSCallCloseUpdateLabel15.setText("Instance of NPSCallCloseUpdate.xsd:");
		jNPSCallCloseUpdateLabel15.setBounds(new Rectangle(15, 760, 438, 23));
		jPanelStructures.add(jNPSCallCloseUpdateLabel15, null);
		jNPSCallCloseUpdateTextField15.setText("NPSCallCloseUpdate.xml");
		jNPSCallCloseUpdateTextField15.setBounds(new Rectangle(15, 785, 438, 23));
		jNPSCallCloseUpdateTextField15.setEditable(false);
		jPanelStructures.add(jNPSCallCloseUpdateTextField15, null);

		jservicelive_integrationLabel16.setText("Source JDBC-URL of servicelive_integration database:");
		jservicelive_integrationLabel16.setBounds(new Rectangle(15, 810, 438, 23));
		jPanelStructures.add(jservicelive_integrationLabel16, null);

		jservicelive_integrationTextField16.setText("jdbc:odbc:SLIntegration");
		jservicelive_integrationTextField16.setBounds(new Rectangle(15, 835, 438, 23));
		jservicelive_integrationTextField16.setEditable(false);
		jPanelStructures.add(jservicelive_integrationTextField16, null);

		jbatchIdLabel17.setText("Input Parameter : batchId");
		jbatchIdLabel17.setBounds(new Rectangle(15, 860, 438, 23));
		jPanelStructures.add(jbatchIdLabel17, null);

		jbatchIdTextField17.setText("" );
		jbatchIdTextField17.setBounds(new Rectangle(15, 885, 438, 23));
		jbatchIdTextField17.setEditable(true);
		jbatchIdTextField17.addKeyListener(new MarketServiceBus_Mapforce_CodeFrame_jbatchIdTextField17_keyAdapter( this ) );
		jPanelStructures.add(jbatchIdTextField17, null);

		jRI_InputLabel18.setText("Instance of RI_Input.xsd:");
		jRI_InputLabel18.setBounds(new Rectangle(15, 910, 438, 23));
		jPanelStructures.add(jRI_InputLabel18, null);
		jRI_InputTextField18.setText("../sample-files/RI-Sample.startProcessGW.xml");
		jRI_InputTextField18.setBounds(new Rectangle(15, 935, 438, 23));
		jRI_InputTextField18.setEditable(false);
		jPanelStructures.add(jRI_InputTextField18, null);

		jNPSCloseAudit_AUDLabel19.setText("Source instance of NPSCloseAudit_AUD.xsd:");
		jNPSCloseAudit_AUDLabel19.setBounds(new Rectangle(15, 960, 438, 23));
		jPanelStructures.add(jNPSCloseAudit_AUDLabel19, null);
		jNPSCloseAudit_AUDTextField19.setText("../../../../appl/sl/iss/13278-callclose.npsCallCloseAudit");
		jNPSCloseAudit_AUDTextField19.setBounds(new Rectangle(15, 985, 438, 23));
		jNPSCloseAudit_AUDTextField19.setEditable(false);
		jPanelStructures.add(jNPSCloseAudit_AUDTextField19, null);

		jServiceLiveIntegrationDb1Label20.setText("Source JDBC-URL of ServiceLiveIntegrationDb1 database:");
		jServiceLiveIntegrationDb1Label20.setBounds(new Rectangle(15, 1010, 438, 23));
		jPanelStructures.add(jServiceLiveIntegrationDb1Label20, null);

		jServiceLiveIntegrationDb1TextField20.setText("jdbc:odbc:SLIntegration");
		jServiceLiveIntegrationDb1TextField20.setBounds(new Rectangle(15, 1035, 438, 23));
		jServiceLiveIntegrationDb1TextField20.setEditable(false);
		jPanelStructures.add(jServiceLiveIntegrationDb1TextField20, null);

		jintegrationIdLabel21.setText("Input Parameter : integrationId");
		jintegrationIdLabel21.setBounds(new Rectangle(15, 1060, 438, 23));
		jPanelStructures.add(jintegrationIdLabel21, null);

		jintegrationIdTextField21.setText("" );
		jintegrationIdTextField21.setBounds(new Rectangle(15, 1085, 438, 23));
		jintegrationIdTextField21.setEditable(true);
		jintegrationIdTextField21.addKeyListener(new MarketServiceBus_Mapforce_CodeFrame_jintegrationIdTextField21_keyAdapter( this ) );
		jPanelStructures.add(jintegrationIdTextField21, null);

		jServiceLiveIntegrationDb8Label22.setText("JDBC-URL of ServiceLiveIntegrationDb8 database:");
		jServiceLiveIntegrationDb8Label22.setBounds(new Rectangle(15, 1110, 438, 23));
		jPanelStructures.add(jServiceLiveIntegrationDb8Label22, null);

		jServiceLiveIntegrationDb8TextField22.setText("jdbc:odbc:SLIntegration");
		jServiceLiveIntegrationDb8TextField22.setBounds(new Rectangle(15, 1135, 438, 23));
		jServiceLiveIntegrationDb8TextField22.setEditable(false);
		jPanelStructures.add(jServiceLiveIntegrationDb8TextField22, null);

		jRI_InputLabel23.setText("Source instance of RI_Input.xsd:");
		jRI_InputLabel23.setBounds(new Rectangle(15, 1160, 438, 23));
		jPanelStructures.add(jRI_InputLabel23, null);
		jRI_InputTextField23.setText("../sample-files/RI-Sample.startProcessGW.xml");
		jRI_InputTextField23.setBounds(new Rectangle(15, 1185, 438, 23));
		jRI_InputTextField23.setEditable(false);
		jPanelStructures.add(jRI_InputTextField23, null);

		jServiceLiveIntegrationDb10Label24.setText("Source JDBC-URL of ServiceLiveIntegrationDb10 database:");
		jServiceLiveIntegrationDb10Label24.setBounds(new Rectangle(15, 1210, 438, 23));
		jPanelStructures.add(jServiceLiveIntegrationDb10Label24, null);

		jServiceLiveIntegrationDb10TextField24.setText("jdbc:odbc:SLIntegration");
		jServiceLiveIntegrationDb10TextField24.setBounds(new Rectangle(15, 1235, 438, 23));
		jServiceLiveIntegrationDb10TextField24.setEditable(false);
		jPanelStructures.add(jServiceLiveIntegrationDb10TextField24, null);

		jintegrationIdLabel25.setText("Input Parameter : integrationId");
		jintegrationIdLabel25.setBounds(new Rectangle(15, 1260, 438, 23));
		jPanelStructures.add(jintegrationIdLabel25, null);

		jintegrationIdTextField25.setText("" );
		jintegrationIdTextField25.setBounds(new Rectangle(15, 1285, 438, 23));
		jintegrationIdTextField25.setEditable(true);
		jintegrationIdTextField25.addKeyListener(new MarketServiceBus_Mapforce_CodeFrame_jintegrationIdTextField25_keyAdapter( this ) );
		jPanelStructures.add(jintegrationIdTextField25, null);

		jServiceLiveIntegrationDb9Label26.setText("JDBC-URL of ServiceLiveIntegrationDb9 database:");
		jServiceLiveIntegrationDb9Label26.setBounds(new Rectangle(15, 1310, 438, 23));
		jPanelStructures.add(jServiceLiveIntegrationDb9Label26, null);

		jServiceLiveIntegrationDb9TextField26.setText("jdbc:odbc:SLIntegration");
		jServiceLiveIntegrationDb9TextField26.setBounds(new Rectangle(15, 1335, 438, 23));
		jServiceLiveIntegrationDb9TextField26.setEditable(false);
		jPanelStructures.add(jServiceLiveIntegrationDb9TextField26, null);

		jPanelStructures.setLayout(null);
		jPanelStructures.setPreferredSize(new Dimension(1335, 500));
		jPanelStructures.setSize(new Dimension(1335, 500));
		jPanelStructures.setMinimumSize(new Dimension(1335, 500));
		jPanelStructures.setMaximumSize(new Dimension(1335, 500));
	}

	protected void processWindowEvent(WindowEvent e) {
		super.processWindowEvent(e);
		if (e.getID() == WindowEvent.WINDOW_CLOSING) {
			System.exit(0);
		}
	}

    void jStartButton_actionPerformed(ActionEvent e) {
		if (e.getSource().equals(jStartButton)) {
			jStartButton.setEnabled(false);
			jTraceTextArea.removeAll();
			jTraceTextArea.append("Started...\n");
			com.altova.TraceTarget ttc = this;


			try {

			AssurantMapToServiceLiveIntegrationDb AssurantMapToServiceLiveIntegrationDbObject = new AssurantMapToServiceLiveIntegrationDb();

			Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
			Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");

			AssurantMapToServiceLiveIntegrationDbObject.registerTraceTarget(ttc);
	
			if(!mapArguments.containsKey("integrationId"))
			{
				System.out.println("Missing argument integrationId");
				System.exit(1);
			}
			if(!mapArguments.containsKey("buyerResourceId"))
			{
				System.out.println("Missing argument buyerResourceId");
				System.exit(1);
			}

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// AssurantMapToServiceLiveIntegrationDbObject.setCloseObjectsAfterRun(false);

			{
				com.altova.io.Input AssurantSource = com.altova.io.StreamInput.createInput("../sample-files/Assurant-Sample.done");			

				AssurantMapToServiceLiveIntegrationDbObject.run(
						AssurantSource,
						java.sql.DriverManager.getConnection(
							"jdbc:odbc:SLIntegration",
							"supply_usr",
							"supply"),
						com.altova.CoreTypes.castToLong((String)mapArguments.get("integrationId")),
						com.altova.CoreTypes.castToLong((String)mapArguments.get("buyerResourceId")),
						java.sql.DriverManager.getConnection(
							"jdbc:odbc:SLIntegration",
							"supply_usr",
							"supply"));
			}



				jTraceTextArea.append("Finished\n");
			} catch (Exception ex) {
				jTraceTextArea.append("ERROR: " + ex.getMessage());
			}

			try {

			HSRNewRequestMapToServiceLiveIntegrationDb3 HSRNewRequestMapToServiceLiveIntegrationDb3Object = new HSRNewRequestMapToServiceLiveIntegrationDb3();

			Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
			Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");

			HSRNewRequestMapToServiceLiveIntegrationDb3Object.registerTraceTarget(ttc);
	
			if(!mapArguments.containsKey("integrationId"))
			{
				System.out.println("Missing argument integrationId");
				System.exit(1);
			}

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// HSRNewRequestMapToServiceLiveIntegrationDb3Object.setCloseObjectsAfterRun(false);

			{
				com.altova.io.Input HSRNewRequestSource = com.altova.io.StreamInput.createInput("../sample-files/HSR-NewRequest.txt");			

				HSRNewRequestMapToServiceLiveIntegrationDb3Object.run(
						HSRNewRequestSource,
						java.sql.DriverManager.getConnection(
							"jdbc:odbc:SLIntegration",
							"supply_usr",
							"supply"),
						com.altova.CoreTypes.castToLong((String)mapArguments.get("integrationId")),
						java.sql.DriverManager.getConnection(
							"jdbc:odbc:SLIntegration",
							"supply_usr",
							"supply"));
			}



				jTraceTextArea.append("Finished\n");
			} catch (Exception ex) {
				jTraceTextArea.append("ERROR: " + ex.getMessage());
			}

			try {

			HSRUpdateRequestMapToServiceLiveIntegrationDb5 HSRUpdateRequestMapToServiceLiveIntegrationDb5Object = new HSRUpdateRequestMapToServiceLiveIntegrationDb5();

			Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
			Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");

			HSRUpdateRequestMapToServiceLiveIntegrationDb5Object.registerTraceTarget(ttc);
	
			if(!mapArguments.containsKey("integrationId"))
			{
				System.out.println("Missing argument integrationId");
				System.exit(1);
			}

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// HSRUpdateRequestMapToServiceLiveIntegrationDb5Object.setCloseObjectsAfterRun(false);

			{
				com.altova.io.Input HSRUpdateRequestSource = com.altova.io.StreamInput.createInput("../sample-files/HSR-UpdateRequest2.txt");			

				HSRUpdateRequestMapToServiceLiveIntegrationDb5Object.run(
						HSRUpdateRequestSource,
						java.sql.DriverManager.getConnection(
							"jdbc:odbc:SLIntegration",
							"supply_usr",
							"supply"),
						com.altova.CoreTypes.castToLong((String)mapArguments.get("integrationId")),
						java.sql.DriverManager.getConnection(
							"jdbc:odbc:SLIntegration",
							"supply_usr",
							"supply"));
			}



				jTraceTextArea.append("Finished\n");
			} catch (Exception ex) {
				jTraceTextArea.append("ERROR: " + ex.getMessage());
			}

			try {

			NPSCallCloseMapToNPSCallCloseUpdate NPSCallCloseMapToNPSCallCloseUpdateObject = new NPSCallCloseMapToNPSCallCloseUpdate();

			Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");

			NPSCallCloseMapToNPSCallCloseUpdateObject.registerTraceTarget(ttc);
	
			if(!mapArguments.containsKey("batchId"))
			{
				System.out.println("Missing argument batchId");
				System.exit(1);
			}

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// NPSCallCloseMapToNPSCallCloseUpdateObject.setCloseObjectsAfterRun(false);

			{
				com.altova.io.Output NPSCallCloseUpdate2Target = new com.altova.io.FileOutput("NPSCallCloseUpdate.xml");

				NPSCallCloseMapToNPSCallCloseUpdateObject.run(
						java.sql.DriverManager.getConnection(
							"jdbc:odbc:SLIntegration",
							"supply_usr",
							"supply"),
						com.altova.CoreTypes.castToLong((String)mapArguments.get("batchId")),
						NPSCallCloseUpdate2Target);
			}



				jTraceTextArea.append("Finished\n");
			} catch (Exception ex) {
				jTraceTextArea.append("ERROR: " + ex.getMessage());
			}

			try {

			NPSCancellationMapToRI_Input NPSCancellationMapToRI_InputObject = new NPSCancellationMapToRI_Input();

			Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");

			NPSCancellationMapToRI_InputObject.registerTraceTarget(ttc);
	
			if(!mapArguments.containsKey("batchId"))
			{
				System.out.println("Missing argument batchId");
				System.exit(1);
			}

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// NPSCancellationMapToRI_InputObject.setCloseObjectsAfterRun(false);

			{
				com.altova.io.Output RI_Input2Target = new com.altova.io.FileOutput("../sample-files/RI-Sample.startProcessGW.xml");

				NPSCancellationMapToRI_InputObject.run(
						java.sql.DriverManager.getConnection(
							"jdbc:odbc:SLIntegration",
							"supply_usr",
							"supply"),
						com.altova.CoreTypes.castToLong((String)mapArguments.get("batchId")),
						RI_Input2Target);
			}



				jTraceTextArea.append("Finished\n");
			} catch (Exception ex) {
				jTraceTextArea.append("ERROR: " + ex.getMessage());
			}

			try {

			NPSCloseAuditMapToServiceLiveIntegrationDb8 NPSCloseAuditMapToServiceLiveIntegrationDb8Object = new NPSCloseAuditMapToServiceLiveIntegrationDb8();

			Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
			Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");

			NPSCloseAuditMapToServiceLiveIntegrationDb8Object.registerTraceTarget(ttc);
	
			if(!mapArguments.containsKey("integrationId"))
			{
				System.out.println("Missing argument integrationId");
				System.exit(1);
			}

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// NPSCloseAuditMapToServiceLiveIntegrationDb8Object.setCloseObjectsAfterRun(false);

			{
				com.altova.io.Input NPSCloseAudit_AUD2Source = com.altova.io.StreamInput.createInput("../../../../appl/sl/iss/13278-callclose.npsCallCloseAudit");

				NPSCloseAuditMapToServiceLiveIntegrationDb8Object.run(
						NPSCloseAudit_AUD2Source,
						java.sql.DriverManager.getConnection(
							"jdbc:odbc:SLIntegration",
							"supply_usr",
							"supply"),
						com.altova.CoreTypes.castToLong((String)mapArguments.get("integrationId")),
						java.sql.DriverManager.getConnection(
							"jdbc:odbc:SLIntegration",
							"supply_usr",
							"supply"));
			}



				jTraceTextArea.append("Finished\n");
			} catch (Exception ex) {
				jTraceTextArea.append("ERROR: " + ex.getMessage());
			}

			try {

			SearsRIMapToServiceLiveIntegrationDb9 SearsRIMapToServiceLiveIntegrationDb9Object = new SearsRIMapToServiceLiveIntegrationDb9();

			Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
			Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");

			SearsRIMapToServiceLiveIntegrationDb9Object.registerTraceTarget(ttc);
	
			if(!mapArguments.containsKey("integrationId"))
			{
				System.out.println("Missing argument integrationId");
				System.exit(1);
			}

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// SearsRIMapToServiceLiveIntegrationDb9Object.setCloseObjectsAfterRun(false);

			{
				com.altova.io.Input RI_Input3Source = com.altova.io.StreamInput.createInput("../sample-files/RI-Sample.startProcessGW.xml");

				SearsRIMapToServiceLiveIntegrationDb9Object.run(
						RI_Input3Source,
						java.sql.DriverManager.getConnection(
							"jdbc:odbc:SLIntegration",
							"supply_usr",
							"supply"),
						com.altova.CoreTypes.castToLong((String)mapArguments.get("integrationId")),
						java.sql.DriverManager.getConnection(
							"jdbc:odbc:SLIntegration",
							"supply_usr",
							"supply"));
			}



				jTraceTextArea.append("Finished\n");
			} catch (Exception ex) {
				jTraceTextArea.append("ERROR: " + ex.getMessage());
			}

			jStartButton.setEnabled(true);
		}
    }

	void jintegrationIdTextField2_actionPerformed( KeyEvent e ) {
		if ( e.getSource().equals( jintegrationIdTextField2 ) ) {
			String value = jintegrationIdTextField2.getText();
			if( value.length() != 0 )
				mapArguments.put( "integrationId", value );
			else {
				if( mapArguments.containsKey( "integrationId" ) )
					mapArguments.remove( "integrationId" );
			}
		}
	}

	void jbuyerResourceIdTextField3_actionPerformed( KeyEvent e ) {
		if ( e.getSource().equals( jbuyerResourceIdTextField3 ) ) {
			String value = jbuyerResourceIdTextField3.getText();
			if( value.length() != 0 )
				mapArguments.put( "buyerResourceId", value );
			else {
				if( mapArguments.containsKey( "buyerResourceId" ) )
					mapArguments.remove( "buyerResourceId" );
			}
		}
	}

	void jintegrationIdTextField7_actionPerformed( KeyEvent e ) {
		if ( e.getSource().equals( jintegrationIdTextField7 ) ) {
			String value = jintegrationIdTextField7.getText();
			if( value.length() != 0 )
				mapArguments.put( "integrationId", value );
			else {
				if( mapArguments.containsKey( "integrationId" ) )
					mapArguments.remove( "integrationId" );
			}
		}
	}

	void jintegrationIdTextField11_actionPerformed( KeyEvent e ) {
		if ( e.getSource().equals( jintegrationIdTextField11 ) ) {
			String value = jintegrationIdTextField11.getText();
			if( value.length() != 0 )
				mapArguments.put( "integrationId", value );
			else {
				if( mapArguments.containsKey( "integrationId" ) )
					mapArguments.remove( "integrationId" );
			}
		}
	}

	void jbatchIdTextField14_actionPerformed( KeyEvent e ) {
		if ( e.getSource().equals( jbatchIdTextField14 ) ) {
			String value = jbatchIdTextField14.getText();
			if( value.length() != 0 )
				mapArguments.put( "batchId", value );
			else {
				if( mapArguments.containsKey( "batchId" ) )
					mapArguments.remove( "batchId" );
			}
		}
	}

	void jbatchIdTextField17_actionPerformed( KeyEvent e ) {
		if ( e.getSource().equals( jbatchIdTextField17 ) ) {
			String value = jbatchIdTextField17.getText();
			if( value.length() != 0 )
				mapArguments.put( "batchId", value );
			else {
				if( mapArguments.containsKey( "batchId" ) )
					mapArguments.remove( "batchId" );
			}
		}
	}

	void jintegrationIdTextField21_actionPerformed( KeyEvent e ) {
		if ( e.getSource().equals( jintegrationIdTextField21 ) ) {
			String value = jintegrationIdTextField21.getText();
			if( value.length() != 0 )
				mapArguments.put( "integrationId", value );
			else {
				if( mapArguments.containsKey( "integrationId" ) )
					mapArguments.remove( "integrationId" );
			}
		}
	}

	void jintegrationIdTextField25_actionPerformed( KeyEvent e ) {
		if ( e.getSource().equals( jintegrationIdTextField25 ) ) {
			String value = jintegrationIdTextField25.getText();
			if( value.length() != 0 )
				mapArguments.put( "integrationId", value );
			else {
				if( mapArguments.containsKey( "integrationId" ) )
					mapArguments.remove( "integrationId" );
			}
		}
	}


	public void writeTrace(String info) {
		jTraceTextArea.append(info);
	}
}

class MarketServiceBus_Mapforce_CodeFrame_jStartButton_actionAdapter
	implements java.awt.event.ActionListener {
	MarketServiceBus_Mapforce_CodeFrame adaptee;

	MarketServiceBus_Mapforce_CodeFrame_jStartButton_actionAdapter(MarketServiceBus_Mapforce_CodeFrame adaptee) {
		this.adaptee = adaptee;
	}

	public void actionPerformed(ActionEvent e) {
		adaptee.jStartButton_actionPerformed(e);
	}
}


class MarketServiceBus_Mapforce_CodeFrame_jintegrationIdTextField2_keyAdapter
	implements java.awt.event.KeyListener {
	MarketServiceBus_Mapforce_CodeFrame adaptee;

	MarketServiceBus_Mapforce_CodeFrame_jintegrationIdTextField2_keyAdapter( MarketServiceBus_Mapforce_CodeFrame adaptee ) {
		this.adaptee = adaptee;
	}

	public void keyTyped( KeyEvent e ) {
		adaptee.jintegrationIdTextField2_actionPerformed( e );
	}

	public void keyPressed( KeyEvent e ) {
		adaptee.jintegrationIdTextField2_actionPerformed( e );
	}

	public void keyReleased( KeyEvent e ) {
		adaptee.jintegrationIdTextField2_actionPerformed( e );
	}

}


class MarketServiceBus_Mapforce_CodeFrame_jbuyerResourceIdTextField3_keyAdapter
	implements java.awt.event.KeyListener {
	MarketServiceBus_Mapforce_CodeFrame adaptee;

	MarketServiceBus_Mapforce_CodeFrame_jbuyerResourceIdTextField3_keyAdapter( MarketServiceBus_Mapforce_CodeFrame adaptee ) {
		this.adaptee = adaptee;
	}

	public void keyTyped( KeyEvent e ) {
		adaptee.jbuyerResourceIdTextField3_actionPerformed( e );
	}

	public void keyPressed( KeyEvent e ) {
		adaptee.jbuyerResourceIdTextField3_actionPerformed( e );
	}

	public void keyReleased( KeyEvent e ) {
		adaptee.jbuyerResourceIdTextField3_actionPerformed( e );
	}

}


class MarketServiceBus_Mapforce_CodeFrame_jintegrationIdTextField7_keyAdapter
	implements java.awt.event.KeyListener {
	MarketServiceBus_Mapforce_CodeFrame adaptee;

	MarketServiceBus_Mapforce_CodeFrame_jintegrationIdTextField7_keyAdapter( MarketServiceBus_Mapforce_CodeFrame adaptee ) {
		this.adaptee = adaptee;
	}

	public void keyTyped( KeyEvent e ) {
		adaptee.jintegrationIdTextField7_actionPerformed( e );
	}

	public void keyPressed( KeyEvent e ) {
		adaptee.jintegrationIdTextField7_actionPerformed( e );
	}

	public void keyReleased( KeyEvent e ) {
		adaptee.jintegrationIdTextField7_actionPerformed( e );
	}

}


class MarketServiceBus_Mapforce_CodeFrame_jintegrationIdTextField11_keyAdapter
	implements java.awt.event.KeyListener {
	MarketServiceBus_Mapforce_CodeFrame adaptee;

	MarketServiceBus_Mapforce_CodeFrame_jintegrationIdTextField11_keyAdapter( MarketServiceBus_Mapforce_CodeFrame adaptee ) {
		this.adaptee = adaptee;
	}

	public void keyTyped( KeyEvent e ) {
		adaptee.jintegrationIdTextField11_actionPerformed( e );
	}

	public void keyPressed( KeyEvent e ) {
		adaptee.jintegrationIdTextField11_actionPerformed( e );
	}

	public void keyReleased( KeyEvent e ) {
		adaptee.jintegrationIdTextField11_actionPerformed( e );
	}

}


class MarketServiceBus_Mapforce_CodeFrame_jbatchIdTextField14_keyAdapter
	implements java.awt.event.KeyListener {
	MarketServiceBus_Mapforce_CodeFrame adaptee;

	MarketServiceBus_Mapforce_CodeFrame_jbatchIdTextField14_keyAdapter( MarketServiceBus_Mapforce_CodeFrame adaptee ) {
		this.adaptee = adaptee;
	}

	public void keyTyped( KeyEvent e ) {
		adaptee.jbatchIdTextField14_actionPerformed( e );
	}

	public void keyPressed( KeyEvent e ) {
		adaptee.jbatchIdTextField14_actionPerformed( e );
	}

	public void keyReleased( KeyEvent e ) {
		adaptee.jbatchIdTextField14_actionPerformed( e );
	}

}


class MarketServiceBus_Mapforce_CodeFrame_jbatchIdTextField17_keyAdapter
	implements java.awt.event.KeyListener {
	MarketServiceBus_Mapforce_CodeFrame adaptee;

	MarketServiceBus_Mapforce_CodeFrame_jbatchIdTextField17_keyAdapter( MarketServiceBus_Mapforce_CodeFrame adaptee ) {
		this.adaptee = adaptee;
	}

	public void keyTyped( KeyEvent e ) {
		adaptee.jbatchIdTextField17_actionPerformed( e );
	}

	public void keyPressed( KeyEvent e ) {
		adaptee.jbatchIdTextField17_actionPerformed( e );
	}

	public void keyReleased( KeyEvent e ) {
		adaptee.jbatchIdTextField17_actionPerformed( e );
	}

}


class MarketServiceBus_Mapforce_CodeFrame_jintegrationIdTextField21_keyAdapter
	implements java.awt.event.KeyListener {
	MarketServiceBus_Mapforce_CodeFrame adaptee;

	MarketServiceBus_Mapforce_CodeFrame_jintegrationIdTextField21_keyAdapter( MarketServiceBus_Mapforce_CodeFrame adaptee ) {
		this.adaptee = adaptee;
	}

	public void keyTyped( KeyEvent e ) {
		adaptee.jintegrationIdTextField21_actionPerformed( e );
	}

	public void keyPressed( KeyEvent e ) {
		adaptee.jintegrationIdTextField21_actionPerformed( e );
	}

	public void keyReleased( KeyEvent e ) {
		adaptee.jintegrationIdTextField21_actionPerformed( e );
	}

}


class MarketServiceBus_Mapforce_CodeFrame_jintegrationIdTextField25_keyAdapter
	implements java.awt.event.KeyListener {
	MarketServiceBus_Mapforce_CodeFrame adaptee;

	MarketServiceBus_Mapforce_CodeFrame_jintegrationIdTextField25_keyAdapter( MarketServiceBus_Mapforce_CodeFrame adaptee ) {
		this.adaptee = adaptee;
	}

	public void keyTyped( KeyEvent e ) {
		adaptee.jintegrationIdTextField25_actionPerformed( e );
	}

	public void keyPressed( KeyEvent e ) {
		adaptee.jintegrationIdTextField25_actionPerformed( e );
	}

	public void keyReleased( KeyEvent e ) {
		adaptee.jintegrationIdTextField25_actionPerformed( e );
	}

}

