/**
 * SearsRIMapToServiceLiveIntegrationDb9.java
 *
 * This file was generated by MapForce 2011sp1.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package com.servicelive.esb.mapforce;

import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import com.altova.db.*;
import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edi.*;
import java.util.*;

public class SearsRIMapToServiceLiveIntegrationDb9 extends com.altova.TraceProvider 
{
	static class seq1_Main implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_instance_RI_Input;
		com.altova.db.Catalog var2_instance_ServiceLiveIntegrationDb__servicelive_integration_;
		long var3_param_integrationId;
	
		public seq1_Main(com.altova.mapforce.IMFNode var1_instance_RI_Input, com.altova.db.Catalog var2_instance_ServiceLiveIntegrationDb__servicelive_integration_, long var3_param_integrationId)
		{
			this.var1_instance_RI_Input = var1_instance_RI_Input;
			this.var2_instance_ServiceLiveIntegrationDb__servicelive_integration_ = var2_instance_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var3_param_integrationId = var3_param_integrationId;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_Main closure;
			com.altova.db.Statement var5_NewStatement;
			com.altova.functions.RuntimeContext var4_RuntimeContext;
			public Enumerator(seq1_Main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var5_NewStatement = com.altova.db.Dbs.newStatement(closure.var2_instance_ServiceLiveIntegrationDb__servicelive_integration_, 0, "SELECT `processingDelay`, `integrationId` FROM `integrations`");
				com.altova.db.Dbs.prepareStatement(var5_NewStatement);
				var4_RuntimeContext = com.altova.functions.RuntimeContext.construct();
				current = new MFElement("batches", "", null, (new seq2_content_batches(closure.var3_param_integrationId, closure.var1_instance_RI_Input, closure.var2_instance_ServiceLiveIntegrationDb__servicelive_integration_, var4_RuntimeContext)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.functions.RuntimeContext.dispose(var4_RuntimeContext);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq2_content_batches implements IEnumerable
	{
		long var1_integrationId;
		com.altova.mapforce.IMFNode var2_RI_Input;
		com.altova.db.Catalog var5_ServiceLiveIntegrationDb__servicelive_integration_;
		com.altova.functions.RuntimeContext var6_bv;
	
		public seq2_content_batches(long var1_integrationId, com.altova.mapforce.IMFNode var2_RI_Input, com.altova.db.Catalog var5_ServiceLiveIntegrationDb__servicelive_integration_, com.altova.functions.RuntimeContext var6_bv)
		{
			this.var1_integrationId = var1_integrationId;
			this.var2_RI_Input = var2_RI_Input;
			this.var5_ServiceLiveIntegrationDb__servicelive_integration_ = var5_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var6_bv = var6_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq2_content_batches closure;
			com.altova.mapforce.IEnumerable var4_select_InstallationServiceOrders;
			IEnumerator var3_map_select_InstallationServiceOrder;
			public Enumerator(seq2_content_batches closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var4_select_InstallationServiceOrders = new com.altova.functions.Core.SequenceCache((closure.var2_RI_Input).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "InstallationServiceOrders")));
				current = new MFAttribute("integrationId", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(closure.var1_integrationId)));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = new MFAttribute("fileName", "", null, com.altova.functions.Core.box(com.altova.functions.Core.documentURI(closure.var2_RI_Input)));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				current = new MFAttribute("statusId", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("1"))))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 8;				
				current = new MFAttribute("createdOn", "", null, com.altova.functions.Core.box(com.altova.functions.Lang.now()));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 13;				
				if (!(com.altova.functions.Core.exists(var4_select_InstallationServiceOrders))) {state = 0; return false; }
				var3_map_select_InstallationServiceOrder = (((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var4_select_InstallationServiceOrders)).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "InstallationServiceOrder"))).enumerator();
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 13;				
				if (!var3_map_select_InstallationServiceOrder.moveNext()) {state = 14; return false; }
				current = new MFElement("transactions", "", null, (new seq3_content_transactions(((com.altova.mapforce.IMFNode)(var3_map_select_InstallationServiceOrder.current())), closure.var5_ServiceLiveIntegrationDb__servicelive_integration_, closure.var1_integrationId, closure.var6_bv)));
				pos++;
				return true;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var3_map_select_InstallationServiceOrder.close(); var3_map_select_InstallationServiceOrder = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_map_select_InstallationServiceOrder.close(); var3_map_select_InstallationServiceOrder = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq3_content_transactions implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
		com.altova.db.Catalog var3_ServiceLiveIntegrationDb__servicelive_integration_;
		long var4_integrationId;
		com.altova.functions.RuntimeContext var6_bv;
	
		public seq3_content_transactions(com.altova.mapforce.IMFNode var1_bv, com.altova.db.Catalog var3_ServiceLiveIntegrationDb__servicelive_integration_, long var4_integrationId, com.altova.functions.RuntimeContext var6_bv)
		{
			this.var1_bv = var1_bv;
			this.var3_ServiceLiveIntegrationDb__servicelive_integration_ = var3_ServiceLiveIntegrationDb__servicelive_integration_;
			this.var4_integrationId = var4_integrationId;
			this.var6_bv = var6_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq3_content_transactions closure;
			IEnumerator var2_map_SELECT__processingDe;
			int var5_;
			public Enumerator(seq3_content_transactions closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 19:	if (moveNext_19()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				current = new MFAttribute("transactionTypeId", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt((Long)com.altova.functions.Core.first(com.servicelive.esb.mapforce.vmf.vmf5_inputtoresult.create(com.altova.functions.Core.toString((java.lang.String)com.altova.functions.Core.first((new seq4_if_equal(closure.var1_bv)))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = new MFAttribute("externalOrderNumber", "", null, com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ServiceUnitNumber")))), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ServiceOrderNumber")))))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				var2_map_SELECT__processingDe = ((new seq5__integrations_(closure.var3_ServiceLiveIntegrationDb__servicelive_integration_))).enumerator();
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 7;				
				if (!var2_map_SELECT__processingDe.moveNext()) {state = 8; return false; }
				if (!(com.altova.functions.Core.equal(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(closure.var4_integrationId)), com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(((com.altova.db.Record)(var2_map_SELECT__processingDe.current())), "integrationId")))))))) {state = 7; return false; }
				var5_ = com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("0"))));
				current = new MFAttribute("processAfter", "", null, com.altova.functions.Core.box(com.altova.functions.Lang.datetimeAdd(com.altova.functions.Lang.now(), com.altova.functions.Lang.durationFromParts(var5_, var5_, var5_, var5_, com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.longToInteger((Long)com.altova.functions.Core.first(com.altova.db.Dbs.readField(((com.altova.db.Record)(var2_map_SELECT__processingDe.current())), "processingDelay"))))), 0, new java.math.BigDecimal("0"), com.altova.CoreTypes.parseBoolean("0")))));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 18;				
				var2_map_SELECT__processingDe.close(); var2_map_SELECT__processingDe = null;
				current = new MFAttribute("createdOn", "", null, com.altova.functions.Core.box(com.altova.functions.Lang.now()));
				pos++;
				return true;
			}
			private boolean moveNext_18() throws Exception {
				state = 19;				
				current = new MFAttribute("statusId", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("3"))))));
				pos++;
				return true;
			}
			private boolean moveNext_19() throws Exception {
				state = 0;				
				current = new MFElement("serviceorders", "", null, (new seq7_content_serviceorders(closure.var1_bv, closure.var6_bv)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var2_map_SELECT__processingDe.close(); var2_map_SELECT__processingDe = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq4_if_equal implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq4_if_equal(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq4_if_equal closure;
			IEnumerator var2_return;
			public Enumerator(seq4_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.equal("NEW", com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "TransactionType"))))))) {state = 11; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "TransactionType"))));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 12;				
				var2_return = (com.servicelive.esb.mapforce.vmf.vmf4_inputtoresult.create(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ServiceOrderStatusCode")))))).enumerator();
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 12;				
				if (!var2_return.moveNext()) {state = 13; return false; }
				current = var2_return.current();
				pos++;
				return true;
			}
			private boolean moveNext_13() throws Exception {
				state = 0;				
				var2_return.close(); var2_return = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_return.close(); var2_return = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq6_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_;
	
		public seq6_NewQuery(com.altova.db.Catalog var2_ServiceLiveIntegrationDb__servicelive_integration_)
		{
			this.var2_ServiceLiveIntegrationDb__servicelive_integration_ = var2_ServiceLiveIntegrationDb__servicelive_integration_;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq6_NewQuery closure;
			com.altova.db.Statement var1_NewQuery;
			public Enumerator(seq6_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var1_NewQuery = com.altova.db.Dbs.newQuery(closure.var2_ServiceLiveIntegrationDb__servicelive_integration_, 0);
				current = com.altova.db.Dbs.executeQuery(var1_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var1_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq5__integrations_ implements IEnumerable
	{
		com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_;
	
		public seq5__integrations_(com.altova.db.Catalog var1_ServiceLiveIntegrationDb__servicelive_integration_)
		{
			this.var1_ServiceLiveIntegrationDb__servicelive_integration_ = var1_ServiceLiveIntegrationDb__servicelive_integration_;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq5__integrations_ closure;
			com.altova.db.ResultSetWrapper var3_NewQuery;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq5__integrations_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var3_NewQuery = (com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq6_NewQuery(closure.var1_ServiceLiveIntegrationDb__servicelive_integration_)));
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!(com.altova.db.Dbs.moveNextRecord(var3_NewQuery))) {state = 0; return false; }
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_long(var2_NewRecord, var3_NewQuery, "processingDelay");
				com.altova.db.Dbs.read_short(var2_NewRecord, var3_NewQuery, "integrationId");
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeRecordset(var3_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq7_content_serviceorders implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
		com.altova.functions.RuntimeContext var4_bv;
	
		public seq7_content_serviceorders(com.altova.mapforce.IMFNode var1_bv, com.altova.functions.RuntimeContext var4_bv)
		{
			this.var1_bv = var1_bv;
			this.var4_bv = var4_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq7_content_serviceorders closure;
			com.altova.mapforce.IMFNode var2_select_SalesCheck;
			IEnumerator var3_map_select_Message;
			IEnumerator var5_map_select_Item;
			IEnumerator var6_map_select_JobCode;
			public Enumerator(seq7_content_serviceorders closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 23:	if (moveNext_23()) return true; break;
					case 28:	if (moveNext_28()) return true; break;
					case 30:	if (moveNext_30()) return true; break;
					case 35:	if (moveNext_35()) return true; break;
					case 37:	if (moveNext_37()) return true; break;
					case 41:	if (moveNext_41()) return true; break;
					case 42:	if (moveNext_42()) return true; break;
					case 44:	if (moveNext_44()) return true; break;
					case 50:	if (moveNext_50()) return true; break;
					case 51:	if (moveNext_51()) return true; break;
					case 52:	if (moveNext_52()) return true; break;
					case 53:	if (moveNext_53()) return true; break;
					case 54:	if (moveNext_54()) return true; break;
					case 55:	if (moveNext_55()) return true; break;
					case 56:	if (moveNext_56()) return true; break;
					case 60:	if (moveNext_60()) return true; break;
					case 61:	if (moveNext_61()) return true; break;
					case 62:	if (moveNext_62()) return true; break;
					case 66:	if (moveNext_66()) return true; break;
					case 67:	if (moveNext_67()) return true; break;
					case 75:	if (moveNext_75()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				current = new MFAttribute("retailCancellationFee", "", null, com.altova.functions.Core.box(new java.math.BigDecimal("0")));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 7;				
				if (!((Boolean)com.altova.functions.Core.first((new seq8_if_exists(closure.var1_bv))))) {state = 7; return false; }
				var2_select_SalesCheck = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "SalesCheck")));
				current = new MFAttribute("providerInstructions", "", null, com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat((java.lang.String)com.altova.functions.Core.first((new seq9_if_exists(closure.var1_bv))), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Logistics")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "SpecialInstructions"))))), "Sales Check Information Number: "), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_SalesCheck).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Number"))))), " Date: "), com.altova.functions.Core.toString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_SalesCheck).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Date"))))), com.altova.functions.Core.stringJoin((new seq10_map_select_Item(closure.var1_bv)), com.altova.functions.Core.box("")))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 16;				
				if (!((Boolean)com.altova.functions.Core.first((new seq11_if_exists(closure.var1_bv))))) {state = 14; return false; }
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 23;				
				if (!((Boolean)com.altova.functions.Core.first((new seq18_if_exists(closure.var1_bv))))) {state = 21; return false; }
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 14;				
				current = new MFAttribute("serviceWindowStartDate", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq17_if_exists(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_21() throws Exception {
				state = 30;				
				if (!((Boolean)com.altova.functions.Core.first((new seq25_if_exists(closure.var1_bv))))) {state = 28; return false; }
				return false;
			}
			private boolean moveNext_23() throws Exception {
				state = 21;				
				current = new MFAttribute("serviceWindowStartTime", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq24_if_exists(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_28() throws Exception {
				state = 37;				
				if (!((Boolean)com.altova.functions.Core.first((new seq30_if_exists(closure.var1_bv))))) {state = 35; return false; }
				return false;
			}
			private boolean moveNext_30() throws Exception {
				state = 28;				
				current = new MFAttribute("serviceWindowEndDate", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq29_if_exists(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_35() throws Exception {
				state = 41;				
				current = new MFAttribute("templateName", "", null, com.altova.functions.Core.box(""));
				pos++;
				return true;
			}
			private boolean moveNext_37() throws Exception {
				state = 35;				
				current = new MFAttribute("serviceWindowEndTime", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq35_if_exists(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_41() throws Exception {
				state = 42;				
				current = new MFAttribute("nextDay", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.booleanToDecimal(com.altova.functions.Core.exists((new seq36_map_select_JobCode(closure.var1_bv)))))))));
				pos++;
				return true;
			}
			private boolean moveNext_42() throws Exception {
				state = 44;				
				if (!((Boolean)com.altova.functions.Core.first((new seq37_if_if_exists(closure.var1_bv))))) {state = 44; return false; }
				current = new MFAttribute("serviceWindowTypeFixed", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.booleanToDecimal(com.altova.functions.Core.logicalNot((Boolean)com.altova.functions.Core.first((new seq53_if_if_exists(closure.var1_bv))))))))));
				pos++;
				return true;
			}
			private boolean moveNext_44() throws Exception {
				state = 50;				
				current = new MFAttribute("externalStatus", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ServiceOrderStatusCode"))))));
				pos++;
				return true;
			}
			private boolean moveNext_50() throws Exception {
				state = 51;				
				current = new MFElement("contacts", "", null, (new seq59_content_contacts(closure.var1_bv)));
				pos++;
				return true;
			}
			private boolean moveNext_51() throws Exception {
				state = 52;				
				current = new MFElement("customrefs_oms", "", null, (new seq69_content_customrefs_oms(closure.var1_bv)));
				pos++;
				return true;
			}
			private boolean moveNext_52() throws Exception {
				state = 53;				
				current = new MFElement("locations", "", null, (new seq77_content_locations(closure.var1_bv)));
				pos++;
				return true;
			}
			private boolean moveNext_53() throws Exception {
				state = 54;				
				current = new MFElement("locations (2)", "", null, (new seq90_content_locations__2_(closure.var1_bv)));
				pos++;
				return true;
			}
			private boolean moveNext_54() throws Exception {
				state = 55;				
				var3_map_select_Message = (((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Messages")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Message"))).enumerator();
				return false;
			}
			private boolean moveNext_55() throws Exception {
				state = 55;				
				if (!var3_map_select_Message.moveNext()) {state = 56; return false; }
				current = new MFElement("notes", "", null, com.altova.functions.Core.box(new MFAttribute("text", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((((com.altova.mapforce.IMFNode)(var3_map_select_Message.current()))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Text"))))))));
				pos++;
				return true;
			}
			private boolean moveNext_56() throws Exception {
				state = 60;				
				var3_map_select_Message.close(); var3_map_select_Message = null;
				current = new MFElement("parts", "", null, (new seq91_content_parts(closure.var1_bv, closure.var4_bv)));
				pos++;
				return true;
			}
			private boolean moveNext_60() throws Exception {
				state = 61;				
				var5_map_select_Item = (((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "SalesCheck")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "SalesCheckItems")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Item"))).enumerator();
				return false;
			}
			private boolean moveNext_61() throws Exception {
				state = 61;				
				if (!var5_map_select_Item.moveNext()) {state = 62; return false; }
				current = new MFElement("sales_check_items", "", null, (new seq94_content_sales_check_items(((com.altova.mapforce.IMFNode)(var5_map_select_Item.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_62() throws Exception {
				state = 66;				
				var5_map_select_Item.close(); var5_map_select_Item = null;
				var6_map_select_JobCode = (((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCodes")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCode"))).enumerator();
				return false;
			}
			private boolean moveNext_66() throws Exception {
				state = 66;				
				if (!var6_map_select_JobCode.moveNext()) {state = 67; return false; }
				if (!(com.altova.functions.Core.equal("01000", com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((((com.altova.mapforce.IMFNode)(var6_map_select_JobCode.current()))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Number"))))))) {state = 75; return false; }
				return false;
			}
			private boolean moveNext_67() throws Exception {
				state = 0;				
				var6_map_select_JobCode.close(); var6_map_select_JobCode = null;
				return false;
			}
			private boolean moveNext_75() throws Exception {
				state = 66;				
				current = new MFElement("tasks", "", null, (new seq97_content_tasks(((com.altova.mapforce.IMFNode)(var6_map_select_JobCode.current())), closure.var1_bv)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var3_map_select_Message.close(); var3_map_select_Message = null;
				var5_map_select_Item.close(); var5_map_select_Item = null;
				var6_map_select_JobCode.close(); var6_map_select_JobCode = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq8_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq8_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq8_if_exists closure;
			boolean var2_exists;
			public Enumerator(seq8_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_exists = com.altova.functions.Core.exists(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Logistics")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ItemInstructions")));
				if (!(var2_exists)) {state = 11; return false; }
				current = var2_exists;
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq9_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq9_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq9_if_exists closure;
			com.altova.mapforce.IEnumerable var3_select_ItemInstructions;
			IEnumerator var2_map_select_ItemInstructions;
			public Enumerator(seq9_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 9;				
				var3_select_ItemInstructions = new com.altova.functions.Core.SequenceCache(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Logistics")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ItemInstructions")));
				if (!(com.altova.functions.Core.exists(var3_select_ItemInstructions))) {state = 15; return false; }
				var2_map_select_ItemInstructions = (var3_select_ItemInstructions).enumerator();
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 9;				
				if (!var2_map_select_ItemInstructions.moveNext()) {state = 10; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_map_select_ItemInstructions.current())));
				pos++;
				return true;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				var2_map_select_ItemInstructions.close(); var2_map_select_ItemInstructions = null;
				return false;
			}
			private boolean moveNext_15() throws Exception {
				state = 0;				
				current = "";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var2_map_select_ItemInstructions.close(); var2_map_select_ItemInstructions = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq10_map_select_Item implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq10_map_select_Item(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq10_map_select_Item closure;
			IEnumerator var1_map_select_Item;
			public Enumerator(seq10_map_select_Item closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_select_Item = (((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "SalesCheck")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "SalesCheckItems")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Item"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_select_Item.moveNext()) {state = 6; return false; }
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(" Division: ", com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((((com.altova.mapforce.IMFNode)(var1_map_select_Item.current()))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Division"))))), " Item Number: "), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((((com.altova.mapforce.IMFNode)(var1_map_select_Item.current()))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ItemNumber"))))), " Description: "), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((((com.altova.mapforce.IMFNode)(var1_map_select_Item.current()))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Description"))))), " Quantity: "), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((((com.altova.mapforce.IMFNode)(var1_map_select_Item.current()))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Quantity"))))), " Gift Flag: "), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((((com.altova.mapforce.IMFNode)(var1_map_select_Item.current()))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "GiftFlag"))))), " Gift Date: "), com.altova.functions.Core.toString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((((com.altova.mapforce.IMFNode)(var1_map_select_Item.current()))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "GiftDate"))))), com.altova.functions.Core.charFromCode(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("13")))), com.altova.functions.Core.charFromCode(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("10"))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_select_Item.close(); var1_map_select_Item = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_select_Item.close(); var1_map_select_Item = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq11_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq11_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq11_if_exists closure;
			java.lang.String var2_;
			public Enumerator(seq11_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists((new seq12_map_select_JobCode(closure.var1_bv))))) {state = 11; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq13_if_exists(closure.var1_bv))))) {state = 25; return false; }
				var2_ = com.altova.CoreTypes.dateToString(com.altova.CoreTypes.parseDate(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "OriginalScheduledDate"))))));
				if (!(com.altova.functions.Core.logicalAnd(com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_)), com.altova.functions.Core.equal(var2_, "1111-11-11"))), (Boolean)com.altova.functions.Core.first((new seq15_if_exists(closure.var1_bv)))))) {state = 22; return false; }
				current = com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				pos++;
				return true;
			}
			private boolean moveNext_22() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_25() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq12_map_select_JobCode implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq12_map_select_JobCode(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq12_map_select_JobCode closure;
			IEnumerator var1_map_select_JobCode;
			public Enumerator(seq12_map_select_JobCode closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_select_JobCode = (((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCodes")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCode"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_select_JobCode.moveNext()) {state = 6; return false; }
				if (!(com.altova.functions.Core.equal("01000", com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((((com.altova.mapforce.IMFNode)(var1_map_select_JobCode.current()))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Number"))))))) {state = 5; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_select_JobCode.close(); var1_map_select_JobCode = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_select_JobCode.close(); var1_map_select_JobCode = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq13_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq13_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq13_if_exists closure;
			boolean var2_exists;
			public Enumerator(seq13_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_exists = com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				if (!(var2_exists)) {state = 18; return false; }
				if (!((Boolean)com.altova.functions.Core.first((new seq14_if_exists(closure.var1_bv))))) {state = 15; return false; }
				current = var2_exists;
				pos++;
				return true;
			}
			private boolean moveNext_15() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}
			private boolean moveNext_18() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq14_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq14_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq14_if_exists closure;
			boolean var2_exists;
			public Enumerator(seq14_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_exists = com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				if (!(var2_exists)) {state = 11; return false; }
				current = var2_exists;
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq15_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq15_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq15_if_exists closure;
			com.altova.mapforce.IEnumerable var3_select_PromisedDate;
			boolean var2_exists;
			public Enumerator(seq15_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 23:	if (moveNext_23()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_PromisedDate = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				var2_exists = com.altova.functions.Core.exists(var3_select_PromisedDate);
				if (!(var2_exists)) {state = 23; return false; }
				if (!((Boolean)com.altova.functions.Core.first((new seq14_if_exists(closure.var1_bv))))) {state = 0; return false; }
				if (!(var2_exists)) {state = 0; return false; }
				current = com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr((Boolean)com.altova.functions.Core.first((new seq16_if_exists(closure.var1_bv))), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_PromisedDate)), "1111-11-11")));
				pos++;
				return true;
			}
			private boolean moveNext_23() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq16_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq16_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq16_if_exists closure;
			com.altova.mapforce.IEnumerable var3_select_PromisedDate;
			boolean var2_exists;
			public Enumerator(seq16_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_PromisedDate = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				var2_exists = com.altova.functions.Core.exists(var3_select_PromisedDate);
				if (!(var2_exists)) {state = 17; return false; }
				if (!(var2_exists)) {state = 0; return false; }
				current = com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_PromisedDate))));
				pos++;
				return true;
			}
			private boolean moveNext_17() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq17_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq17_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq17_if_exists closure;
			com.altova.types.DateTime var2_now;
			java.lang.String var3_;
			IEnumerator var4_map_select_PromisedDate;
			com.altova.mapforce.IMFNode var7_select_Order;
			com.altova.mapforce.IMFNode var5_select_DeliveryDate;
			com.altova.types.DateTime var6_now;
			public Enumerator(seq17_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
					case 33:	if (moveNext_33()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists((new seq12_map_select_JobCode(closure.var1_bv))))) {state = 11; return false; }
				var2_now = com.altova.functions.Lang.now();
				current = com.altova.CoreTypes.dateToString((com.altova.types.DateTime)com.altova.functions.Core.first(com.altova.functions.Core.box(com.altova.functions.Lang.dateFromDatetime(com.altova.functions.Lang.datetimeFromParts(com.altova.functions.Lang.yearFromDatetime(var2_now), com.altova.functions.Lang.monthFromDatetime(var2_now), com.altova.functions.Lang.dayFromDatetime(var2_now), 0, 0, 0, new java.math.BigDecimal("0"), -32768)))));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 20;				
				if (!((Boolean)com.altova.functions.Core.first((new seq13_if_exists(closure.var1_bv))))) {state = 0; return false; }
				var3_ = com.altova.CoreTypes.dateToString(com.altova.CoreTypes.parseDate(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "OriginalScheduledDate"))))));
				if (!(com.altova.functions.Core.logicalAnd(com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var3_)), com.altova.functions.Core.equal(var3_, "1111-11-11"))), (Boolean)com.altova.functions.Core.first((new seq15_if_exists(closure.var1_bv)))))) {state = 25; return false; }
				var4_map_select_PromisedDate = ((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate"))).enumerator();
				return false;
			}
			private boolean moveNext_20() throws Exception {
				state = 20;				
				if (!var4_map_select_PromisedDate.moveNext()) {state = 21; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var4_map_select_PromisedDate.current())));
				pos++;
				return true;
			}
			private boolean moveNext_21() throws Exception {
				state = 0;				
				var4_map_select_PromisedDate.close(); var4_map_select_PromisedDate = null;
				return false;
			}
			private boolean moveNext_25() throws Exception {
				state = 0;				
				var7_select_Order = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Logistics")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order")));
				var5_select_DeliveryDate = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var7_select_Order).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "DeliveryDate")));
				if (!(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString(var5_select_DeliveryDate))), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString(var5_select_DeliveryDate), "1111-11-11")))) {state = 33; return false; }
				var6_now = com.altova.functions.Lang.now();
				current = com.altova.CoreTypes.dateToString((com.altova.types.DateTime)com.altova.functions.Core.first(com.altova.functions.Core.box(com.altova.functions.Lang.dateFromDatetime(com.altova.functions.Lang.datetimeFromParts(com.altova.functions.Lang.yearFromDatetime(var6_now), com.altova.functions.Lang.monthFromDatetime(var6_now), com.altova.functions.Lang.dayFromDatetime(var6_now), 0, 0, 0, new java.math.BigDecimal("0"), -32768)))));
				pos++;
				return true;
			}
			private boolean moveNext_33() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var7_select_Order).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "DeliveryDate"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var4_map_select_PromisedDate.close(); var4_map_select_PromisedDate = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq18_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq18_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq18_if_exists closure;
			java.lang.String var2_;
			public Enumerator(seq18_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 26:	if (moveNext_26()) return true; break;
					case 29:	if (moveNext_29()) return true; break;
					case 32:	if (moveNext_32()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists((new seq19_map_select_JobCode(closure.var1_bv))))) {state = 11; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq13_if_exists(closure.var1_bv))))) {state = 32; return false; }
				if (!((Boolean)com.altova.functions.Core.first((new seq20_if_exists(closure.var1_bv))))) {state = 29; return false; }
				var2_ = com.altova.CoreTypes.dateToString(com.altova.CoreTypes.parseDate(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "OriginalScheduledDate"))))));
				if (!(com.altova.functions.Core.logicalAnd(com.altova.functions.Core.logicalAnd(com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_)), com.altova.functions.Core.equal(var2_, "1111-11-11"))), (Boolean)com.altova.functions.Core.first((new seq21_if_exists(closure.var1_bv)))), com.altova.functions.Core.logicalNot((Boolean)com.altova.functions.Core.first((new seq23_if_exists(closure.var1_bv))))))) {state = 26; return false; }
				current = com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedTimeFrom")));
				pos++;
				return true;
			}
			private boolean moveNext_26() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_29() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}
			private boolean moveNext_32() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq19_map_select_JobCode implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq19_map_select_JobCode(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq19_map_select_JobCode closure;
			IEnumerator var1_map_select_JobCode;
			public Enumerator(seq19_map_select_JobCode closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_select_JobCode = (((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCodes")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCode"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_select_JobCode.moveNext()) {state = 6; return false; }
				if (!(com.altova.functions.Core.equal("01000", com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((((com.altova.mapforce.IMFNode)(var1_map_select_JobCode.current()))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Number"))))))) {state = 5; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_select_JobCode.close(); var1_map_select_JobCode = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_select_JobCode.close(); var1_map_select_JobCode = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq20_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq20_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq20_if_exists closure;
			boolean var2_exists;
			public Enumerator(seq20_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_exists = com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedTimeFrom")));
				if (!(var2_exists)) {state = 11; return false; }
				current = var2_exists;
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq21_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq21_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq21_if_exists closure;
			com.altova.mapforce.IEnumerable var3_select_PromisedDate;
			boolean var2_exists;
			public Enumerator(seq21_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 23:	if (moveNext_23()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_PromisedDate = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				var2_exists = com.altova.functions.Core.exists(var3_select_PromisedDate);
				if (!(var2_exists)) {state = 23; return false; }
				if (!((Boolean)com.altova.functions.Core.first((new seq14_if_exists(closure.var1_bv))))) {state = 0; return false; }
				if (!(var2_exists)) {state = 0; return false; }
				current = com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr((Boolean)com.altova.functions.Core.first((new seq22_if_exists(closure.var1_bv))), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_PromisedDate)), "1111-11-11")));
				pos++;
				return true;
			}
			private boolean moveNext_23() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq22_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq22_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq22_if_exists closure;
			com.altova.mapforce.IEnumerable var3_select_PromisedDate;
			boolean var2_exists;
			public Enumerator(seq22_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_PromisedDate = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				var2_exists = com.altova.functions.Core.exists(var3_select_PromisedDate);
				if (!(var2_exists)) {state = 17; return false; }
				if (!(var2_exists)) {state = 0; return false; }
				current = com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_PromisedDate))));
				pos++;
				return true;
			}
			private boolean moveNext_17() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq23_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq23_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq23_if_exists closure;
			com.altova.mapforce.IEnumerable var3_select_PromisedTimeFrom;
			boolean var2_exists;
			public Enumerator(seq23_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_PromisedTimeFrom = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedTimeFrom")));
				var2_exists = com.altova.functions.Core.exists(var3_select_PromisedTimeFrom);
				if (!(var2_exists)) {state = 17; return false; }
				if (!(var2_exists)) {state = 0; return false; }
				current = com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_PromisedTimeFrom))));
				pos++;
				return true;
			}
			private boolean moveNext_17() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq24_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq24_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq24_if_exists closure;
			java.lang.String var2_;
			IEnumerator var3_map_select_PromisedTimeFrom;
			public Enumerator(seq24_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
					case 30:	if (moveNext_30()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists((new seq19_map_select_JobCode(closure.var1_bv))))) {state = 11; return false; }
				current = "08:00 AM";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 24;				
				if (!((Boolean)com.altova.functions.Core.first((new seq13_if_exists(closure.var1_bv))))) {state = 0; return false; }
				if (!((Boolean)com.altova.functions.Core.first((new seq20_if_exists(closure.var1_bv))))) {state = 0; return false; }
				var2_ = com.altova.CoreTypes.dateToString(com.altova.CoreTypes.parseDate(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "OriginalScheduledDate"))))));
				if (!(com.altova.functions.Core.logicalAnd(com.altova.functions.Core.logicalAnd(com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_)), com.altova.functions.Core.equal(var2_, "1111-11-11"))), (Boolean)com.altova.functions.Core.first((new seq21_if_exists(closure.var1_bv)))), com.altova.functions.Core.logicalNot((Boolean)com.altova.functions.Core.first((new seq23_if_exists(closure.var1_bv))))))) {state = 30; return false; }
				var3_map_select_PromisedTimeFrom = ((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedTimeFrom"))).enumerator();
				return false;
			}
			private boolean moveNext_24() throws Exception {
				state = 24;				
				if (!var3_map_select_PromisedTimeFrom.moveNext()) {state = 25; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var3_map_select_PromisedTimeFrom.current())));
				pos++;
				return true;
			}
			private boolean moveNext_25() throws Exception {
				state = 0;				
				var3_map_select_PromisedTimeFrom.close(); var3_map_select_PromisedTimeFrom = null;
				return false;
			}
			private boolean moveNext_30() throws Exception {
				state = 0;				
				current = "08:00 AM";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var3_map_select_PromisedTimeFrom.close(); var3_map_select_PromisedTimeFrom = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq25_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq25_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq25_if_exists closure;
			java.lang.String var2_;
			com.altova.mapforce.IMFNode var3_select_DeliveryDate;
			public Enumerator(seq25_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists((new seq26_map_select_JobCode(closure.var1_bv))))) {state = 11; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq13_if_exists(closure.var1_bv))))) {state = 25; return false; }
				var2_ = com.altova.CoreTypes.dateToString(com.altova.CoreTypes.parseDate(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "OriginalScheduledDate"))))));
				if (!(com.altova.functions.Core.logicalAnd(com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_)), com.altova.functions.Core.equal(var2_, "1111-11-11"))), (Boolean)com.altova.functions.Core.first((new seq27_if_exists(closure.var1_bv)))))) {state = 21; return false; }
				current = com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				pos++;
				return true;
			}
			private boolean moveNext_21() throws Exception {
				state = 0;				
				var3_select_DeliveryDate = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Logistics")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "DeliveryDate")));
				current = com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString(var3_select_DeliveryDate))), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString(var3_select_DeliveryDate), "1111-11-11"));
				pos++;
				return true;
			}
			private boolean moveNext_25() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq26_map_select_JobCode implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq26_map_select_JobCode(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq26_map_select_JobCode closure;
			IEnumerator var1_map_select_JobCode;
			public Enumerator(seq26_map_select_JobCode closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_select_JobCode = (((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCodes")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCode"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_select_JobCode.moveNext()) {state = 6; return false; }
				if (!(com.altova.functions.Core.equal("01000", com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((((com.altova.mapforce.IMFNode)(var1_map_select_JobCode.current()))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Number"))))))) {state = 5; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_select_JobCode.close(); var1_map_select_JobCode = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_select_JobCode.close(); var1_map_select_JobCode = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq27_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq27_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq27_if_exists closure;
			com.altova.mapforce.IEnumerable var3_select_PromisedDate;
			boolean var2_exists;
			public Enumerator(seq27_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 23:	if (moveNext_23()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_PromisedDate = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				var2_exists = com.altova.functions.Core.exists(var3_select_PromisedDate);
				if (!(var2_exists)) {state = 23; return false; }
				if (!((Boolean)com.altova.functions.Core.first((new seq14_if_exists(closure.var1_bv))))) {state = 0; return false; }
				if (!(var2_exists)) {state = 0; return false; }
				current = com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr((Boolean)com.altova.functions.Core.first((new seq28_if_exists(closure.var1_bv))), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_PromisedDate)), "1111-11-11")));
				pos++;
				return true;
			}
			private boolean moveNext_23() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq28_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq28_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq28_if_exists closure;
			com.altova.mapforce.IEnumerable var3_select_PromisedDate;
			boolean var2_exists;
			public Enumerator(seq28_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_PromisedDate = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				var2_exists = com.altova.functions.Core.exists(var3_select_PromisedDate);
				if (!(var2_exists)) {state = 17; return false; }
				if (!(var2_exists)) {state = 0; return false; }
				current = com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_PromisedDate))));
				pos++;
				return true;
			}
			private boolean moveNext_17() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq29_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq29_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq29_if_exists closure;
			com.altova.types.DateTime var2_now;
			java.lang.String var3_;
			IEnumerator var4_map_select_PromisedDate;
			com.altova.mapforce.IMFNode var5_select_DeliveryDate;
			com.altova.types.DateTime var6_now;
			public Enumerator(seq29_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists((new seq26_map_select_JobCode(closure.var1_bv))))) {state = 11; return false; }
				var2_now = com.altova.functions.Lang.now();
				current = com.altova.CoreTypes.dateToString((com.altova.types.DateTime)com.altova.functions.Core.first(com.altova.functions.Core.box(com.altova.functions.Lang.dateFromDatetime(com.altova.functions.Lang.datetimeFromParts(com.altova.functions.Lang.yearFromDatetime(var2_now), com.altova.functions.Lang.monthFromDatetime(var2_now), com.altova.functions.Lang.dayFromDatetime(var2_now), 0, 0, 0, new java.math.BigDecimal("0"), -32768)))));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 20;				
				if (!((Boolean)com.altova.functions.Core.first((new seq13_if_exists(closure.var1_bv))))) {state = 0; return false; }
				var3_ = com.altova.CoreTypes.dateToString(com.altova.CoreTypes.parseDate(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "OriginalScheduledDate"))))));
				if (!(com.altova.functions.Core.logicalAnd(com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var3_)), com.altova.functions.Core.equal(var3_, "1111-11-11"))), (Boolean)com.altova.functions.Core.first((new seq27_if_exists(closure.var1_bv)))))) {state = 25; return false; }
				var4_map_select_PromisedDate = ((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate"))).enumerator();
				return false;
			}
			private boolean moveNext_20() throws Exception {
				state = 20;				
				if (!var4_map_select_PromisedDate.moveNext()) {state = 21; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var4_map_select_PromisedDate.current())));
				pos++;
				return true;
			}
			private boolean moveNext_21() throws Exception {
				state = 0;				
				var4_map_select_PromisedDate.close(); var4_map_select_PromisedDate = null;
				return false;
			}
			private boolean moveNext_25() throws Exception {
				state = 0;				
				var5_select_DeliveryDate = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Logistics")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "DeliveryDate")));
				if (!(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString(var5_select_DeliveryDate))), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString(var5_select_DeliveryDate), "1111-11-11")))) {state = 0; return false; }
				var6_now = com.altova.functions.Lang.now();
				current = com.altova.CoreTypes.dateToString((com.altova.types.DateTime)com.altova.functions.Core.first(com.altova.functions.Core.box(com.altova.functions.Lang.dateFromDatetime(com.altova.functions.Lang.datetimeFromParts(com.altova.functions.Lang.yearFromDatetime(var6_now), com.altova.functions.Lang.monthFromDatetime(var6_now), com.altova.functions.Lang.dayFromDatetime(var6_now), 0, 0, 0, new java.math.BigDecimal("0"), -32768)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var4_map_select_PromisedDate.close(); var4_map_select_PromisedDate = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq30_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq30_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq30_if_exists closure;
			java.lang.String var2_;
			boolean var3_logical_and;
			com.altova.mapforce.IMFNode var4_select_DeliveryDate;
			public Enumerator(seq30_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 26:	if (moveNext_26()) return true; break;
					case 32:	if (moveNext_32()) return true; break;
					case 36:	if (moveNext_36()) return true; break;
					case 39:	if (moveNext_39()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists((new seq31_map_select_JobCode(closure.var1_bv))))) {state = 11; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq13_if_exists(closure.var1_bv))))) {state = 39; return false; }
				if (!((Boolean)com.altova.functions.Core.first((new seq20_if_exists(closure.var1_bv))))) {state = 36; return false; }
				var2_ = com.altova.CoreTypes.dateToString(com.altova.CoreTypes.parseDate(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "OriginalScheduledDate"))))));
				var3_logical_and = com.altova.functions.Core.logicalAnd(com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_)), com.altova.functions.Core.equal(var2_, "1111-11-11"))), (Boolean)com.altova.functions.Core.first((new seq32_if_exists(closure.var1_bv))));
				if (!(com.altova.functions.Core.logicalAnd(var3_logical_and, com.altova.functions.Core.logicalNot((Boolean)com.altova.functions.Core.first((new seq34_if_exists(closure.var1_bv))))))) {state = 26; return false; }
				current = com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedTimeTo")));
				pos++;
				return true;
			}
			private boolean moveNext_26() throws Exception {
				state = 0;				
				if (!(var3_logical_and)) {state = 32; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_32() throws Exception {
				state = 0;				
				var4_select_DeliveryDate = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Logistics")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "DeliveryDate")));
				current = com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString(var4_select_DeliveryDate))), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString(var4_select_DeliveryDate), "1111-11-11"));
				pos++;
				return true;
			}
			private boolean moveNext_36() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}
			private boolean moveNext_39() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq31_map_select_JobCode implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq31_map_select_JobCode(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq31_map_select_JobCode closure;
			IEnumerator var1_map_select_JobCode;
			public Enumerator(seq31_map_select_JobCode closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_select_JobCode = (((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCodes")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCode"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_select_JobCode.moveNext()) {state = 6; return false; }
				if (!(com.altova.functions.Core.equal("01000", com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((((com.altova.mapforce.IMFNode)(var1_map_select_JobCode.current()))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Number"))))))) {state = 5; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_select_JobCode.close(); var1_map_select_JobCode = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_select_JobCode.close(); var1_map_select_JobCode = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq32_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq32_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq32_if_exists closure;
			com.altova.mapforce.IEnumerable var3_select_PromisedDate;
			boolean var2_exists;
			public Enumerator(seq32_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 23:	if (moveNext_23()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_PromisedDate = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				var2_exists = com.altova.functions.Core.exists(var3_select_PromisedDate);
				if (!(var2_exists)) {state = 23; return false; }
				if (!((Boolean)com.altova.functions.Core.first((new seq14_if_exists(closure.var1_bv))))) {state = 0; return false; }
				if (!(var2_exists)) {state = 0; return false; }
				current = com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr((Boolean)com.altova.functions.Core.first((new seq33_if_exists(closure.var1_bv))), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_PromisedDate)), "1111-11-11")));
				pos++;
				return true;
			}
			private boolean moveNext_23() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq33_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq33_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq33_if_exists closure;
			com.altova.mapforce.IEnumerable var3_select_PromisedDate;
			boolean var2_exists;
			public Enumerator(seq33_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_PromisedDate = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				var2_exists = com.altova.functions.Core.exists(var3_select_PromisedDate);
				if (!(var2_exists)) {state = 17; return false; }
				if (!(var2_exists)) {state = 0; return false; }
				current = com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_PromisedDate))));
				pos++;
				return true;
			}
			private boolean moveNext_17() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq34_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq34_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq34_if_exists closure;
			com.altova.mapforce.IEnumerable var3_select_PromisedTimeFrom;
			boolean var2_exists;
			public Enumerator(seq34_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_PromisedTimeFrom = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedTimeFrom")));
				var2_exists = com.altova.functions.Core.exists(var3_select_PromisedTimeFrom);
				if (!(var2_exists)) {state = 17; return false; }
				if (!(var2_exists)) {state = 0; return false; }
				current = com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_PromisedTimeFrom))));
				pos++;
				return true;
			}
			private boolean moveNext_17() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq35_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq35_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq35_if_exists closure;
			java.lang.String var2_;
			boolean var4_logical_and;
			IEnumerator var3_map_select_PromisedTimeTo;
			com.altova.mapforce.IMFNode var5_select_DeliveryDate;
			public Enumerator(seq35_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
					case 30:	if (moveNext_30()) return true; break;
					case 36:	if (moveNext_36()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists((new seq31_map_select_JobCode(closure.var1_bv))))) {state = 11; return false; }
				current = "05:00 PM";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 24;				
				if (!((Boolean)com.altova.functions.Core.first((new seq13_if_exists(closure.var1_bv))))) {state = 0; return false; }
				if (!((Boolean)com.altova.functions.Core.first((new seq20_if_exists(closure.var1_bv))))) {state = 0; return false; }
				var2_ = com.altova.CoreTypes.dateToString(com.altova.CoreTypes.parseDate(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "OriginalScheduledDate"))))));
				var4_logical_and = com.altova.functions.Core.logicalAnd(com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_)), com.altova.functions.Core.equal(var2_, "1111-11-11"))), (Boolean)com.altova.functions.Core.first((new seq32_if_exists(closure.var1_bv))));
				if (!(com.altova.functions.Core.logicalAnd(var4_logical_and, com.altova.functions.Core.logicalNot((Boolean)com.altova.functions.Core.first((new seq34_if_exists(closure.var1_bv))))))) {state = 30; return false; }
				var3_map_select_PromisedTimeTo = ((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedTimeTo"))).enumerator();
				return false;
			}
			private boolean moveNext_24() throws Exception {
				state = 24;				
				if (!var3_map_select_PromisedTimeTo.moveNext()) {state = 25; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var3_map_select_PromisedTimeTo.current())));
				pos++;
				return true;
			}
			private boolean moveNext_25() throws Exception {
				state = 0;				
				var3_map_select_PromisedTimeTo.close(); var3_map_select_PromisedTimeTo = null;
				return false;
			}
			private boolean moveNext_30() throws Exception {
				state = 0;				
				if (!(var4_logical_and)) {state = 36; return false; }
				current = "05:00 PM";
				pos++;
				return true;
			}
			private boolean moveNext_36() throws Exception {
				state = 0;				
				var5_select_DeliveryDate = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Logistics")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "DeliveryDate")));
				if (!(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString(var5_select_DeliveryDate))), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString(var5_select_DeliveryDate), "1111-11-11")))) {state = 0; return false; }
				current = "05:00 PM";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var3_map_select_PromisedTimeTo.close(); var3_map_select_PromisedTimeTo = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq36_map_select_JobCode implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq36_map_select_JobCode(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq36_map_select_JobCode closure;
			IEnumerator var1_map_select_JobCode;
			public Enumerator(seq36_map_select_JobCode closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_select_JobCode = (((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCodes")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCode"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_select_JobCode.moveNext()) {state = 6; return false; }
				if (!(com.altova.functions.Core.equal("01000", com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((((com.altova.mapforce.IMFNode)(var1_map_select_JobCode.current()))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Number"))))))) {state = 5; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_select_JobCode.close(); var1_map_select_JobCode = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_select_JobCode.close(); var1_map_select_JobCode = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq37_if_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq37_if_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq37_if_if_exists closure;
			java.lang.String var2_;
			com.altova.mapforce.IMFNode var3_select_DeliveryDate;
			public Enumerator(seq37_if_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 32:	if (moveNext_32()) return true; break;
					case 36:	if (moveNext_36()) return true; break;
					case 39:	if (moveNext_39()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq38_if_exists(closure.var1_bv))))) {state = 11; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq42_if_if_exists(closure.var1_bv))))) {state = 39; return false; }
				if (!(com.altova.functions.Core.exists((new seq50_map_select_JobCode(closure.var1_bv))))) {state = 22; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_22() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq13_if_exists(closure.var1_bv))))) {state = 36; return false; }
				var2_ = com.altova.CoreTypes.dateToString(com.altova.CoreTypes.parseDate(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "OriginalScheduledDate"))))));
				if (!(com.altova.functions.Core.logicalAnd(com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_)), com.altova.functions.Core.equal(var2_, "1111-11-11"))), (Boolean)com.altova.functions.Core.first((new seq51_if_exists(closure.var1_bv)))))) {state = 32; return false; }
				current = com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				pos++;
				return true;
			}
			private boolean moveNext_32() throws Exception {
				state = 0;				
				var3_select_DeliveryDate = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Logistics")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "DeliveryDate")));
				current = com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString(var3_select_DeliveryDate))), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString(var3_select_DeliveryDate), "1111-11-11"));
				pos++;
				return true;
			}
			private boolean moveNext_36() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}
			private boolean moveNext_39() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq38_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq38_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq38_if_exists closure;
			java.lang.String var2_;
			com.altova.mapforce.IMFNode var3_select_DeliveryDate;
			public Enumerator(seq38_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists((new seq39_map_select_JobCode(closure.var1_bv))))) {state = 11; return false; }
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq13_if_exists(closure.var1_bv))))) {state = 25; return false; }
				var2_ = com.altova.CoreTypes.dateToString(com.altova.CoreTypes.parseDate(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "OriginalScheduledDate"))))));
				if (!(com.altova.functions.Core.logicalAnd(com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_)), com.altova.functions.Core.equal(var2_, "1111-11-11"))), (Boolean)com.altova.functions.Core.first((new seq40_if_exists(closure.var1_bv)))))) {state = 21; return false; }
				current = com.altova.functions.Core.logicalNot(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate"))));
				pos++;
				return true;
			}
			private boolean moveNext_21() throws Exception {
				state = 0;				
				var3_select_DeliveryDate = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Logistics")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "DeliveryDate")));
				current = com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString(var3_select_DeliveryDate))), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString(var3_select_DeliveryDate), "1111-11-11")));
				pos++;
				return true;
			}
			private boolean moveNext_25() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq39_map_select_JobCode implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq39_map_select_JobCode(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq39_map_select_JobCode closure;
			IEnumerator var1_map_select_JobCode;
			public Enumerator(seq39_map_select_JobCode closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_select_JobCode = (((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCodes")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCode"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_select_JobCode.moveNext()) {state = 6; return false; }
				if (!(com.altova.functions.Core.equal("01000", com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((((com.altova.mapforce.IMFNode)(var1_map_select_JobCode.current()))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Number"))))))) {state = 5; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_select_JobCode.close(); var1_map_select_JobCode = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_select_JobCode.close(); var1_map_select_JobCode = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq40_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq40_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq40_if_exists closure;
			com.altova.mapforce.IEnumerable var3_select_PromisedDate;
			boolean var2_exists;
			public Enumerator(seq40_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 23:	if (moveNext_23()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_PromisedDate = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				var2_exists = com.altova.functions.Core.exists(var3_select_PromisedDate);
				if (!(var2_exists)) {state = 23; return false; }
				if (!((Boolean)com.altova.functions.Core.first((new seq14_if_exists(closure.var1_bv))))) {state = 0; return false; }
				if (!(var2_exists)) {state = 0; return false; }
				current = com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr((Boolean)com.altova.functions.Core.first((new seq41_if_exists(closure.var1_bv))), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_PromisedDate)), "1111-11-11")));
				pos++;
				return true;
			}
			private boolean moveNext_23() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq41_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq41_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq41_if_exists closure;
			com.altova.mapforce.IEnumerable var3_select_PromisedDate;
			boolean var2_exists;
			public Enumerator(seq41_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_PromisedDate = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				var2_exists = com.altova.functions.Core.exists(var3_select_PromisedDate);
				if (!(var2_exists)) {state = 17; return false; }
				if (!(var2_exists)) {state = 0; return false; }
				current = com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_PromisedDate))));
				pos++;
				return true;
			}
			private boolean moveNext_17() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq42_if_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq42_if_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq42_if_if_exists closure;
			java.lang.String var2_;
			com.altova.mapforce.IMFNode var3_select_DeliveryDate;
			public Enumerator(seq42_if_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 28:	if (moveNext_28()) return true; break;
					case 32:	if (moveNext_32()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq43_if_exists(closure.var1_bv))))) {state = 11; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists((new seq47_map_select_JobCode(closure.var1_bv))))) {state = 18; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_18() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq13_if_exists(closure.var1_bv))))) {state = 32; return false; }
				var2_ = com.altova.CoreTypes.dateToString(com.altova.CoreTypes.parseDate(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "OriginalScheduledDate"))))));
				if (!(com.altova.functions.Core.logicalAnd(com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_)), com.altova.functions.Core.equal(var2_, "1111-11-11"))), (Boolean)com.altova.functions.Core.first((new seq48_if_exists(closure.var1_bv)))))) {state = 28; return false; }
				current = com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				pos++;
				return true;
			}
			private boolean moveNext_28() throws Exception {
				state = 0;				
				var3_select_DeliveryDate = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Logistics")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "DeliveryDate")));
				current = com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString(var3_select_DeliveryDate))), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString(var3_select_DeliveryDate), "1111-11-11"));
				pos++;
				return true;
			}
			private boolean moveNext_32() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq43_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq43_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq43_if_exists closure;
			java.lang.String var2_;
			com.altova.mapforce.IMFNode var3_select_DeliveryDate;
			public Enumerator(seq43_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists((new seq44_map_select_JobCode(closure.var1_bv))))) {state = 11; return false; }
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq13_if_exists(closure.var1_bv))))) {state = 25; return false; }
				var2_ = com.altova.CoreTypes.dateToString(com.altova.CoreTypes.parseDate(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "OriginalScheduledDate"))))));
				if (!(com.altova.functions.Core.logicalAnd(com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_)), com.altova.functions.Core.equal(var2_, "1111-11-11"))), (Boolean)com.altova.functions.Core.first((new seq45_if_exists(closure.var1_bv)))))) {state = 21; return false; }
				current = com.altova.functions.Core.logicalNot(com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate"))));
				pos++;
				return true;
			}
			private boolean moveNext_21() throws Exception {
				state = 0;				
				var3_select_DeliveryDate = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Logistics")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "DeliveryDate")));
				current = com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString(var3_select_DeliveryDate))), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString(var3_select_DeliveryDate), "1111-11-11")));
				pos++;
				return true;
			}
			private boolean moveNext_25() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq44_map_select_JobCode implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq44_map_select_JobCode(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq44_map_select_JobCode closure;
			IEnumerator var1_map_select_JobCode;
			public Enumerator(seq44_map_select_JobCode closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_select_JobCode = (((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCodes")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCode"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_select_JobCode.moveNext()) {state = 6; return false; }
				if (!(com.altova.functions.Core.equal("01000", com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((((com.altova.mapforce.IMFNode)(var1_map_select_JobCode.current()))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Number"))))))) {state = 5; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_select_JobCode.close(); var1_map_select_JobCode = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_select_JobCode.close(); var1_map_select_JobCode = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq45_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq45_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq45_if_exists closure;
			com.altova.mapforce.IEnumerable var3_select_PromisedDate;
			boolean var2_exists;
			public Enumerator(seq45_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 23:	if (moveNext_23()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_PromisedDate = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				var2_exists = com.altova.functions.Core.exists(var3_select_PromisedDate);
				if (!(var2_exists)) {state = 23; return false; }
				if (!((Boolean)com.altova.functions.Core.first((new seq14_if_exists(closure.var1_bv))))) {state = 0; return false; }
				if (!(var2_exists)) {state = 0; return false; }
				current = com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr((Boolean)com.altova.functions.Core.first((new seq46_if_exists(closure.var1_bv))), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_PromisedDate)), "1111-11-11")));
				pos++;
				return true;
			}
			private boolean moveNext_23() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq46_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq46_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq46_if_exists closure;
			com.altova.mapforce.IEnumerable var3_select_PromisedDate;
			boolean var2_exists;
			public Enumerator(seq46_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_PromisedDate = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				var2_exists = com.altova.functions.Core.exists(var3_select_PromisedDate);
				if (!(var2_exists)) {state = 17; return false; }
				if (!(var2_exists)) {state = 0; return false; }
				current = com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_PromisedDate))));
				pos++;
				return true;
			}
			private boolean moveNext_17() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq47_map_select_JobCode implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq47_map_select_JobCode(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq47_map_select_JobCode closure;
			IEnumerator var1_map_select_JobCode;
			public Enumerator(seq47_map_select_JobCode closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_select_JobCode = (((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCodes")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCode"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_select_JobCode.moveNext()) {state = 6; return false; }
				if (!(com.altova.functions.Core.equal("01000", com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((((com.altova.mapforce.IMFNode)(var1_map_select_JobCode.current()))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Number"))))))) {state = 5; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_select_JobCode.close(); var1_map_select_JobCode = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_select_JobCode.close(); var1_map_select_JobCode = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq48_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq48_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq48_if_exists closure;
			com.altova.mapforce.IEnumerable var3_select_PromisedDate;
			boolean var2_exists;
			public Enumerator(seq48_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 23:	if (moveNext_23()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_PromisedDate = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				var2_exists = com.altova.functions.Core.exists(var3_select_PromisedDate);
				if (!(var2_exists)) {state = 23; return false; }
				if (!((Boolean)com.altova.functions.Core.first((new seq14_if_exists(closure.var1_bv))))) {state = 0; return false; }
				if (!(var2_exists)) {state = 0; return false; }
				current = com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr((Boolean)com.altova.functions.Core.first((new seq49_if_exists(closure.var1_bv))), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_PromisedDate)), "1111-11-11")));
				pos++;
				return true;
			}
			private boolean moveNext_23() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq49_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq49_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq49_if_exists closure;
			com.altova.mapforce.IEnumerable var3_select_PromisedDate;
			boolean var2_exists;
			public Enumerator(seq49_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_PromisedDate = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				var2_exists = com.altova.functions.Core.exists(var3_select_PromisedDate);
				if (!(var2_exists)) {state = 17; return false; }
				if (!(var2_exists)) {state = 0; return false; }
				current = com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_PromisedDate))));
				pos++;
				return true;
			}
			private boolean moveNext_17() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq50_map_select_JobCode implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq50_map_select_JobCode(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq50_map_select_JobCode closure;
			IEnumerator var1_map_select_JobCode;
			public Enumerator(seq50_map_select_JobCode closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_select_JobCode = (((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCodes")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCode"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_select_JobCode.moveNext()) {state = 6; return false; }
				if (!(com.altova.functions.Core.equal("01000", com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((((com.altova.mapforce.IMFNode)(var1_map_select_JobCode.current()))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Number"))))))) {state = 5; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_select_JobCode.close(); var1_map_select_JobCode = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_select_JobCode.close(); var1_map_select_JobCode = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq51_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq51_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq51_if_exists closure;
			com.altova.mapforce.IEnumerable var3_select_PromisedDate;
			boolean var2_exists;
			public Enumerator(seq51_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 23:	if (moveNext_23()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_PromisedDate = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				var2_exists = com.altova.functions.Core.exists(var3_select_PromisedDate);
				if (!(var2_exists)) {state = 23; return false; }
				if (!((Boolean)com.altova.functions.Core.first((new seq14_if_exists(closure.var1_bv))))) {state = 0; return false; }
				if (!(var2_exists)) {state = 0; return false; }
				current = com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr((Boolean)com.altova.functions.Core.first((new seq52_if_exists(closure.var1_bv))), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_PromisedDate)), "1111-11-11")));
				pos++;
				return true;
			}
			private boolean moveNext_23() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq52_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq52_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq52_if_exists closure;
			com.altova.mapforce.IEnumerable var3_select_PromisedDate;
			boolean var2_exists;
			public Enumerator(seq52_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_PromisedDate = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				var2_exists = com.altova.functions.Core.exists(var3_select_PromisedDate);
				if (!(var2_exists)) {state = 17; return false; }
				if (!(var2_exists)) {state = 0; return false; }
				current = com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_PromisedDate))));
				pos++;
				return true;
			}
			private boolean moveNext_17() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq53_if_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq53_if_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq53_if_if_exists closure;
			public Enumerator(seq53_if_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq38_if_exists(closure.var1_bv))))) {state = 11; return false; }
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq42_if_if_exists(closure.var1_bv))))) {state = 0; return false; }
				if (!((Boolean)com.altova.functions.Core.first((new seq54_if_exists(closure.var1_bv))))) {state = 0; return false; }
				current = com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr((Boolean)com.altova.functions.Core.first((new seq55_if_if_exists(closure.var1_bv))), com.altova.functions.Core.equal((java.lang.String)com.altova.functions.Core.first((new seq58_if_exists(closure.var1_bv))), "1111-11-11")));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq54_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq54_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq54_if_exists closure;
			java.lang.String var2_;
			com.altova.mapforce.IMFNode var3_select_DeliveryDate;
			public Enumerator(seq54_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists((new seq50_map_select_JobCode(closure.var1_bv))))) {state = 11; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq13_if_exists(closure.var1_bv))))) {state = 25; return false; }
				var2_ = com.altova.CoreTypes.dateToString(com.altova.CoreTypes.parseDate(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "OriginalScheduledDate"))))));
				if (!(com.altova.functions.Core.logicalAnd(com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_)), com.altova.functions.Core.equal(var2_, "1111-11-11"))), (Boolean)com.altova.functions.Core.first((new seq51_if_exists(closure.var1_bv)))))) {state = 21; return false; }
				current = com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				pos++;
				return true;
			}
			private boolean moveNext_21() throws Exception {
				state = 0;				
				var3_select_DeliveryDate = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Logistics")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "DeliveryDate")));
				current = com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString(var3_select_DeliveryDate))), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString(var3_select_DeliveryDate), "1111-11-11"));
				pos++;
				return true;
			}
			private boolean moveNext_25() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq55_if_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq55_if_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq55_if_if_exists closure;
			public Enumerator(seq55_if_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq43_if_exists(closure.var1_bv))))) {state = 11; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq56_if_exists(closure.var1_bv))))) {state = 0; return false; }
				current = com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace((java.lang.String)com.altova.functions.Core.first((new seq57_if_exists(closure.var1_bv)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq56_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq56_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq56_if_exists closure;
			java.lang.String var2_;
			com.altova.mapforce.IMFNode var3_select_DeliveryDate;
			public Enumerator(seq56_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists((new seq47_map_select_JobCode(closure.var1_bv))))) {state = 11; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq13_if_exists(closure.var1_bv))))) {state = 25; return false; }
				var2_ = com.altova.CoreTypes.dateToString(com.altova.CoreTypes.parseDate(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "OriginalScheduledDate"))))));
				if (!(com.altova.functions.Core.logicalAnd(com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_)), com.altova.functions.Core.equal(var2_, "1111-11-11"))), (Boolean)com.altova.functions.Core.first((new seq48_if_exists(closure.var1_bv)))))) {state = 21; return false; }
				current = com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				pos++;
				return true;
			}
			private boolean moveNext_21() throws Exception {
				state = 0;				
				var3_select_DeliveryDate = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Logistics")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "DeliveryDate")));
				current = com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString(var3_select_DeliveryDate))), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString(var3_select_DeliveryDate), "1111-11-11"));
				pos++;
				return true;
			}
			private boolean moveNext_25() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq57_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq57_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq57_if_exists closure;
			com.altova.types.DateTime var2_now;
			java.lang.String var3_;
			IEnumerator var4_map_select_PromisedDate;
			com.altova.mapforce.IMFNode var5_select_DeliveryDate;
			com.altova.types.DateTime var6_now;
			public Enumerator(seq57_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists((new seq47_map_select_JobCode(closure.var1_bv))))) {state = 11; return false; }
				var2_now = com.altova.functions.Lang.now();
				current = com.altova.CoreTypes.dateToString((com.altova.types.DateTime)com.altova.functions.Core.first(com.altova.functions.Core.box(com.altova.functions.Lang.dateFromDatetime(com.altova.functions.Lang.datetimeFromParts(com.altova.functions.Lang.yearFromDatetime(var2_now), com.altova.functions.Lang.monthFromDatetime(var2_now), com.altova.functions.Lang.dayFromDatetime(var2_now), 0, 0, 0, new java.math.BigDecimal("0"), -32768)))));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 20;				
				if (!((Boolean)com.altova.functions.Core.first((new seq13_if_exists(closure.var1_bv))))) {state = 0; return false; }
				var3_ = com.altova.CoreTypes.dateToString(com.altova.CoreTypes.parseDate(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "OriginalScheduledDate"))))));
				if (!(com.altova.functions.Core.logicalAnd(com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var3_)), com.altova.functions.Core.equal(var3_, "1111-11-11"))), (Boolean)com.altova.functions.Core.first((new seq48_if_exists(closure.var1_bv)))))) {state = 25; return false; }
				var4_map_select_PromisedDate = ((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate"))).enumerator();
				return false;
			}
			private boolean moveNext_20() throws Exception {
				state = 20;				
				if (!var4_map_select_PromisedDate.moveNext()) {state = 21; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var4_map_select_PromisedDate.current())));
				pos++;
				return true;
			}
			private boolean moveNext_21() throws Exception {
				state = 0;				
				var4_map_select_PromisedDate.close(); var4_map_select_PromisedDate = null;
				return false;
			}
			private boolean moveNext_25() throws Exception {
				state = 0;				
				var5_select_DeliveryDate = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Logistics")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "DeliveryDate")));
				if (!(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString(var5_select_DeliveryDate))), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString(var5_select_DeliveryDate), "1111-11-11")))) {state = 0; return false; }
				var6_now = com.altova.functions.Lang.now();
				current = com.altova.CoreTypes.dateToString((com.altova.types.DateTime)com.altova.functions.Core.first(com.altova.functions.Core.box(com.altova.functions.Lang.dateFromDatetime(com.altova.functions.Lang.datetimeFromParts(com.altova.functions.Lang.yearFromDatetime(var6_now), com.altova.functions.Lang.monthFromDatetime(var6_now), com.altova.functions.Lang.dayFromDatetime(var6_now), 0, 0, 0, new java.math.BigDecimal("0"), -32768)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var4_map_select_PromisedDate.close(); var4_map_select_PromisedDate = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq58_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq58_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq58_if_exists closure;
			com.altova.types.DateTime var2_now;
			java.lang.String var3_;
			IEnumerator var4_map_select_PromisedDate;
			com.altova.mapforce.IMFNode var5_select_DeliveryDate;
			com.altova.types.DateTime var6_now;
			public Enumerator(seq58_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists((new seq50_map_select_JobCode(closure.var1_bv))))) {state = 11; return false; }
				var2_now = com.altova.functions.Lang.now();
				current = com.altova.CoreTypes.dateToString((com.altova.types.DateTime)com.altova.functions.Core.first(com.altova.functions.Core.box(com.altova.functions.Lang.dateFromDatetime(com.altova.functions.Lang.datetimeFromParts(com.altova.functions.Lang.yearFromDatetime(var2_now), com.altova.functions.Lang.monthFromDatetime(var2_now), com.altova.functions.Lang.dayFromDatetime(var2_now), 0, 0, 0, new java.math.BigDecimal("0"), -32768)))));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 20;				
				if (!((Boolean)com.altova.functions.Core.first((new seq13_if_exists(closure.var1_bv))))) {state = 0; return false; }
				var3_ = com.altova.CoreTypes.dateToString(com.altova.CoreTypes.parseDate(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "OriginalScheduledDate"))))));
				if (!(com.altova.functions.Core.logicalAnd(com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var3_)), com.altova.functions.Core.equal(var3_, "1111-11-11"))), (Boolean)com.altova.functions.Core.first((new seq51_if_exists(closure.var1_bv)))))) {state = 25; return false; }
				var4_map_select_PromisedDate = ((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate"))).enumerator();
				return false;
			}
			private boolean moveNext_20() throws Exception {
				state = 20;				
				if (!var4_map_select_PromisedDate.moveNext()) {state = 21; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var4_map_select_PromisedDate.current())));
				pos++;
				return true;
			}
			private boolean moveNext_21() throws Exception {
				state = 0;				
				var4_map_select_PromisedDate.close(); var4_map_select_PromisedDate = null;
				return false;
			}
			private boolean moveNext_25() throws Exception {
				state = 0;				
				var5_select_DeliveryDate = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Logistics")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "DeliveryDate")));
				if (!(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString(var5_select_DeliveryDate))), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString(var5_select_DeliveryDate), "1111-11-11")))) {state = 0; return false; }
				var6_now = com.altova.functions.Lang.now();
				current = com.altova.CoreTypes.dateToString((com.altova.types.DateTime)com.altova.functions.Core.first(com.altova.functions.Core.box(com.altova.functions.Lang.dateFromDatetime(com.altova.functions.Lang.datetimeFromParts(com.altova.functions.Lang.yearFromDatetime(var6_now), com.altova.functions.Lang.monthFromDatetime(var6_now), com.altova.functions.Lang.dayFromDatetime(var6_now), 0, 0, 0, new java.math.BigDecimal("0"), -32768)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var4_map_select_PromisedDate.close(); var4_map_select_PromisedDate = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq59_content_contacts implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq59_content_contacts(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq59_content_contacts closure;
			public Enumerator(seq59_content_contacts closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				current = new MFAttribute("contactType", "", null, com.altova.functions.Core.box("DEFAULT"));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = new MFAttribute("lastName", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "LastName"))))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				current = new MFAttribute("firstName", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq60_if_empty(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 8;				
				current = new MFAttribute("middleInitial", "", null, com.altova.functions.Core.box(""));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 9;				
				current = new MFAttribute("honorific", "", null, com.altova.functions.Core.box(""));
				pos++;
				return true;
			}
			private boolean moveNext_9() throws Exception {
				state = 10;				
				current = new MFElement("phones", "", null, (new seq61_content_phones(closure.var1_bv)));
				pos++;
				return true;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq64_if_empty(closure.var1_bv))))) {state = 0; return false; }
				current = new MFElement("phones (2)", "", null, (new seq65_content_phones__2_(closure.var1_bv)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq60_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq60_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq60_if_empty closure;
			com.altova.mapforce.IMFNode var2_select_Customer;
			public Enumerator(seq60_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_select_Customer = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer")));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Customer).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "FirstName")))))))) {state = 11; return false; }
				current = "UNKNOWN";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Customer).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "FirstName"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq61_content_phones implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq61_content_phones(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq61_content_phones closure;
			public Enumerator(seq61_content_phones closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				current = new MFAttribute("phoneNumber", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq62_if_empty(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = new MFAttribute("phoneType", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq63_if_equal(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				current = new MFAttribute("primary", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.booleanToDecimal(com.altova.CoreTypes.parseBoolean("true")))))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq62_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq62_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq62_if_empty closure;
			com.altova.mapforce.IMFNode var3_select_RepairAt;
			com.altova.mapforce.IMFNode var2_select_Customer;
			public Enumerator(seq62_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_RepairAt = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "RepairAt")));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var3_select_RepairAt).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Phone")))))))) {state = 18; return false; }
				var2_select_Customer = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer")));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Customer).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Phone")))))))) {state = 15; return false; }
				current = "9999999999";
				pos++;
				return true;
			}
			private boolean moveNext_15() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Customer).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Phone"))));
				pos++;
				return true;
			}
			private boolean moveNext_18() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var3_select_RepairAt).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Phone"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq63_if_equal implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq63_if_equal(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq63_if_equal closure;
			public Enumerator(seq63_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Type")))), "S"))) {state = 11; return false; }
				current = "WORK";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = "HOME";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq64_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq64_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq64_if_empty closure;
			com.altova.mapforce.IMFNode var2_select_Customer;
			public Enumerator(seq64_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "RepairAt")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Phone")))))))) {state = 18; return false; }
				var2_select_Customer = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer")));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Customer).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "CellPhoneNumber")))))))) {state = 15; return false; }
				current = com.altova.functions.Core.logicalNot(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Customer).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "AltPhone")))))));
				pos++;
				return true;
			}
			private boolean moveNext_15() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_18() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq65_content_phones__2_ implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq65_content_phones__2_(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq65_content_phones__2_ closure;
			com.altova.mapforce.IMFNode var2_select_Customer;
			public Enumerator(seq65_content_phones__2_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var2_select_Customer = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer")));
				current = new MFAttribute("phoneNumber", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq66_if_empty(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 7;				
				if (!((Boolean)com.altova.functions.Core.first((new seq64_if_empty(closure.var1_bv))))) {state = 7; return false; }
				current = new MFAttribute("phoneType", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq67_if_empty(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.logicalAnd(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Customer).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "CellPhoneNumber")))))), com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Customer).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "AltPhone"))))))))) {state = 18; return false; }
				return false;
			}
			private boolean moveNext_18() throws Exception {
				state = 0;				
				current = new MFAttribute("primary", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.booleanToDecimal((Boolean)com.altova.functions.Core.first((new seq68_cond_const_false(closure.var1_bv)))))))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq66_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq66_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq66_if_empty closure;
			com.altova.mapforce.IMFNode var3_select_RepairAt;
			com.altova.mapforce.IMFNode var2_select_Customer;
			public Enumerator(seq66_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_RepairAt = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "RepairAt")));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var3_select_RepairAt).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Phone")))))))) {state = 24; return false; }
				var2_select_Customer = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer")));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Customer).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "CellPhoneNumber")))))))) {state = 21; return false; }
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Customer).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "AltPhone")))))))) {state = 18; return false; }
				return false;
			}
			private boolean moveNext_18() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Customer).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "AltPhone"))));
				pos++;
				return true;
			}
			private boolean moveNext_21() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Customer).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "CellPhoneNumber"))));
				pos++;
				return true;
			}
			private boolean moveNext_24() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var3_select_RepairAt).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "AltPhone"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq67_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq67_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq67_if_empty closure;
			com.altova.mapforce.IMFNode var2_select_Customer;
			public Enumerator(seq67_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "RepairAt")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Phone")))))))) {state = 24; return false; }
				var2_select_Customer = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer")));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Customer).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "CellPhoneNumber")))))))) {state = 21; return false; }
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Customer).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "AltPhone")))))))) {state = 18; return false; }
				return false;
			}
			private boolean moveNext_18() throws Exception {
				state = 0;				
				current = "WORK";
				pos++;
				return true;
			}
			private boolean moveNext_21() throws Exception {
				state = 0;				
				current = "MOBILE";
				pos++;
				return true;
			}
			private boolean moveNext_24() throws Exception {
				state = 0;				
				current = "WORK";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq68_cond_const_false implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq68_cond_const_false(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq68_cond_const_false closure;
			com.altova.mapforce.IMFNode var2_select_Customer;
			public Enumerator(seq68_cond_const_false closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_select_Customer = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer")));
				if (!(com.altova.functions.Core.logicalAnd(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Customer).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "CellPhoneNumber")))))), com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Customer).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "AltPhone"))))))))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq69_content_customrefs_oms implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq69_content_customrefs_oms(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq69_content_customrefs_oms closure;
			com.altova.mapforce.IMFNode var13_select_Customer;
			com.altova.mapforce.IEnumerable var12_select_PromisedDate;
			com.altova.mapforce.IEnumerable var11_select_ProcessID;
			com.altova.mapforce.IMFNode var9_select_ServiceOrderNumber;
			com.altova.mapforce.IMFNode var8_select_ServiceUnitNumber;
			com.altova.mapforce.IMFNode var7_select_Merchandise;
			com.altova.mapforce.IMFNode var5_select_Logistics;
			com.altova.mapforce.IMFNode var6_select_Order;
			com.altova.mapforce.IMFNode var4_select_LogisticsMerchandise;
			com.altova.mapforce.IMFNode var2_select_SalesCheck;
			com.altova.mapforce.IMFNode var3_select_Number;
			IEnumerator var10_map_select_JobCode;
			public Enumerator(seq69_content_customrefs_oms closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 19:	if (moveNext_19()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
					case 30:	if (moveNext_30()) return true; break;
					case 31:	if (moveNext_31()) return true; break;
					case 42:	if (moveNext_42()) return true; break;
					case 48:	if (moveNext_48()) return true; break;
					case 50:	if (moveNext_50()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var13_select_Customer = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer")));
				var12_select_PromisedDate = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				var11_select_ProcessID = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ProcessID")));
				var9_select_ServiceOrderNumber = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ServiceOrderNumber")));
				var8_select_ServiceUnitNumber = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ServiceUnitNumber")));
				var7_select_Merchandise = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Merchandise")));
				var5_select_Logistics = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Logistics")));
				var6_select_Order = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var5_select_Logistics).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order")));
				var4_select_LogisticsMerchandise = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var5_select_Logistics).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "LogisticsMerchandise")));
				var2_select_SalesCheck = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "SalesCheck")));
				var3_select_Number = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_SalesCheck).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Number")));
				current = new MFAttribute("unitNumber", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString(var8_select_ServiceUnitNumber)));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = new MFAttribute("salesCheckNumber", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString(var3_select_Number)));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				current = new MFAttribute("orderNumber", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString(var9_select_ServiceOrderNumber)));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 8;				
				current = new MFAttribute("salesCheckDate", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_SalesCheck).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Date"))))));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 9;				
				current = new MFAttribute("salesCheckTime", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_SalesCheck).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Time"))))));
				pos++;
				return true;
			}
			private boolean moveNext_9() throws Exception {
				state = 10;				
				current = new MFAttribute("preferredLanguage", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var13_select_Customer).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PreferredLanguage"))))));
				pos++;
				return true;
			}
			private boolean moveNext_10() throws Exception {
				state = 11;				
				current = new MFAttribute("serviceRequested", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ServiceRequested"))))));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 12;				
				current = new MFAttribute("sellingAssociate", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_SalesCheck).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "SellingAssociate"))))));
				pos++;
				return true;
			}
			private boolean moveNext_12() throws Exception {
				state = 13;				
				current = new MFAttribute("storeNumber", "", null, com.altova.functions.Core.box(com.altova.functions.Core.substring(com.altova.CoreTypes.nodeToString(var3_select_Number), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("1")), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("5")))));
				pos++;
				return true;
			}
			private boolean moveNext_13() throws Exception {
				state = 14;				
				current = new MFAttribute("scimHandlingCode", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var4_select_LogisticsMerchandise).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "SCIMHandlingCode"))))));
				pos++;
				return true;
			}
			private boolean moveNext_14() throws Exception {
				state = 15;				
				current = new MFAttribute("scimHandlingDescription", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var4_select_LogisticsMerchandise).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "SCIMHandlingDescription"))))));
				pos++;
				return true;
			}
			private boolean moveNext_15() throws Exception {
				state = 16;				
				current = new MFAttribute("lastMaintenanceDate", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var4_select_LogisticsMerchandise).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "LastMaintenanceDate"))))));
				pos++;
				return true;
			}
			private boolean moveNext_16() throws Exception {
				state = 17;				
				current = new MFAttribute("merchandiseAvailabilityDate", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var6_select_Order).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "DeliveryDate"))))));
				pos++;
				return true;
			}
			private boolean moveNext_17() throws Exception {
				state = 18;				
				current = new MFAttribute("pickupLocationCode", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var6_select_Order).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PickupLocationCode"))))));
				pos++;
				return true;
			}
			private boolean moveNext_18() throws Exception {
				state = 19;				
				current = new MFAttribute("specialtyCode", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var7_select_Merchandise).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Specialty"))))));
				pos++;
				return true;
			}
			private boolean moveNext_19() throws Exception {
				state = 20;				
				current = new MFAttribute("merchandiseCode", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var7_select_Merchandise).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Code"))))));
				pos++;
				return true;
			}
			private boolean moveNext_20() throws Exception {
				state = 21;				
				current = new MFAttribute("brand", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq70_if_empty(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_21() throws Exception {
				state = 22;				
				current = new MFAttribute("orderIdString", "", null, com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.CoreTypes.nodeToString(var8_select_ServiceUnitNumber), com.altova.CoreTypes.nodeToString(var9_select_ServiceOrderNumber))));
				pos++;
				return true;
			}
			private boolean moveNext_22() throws Exception {
				state = 24;				
				if (!((Boolean)com.altova.functions.Core.first((new seq71_if_exists(closure.var1_bv))))) {state = 24; return false; }
				current = new MFAttribute("dateCalculationMethod", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq73_if_exists(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_24() throws Exception {
				state = 30;				
				var10_map_select_JobCode = (((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCodes")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCode"))).enumerator();
				return false;
			}
			private boolean moveNext_30() throws Exception {
				state = 30;				
				if (!var10_map_select_JobCode.moveNext()) {state = 31; return false; }
				if (!(com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((((com.altova.mapforce.IMFNode)(var10_map_select_JobCode.current()))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Type")))), "R"))) {state = 30; return false; }
				current = new MFAttribute("mainSku", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq76_cond_cast_first(((com.altova.mapforce.IMFNode)(var10_map_select_JobCode.current())))))));
				pos++;
				return true;
			}
			private boolean moveNext_31() throws Exception {
				state = 42;				
				var10_map_select_JobCode.close(); var10_map_select_JobCode = null;
				if (!(com.altova.functions.Core.exists(var11_select_ProcessID))) {state = 42; return false; }
				current = new MFAttribute("processId", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var11_select_ProcessID))));
				pos++;
				return true;
			}
			private boolean moveNext_42() throws Exception {
				state = 48;				
				current = new MFAttribute("division", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var7_select_Merchandise).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Division"))))));
				pos++;
				return true;
			}
			private boolean moveNext_48() throws Exception {
				state = 50;				
				if (!(com.altova.functions.Core.exists(var12_select_PromisedDate))) {state = 50; return false; }
				current = new MFAttribute("promisedDate", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var12_select_PromisedDate))));
				pos++;
				return true;
			}
			private boolean moveNext_50() throws Exception {
				state = 0;				
				current = new MFAttribute("customerNumber", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var13_select_Customer).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Number")))))))))))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var10_map_select_JobCode.close(); var10_map_select_JobCode = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq70_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq70_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq70_if_empty closure;
			com.altova.mapforce.IMFNode var2_select_Merchandise;
			public Enumerator(seq70_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_select_Merchandise = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Merchandise")));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Merchandise).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Brand")))))))) {state = 11; return false; }
				current = "UNKNOWN";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Merchandise).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Brand"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq71_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq71_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq71_if_exists closure;
			boolean var2_exists;
			public Enumerator(seq71_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists((new seq72_map_select_JobCode(closure.var1_bv))))) {state = 10; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				var2_exists = com.altova.functions.Core.exists((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				if (!(var2_exists)) {state = 25; return false; }
				if (!((Boolean)com.altova.functions.Core.first((new seq14_if_exists(closure.var1_bv))))) {state = 22; return false; }
				current = var2_exists;
				pos++;
				return true;
			}
			private boolean moveNext_22() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}
			private boolean moveNext_25() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq72_map_select_JobCode implements IEnumerable
	{
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq72_map_select_JobCode(com.altova.mapforce.IMFNode var2_bv)
		{
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq72_map_select_JobCode closure;
			IEnumerator var1_map_select_JobCode;
			public Enumerator(seq72_map_select_JobCode closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var1_map_select_JobCode = (((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCodes")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "JobCode"))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var1_map_select_JobCode.moveNext()) {state = 6; return false; }
				if (!(com.altova.functions.Core.equal("01000", com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((((com.altova.mapforce.IMFNode)(var1_map_select_JobCode.current()))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Number"))))))) {state = 5; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var1_map_select_JobCode.close(); var1_map_select_JobCode = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var1_map_select_JobCode.close(); var1_map_select_JobCode = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq73_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq73_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq73_if_exists closure;
			java.lang.String var2_;
			com.altova.mapforce.IMFNode var3_select_DeliveryDate;
			public Enumerator(seq73_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 29:	if (moveNext_29()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists((new seq72_map_select_JobCode(closure.var1_bv))))) {state = 11; return false; }
				current = "N";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq13_if_exists(closure.var1_bv))))) {state = 0; return false; }
				var2_ = com.altova.CoreTypes.dateToString(com.altova.CoreTypes.parseDate(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "OriginalScheduledDate"))))));
				if (!(com.altova.functions.Core.logicalAnd(com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(var2_)), com.altova.functions.Core.equal(var2_, "1111-11-11"))), (Boolean)com.altova.functions.Core.first((new seq74_if_exists(closure.var1_bv)))))) {state = 21; return false; }
				current = "P";
				pos++;
				return true;
			}
			private boolean moveNext_21() throws Exception {
				state = 0;				
				var3_select_DeliveryDate = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Logistics")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "DeliveryDate")));
				if (!(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString(var3_select_DeliveryDate))), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString(var3_select_DeliveryDate), "1111-11-11")))) {state = 29; return false; }
				current = "C";
				pos++;
				return true;
			}
			private boolean moveNext_29() throws Exception {
				state = 0;				
				current = "D";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq74_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq74_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq74_if_exists closure;
			com.altova.mapforce.IEnumerable var3_select_PromisedDate;
			boolean var2_exists;
			public Enumerator(seq74_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 23:	if (moveNext_23()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_PromisedDate = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				var2_exists = com.altova.functions.Core.exists(var3_select_PromisedDate);
				if (!(var2_exists)) {state = 23; return false; }
				if (!((Boolean)com.altova.functions.Core.first((new seq14_if_exists(closure.var1_bv))))) {state = 0; return false; }
				if (!(var2_exists)) {state = 0; return false; }
				current = com.altova.functions.Core.logicalNot(com.altova.functions.Core.logicalOr((Boolean)com.altova.functions.Core.first((new seq75_if_exists(closure.var1_bv))), com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_PromisedDate)), "1111-11-11")));
				pos++;
				return true;
			}
			private boolean moveNext_23() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq75_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq75_if_exists(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq75_if_exists closure;
			com.altova.mapforce.IEnumerable var3_select_PromisedDate;
			boolean var2_exists;
			public Enumerator(seq75_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_PromisedDate = new com.altova.functions.Core.SequenceCache((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PromisedDate")));
				var2_exists = com.altova.functions.Core.exists(var3_select_PromisedDate);
				if (!(var2_exists)) {state = 17; return false; }
				if (!(var2_exists)) {state = 0; return false; }
				current = com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var3_select_PromisedDate))));
				pos++;
				return true;
			}
			private boolean moveNext_17() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq76_cond_cast_first implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq76_cond_cast_first(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq76_cond_cast_first closure;
			public Enumerator(seq76_cond_cast_first closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Type")))), "R"))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Number"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq77_content_locations implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq77_content_locations(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq77_content_locations closure;
			boolean var2_if_empty;
			public Enumerator(seq77_content_locations closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
					case 29:	if (moveNext_29()) return true; break;
					case 31:	if (moveNext_31()) return true; break;
					case 36:	if (moveNext_36()) return true; break;
					case 38:	if (moveNext_38()) return true; break;
					case 45:	if (moveNext_45()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var2_if_empty = (Boolean)com.altova.functions.Core.first((new seq84_if_empty(closure.var1_bv)));
				current = new MFAttribute("locationType", "", null, com.altova.functions.Core.box("SERVICE"));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 7;				
				if (!((Boolean)com.altova.functions.Core.first((new seq78_if_empty(closure.var1_bv))))) {state = 7; return false; }
				current = new MFAttribute("locationName", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq79_cond_cond_cast_first(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 13;				
				current = new MFAttribute("locationNotes", "", null, com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat((java.lang.String)com.altova.functions.Core.first((new seq80_if_empty(closure.var1_bv))), (java.lang.String)com.altova.functions.Core.first((new seq81_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq82_if_empty(closure.var1_bv)))), (java.lang.String)com.altova.functions.Core.first((new seq83_if_empty(closure.var1_bv))))));
				pos++;
				return true;
			}
			private boolean moveNext_13() throws Exception {
				state = 15;				
				if (!(var2_if_empty)) {state = 15; return false; }
				current = new MFAttribute("addressLine1", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq85_if_empty(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_15() throws Exception {
				state = 24;				
				if (!(var2_if_empty)) {state = 22; return false; }
				return false;
			}
			private boolean moveNext_22() throws Exception {
				state = 31;				
				if (!(var2_if_empty)) {state = 29; return false; }
				return false;
			}
			private boolean moveNext_24() throws Exception {
				state = 22;				
				current = new MFAttribute("addressLine2", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq86_if_empty(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_29() throws Exception {
				state = 38;				
				if (!(var2_if_empty)) {state = 36; return false; }
				return false;
			}
			private boolean moveNext_31() throws Exception {
				state = 29;				
				current = new MFAttribute("city", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq87_if_empty(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_36() throws Exception {
				state = 45;				
				if (!(var2_if_empty)) {state = 0; return false; }
				return false;
			}
			private boolean moveNext_38() throws Exception {
				state = 36;				
				current = new MFAttribute("state", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq88_if_empty(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_45() throws Exception {
				state = 0;				
				current = new MFAttribute("zipCode", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq89_if_empty(closure.var1_bv)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq78_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq78_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq78_if_empty closure;
			public Enumerator(seq78_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "RepairAt")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Address")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ZipCode")))))))) {state = 11; return false; }
				current = com.altova.functions.Core.logicalNot(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Address")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ZipCode")))))));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq79_cond_cond_cast_first implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq79_cond_cond_cast_first(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq79_cond_cond_cast_first closure;
			com.altova.mapforce.IMFNode var2_select_Customer;
			public Enumerator(seq79_cond_cond_cast_first closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "RepairAt")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Address")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ZipCode")))))))) {state = 0; return false; }
				var2_select_Customer = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer")));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Customer).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Address")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ZipCode")))))))) {state = 14; return false; }
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Customer).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Type"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq80_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq80_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq80_if_empty closure;
			com.altova.mapforce.IMFNode var2_select_SupplementalCustomerInformation;
			public Enumerator(seq80_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_select_SupplementalCustomerInformation = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "SupplementalCustomerInformation")));
				if (!(com.altova.functions.Lang.empty(com.altova.CoreTypes.nodeToString(var2_select_SupplementalCustomerInformation)))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.CoreTypes.nodeToString(var2_select_SupplementalCustomerInformation), "\\n");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq81_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq81_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq81_if_empty closure;
			com.altova.mapforce.IMFNode var2_select_SpecialInstructions1;
			public Enumerator(seq81_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_select_SpecialInstructions1 = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "SpecialInstructions1")));
				if (!(com.altova.functions.Lang.empty(com.altova.CoreTypes.nodeToString(var2_select_SpecialInstructions1)))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.CoreTypes.nodeToString(var2_select_SpecialInstructions1), "\\n");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq82_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq82_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq82_if_empty closure;
			com.altova.mapforce.IMFNode var2_select_SpecialInstructions2;
			public Enumerator(seq82_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_select_SpecialInstructions2 = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "SpecialInstructions2")));
				if (!(com.altova.functions.Lang.empty(com.altova.CoreTypes.nodeToString(var2_select_SpecialInstructions2)))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.CoreTypes.nodeToString(var2_select_SpecialInstructions2), "\\n");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq83_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq83_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq83_if_empty closure;
			com.altova.mapforce.IMFNode var2_select_PermanentInstructions;
			public Enumerator(seq83_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_select_PermanentInstructions = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PermanentInstructions")));
				if (!(com.altova.functions.Lang.empty(com.altova.CoreTypes.nodeToString(var2_select_PermanentInstructions)))) {state = 11; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(com.altova.CoreTypes.nodeToString(var2_select_PermanentInstructions), "\\n");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq84_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq84_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq84_if_empty closure;
			public Enumerator(seq84_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "RepairAt")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Address")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ZipCode")))))))) {state = 11; return false; }
				current = com.altova.functions.Core.logicalNot(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Address")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ZipCode")))))));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq85_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq85_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq85_if_empty closure;
			com.altova.mapforce.IMFNode var6_select_Address;
			com.altova.mapforce.IMFNode var2_select_Address;
			java.lang.String var8_const__;
			java.lang.String var7_normalize_space;
			java.lang.String var4_const__;
			java.lang.String var3_normalize_space;
			java.lang.String var9_normalize_space;
			java.lang.String var5_normalize_space;
			public Enumerator(seq85_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
					case 28:	if (moveNext_28()) return true; break;
					case 30:	if (moveNext_30()) return true; break;
					case 42:	if (moveNext_42()) return true; break;
					case 45:	if (moveNext_45()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var6_select_Address = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "RepairAt")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Address")));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var6_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ZipCode")))))))) {state = 30; return false; }
				var2_select_Address = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Address")));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ZipCode")))))))) {state = 13; return false; }
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 0;				
				var4_const__ = "-";
				var3_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "StreetAddress1")))));
				if (!(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(var3_normalize_space), com.altova.functions.Core.equal(var3_normalize_space, var4_const__)))) {state = 28; return false; }
				var5_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "StreetAddress2")))));
				if (!(com.altova.functions.Core.notEqual(var4_const__, var5_normalize_space))) {state = 25; return false; }
				current = var5_normalize_space;
				pos++;
				return true;
			}
			private boolean moveNext_25() throws Exception {
				state = 0;				
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_28() throws Exception {
				state = 0;				
				current = var3_normalize_space;
				pos++;
				return true;
			}
			private boolean moveNext_30() throws Exception {
				state = 0;				
				var8_const__ = "-";
				var7_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var6_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "StreetAddress1")))));
				if (!(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(var7_normalize_space), com.altova.functions.Core.equal(var7_normalize_space, var8_const__)))) {state = 45; return false; }
				var9_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var6_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "StreetAddress2")))));
				if (!(com.altova.functions.Core.notEqual(var9_normalize_space, var8_const__))) {state = 42; return false; }
				current = var9_normalize_space;
				pos++;
				return true;
			}
			private boolean moveNext_42() throws Exception {
				state = 0;				
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_45() throws Exception {
				state = 0;				
				current = var7_normalize_space;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq86_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq86_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq86_if_empty closure;
			com.altova.mapforce.IMFNode var6_select_Address;
			com.altova.mapforce.IMFNode var2_select_Address;
			java.lang.String var8_const__;
			java.lang.String var7_normalize_space;
			java.lang.String var4_const__;
			java.lang.String var3_normalize_space;
			java.lang.String var9_normalize_space;
			java.lang.String var5_normalize_space;
			public Enumerator(seq86_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 28:	if (moveNext_28()) return true; break;
					case 30:	if (moveNext_30()) return true; break;
					case 37:	if (moveNext_37()) return true; break;
					case 45:	if (moveNext_45()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var6_select_Address = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "RepairAt")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Address")));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var6_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ZipCode")))))))) {state = 30; return false; }
				var2_select_Address = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Address")));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ZipCode")))))))) {state = 13; return false; }
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 0;				
				var4_const__ = "-";
				var3_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "StreetAddress1")))));
				if (!(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(var3_normalize_space), com.altova.functions.Core.equal(var3_normalize_space, var4_const__)))) {state = 20; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_20() throws Exception {
				state = 0;				
				var5_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "StreetAddress2")))));
				if (!(com.altova.functions.Core.notEqual(var4_const__, var5_normalize_space))) {state = 28; return false; }
				current = var5_normalize_space;
				pos++;
				return true;
			}
			private boolean moveNext_28() throws Exception {
				state = 0;				
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_30() throws Exception {
				state = 0;				
				var8_const__ = "-";
				var7_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var6_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "StreetAddress1")))));
				if (!(com.altova.functions.Core.logicalOr(com.altova.functions.Lang.empty(var7_normalize_space), com.altova.functions.Core.equal(var7_normalize_space, var8_const__)))) {state = 37; return false; }
				current = "";
				pos++;
				return true;
			}
			private boolean moveNext_37() throws Exception {
				state = 0;				
				var9_normalize_space = com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var6_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "StreetAddress2")))));
				if (!(com.altova.functions.Core.notEqual(var9_normalize_space, var8_const__))) {state = 45; return false; }
				current = var9_normalize_space;
				pos++;
				return true;
			}
			private boolean moveNext_45() throws Exception {
				state = 0;				
				current = "";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq87_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq87_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq87_if_empty closure;
			com.altova.mapforce.IMFNode var3_select_Address;
			com.altova.mapforce.IMFNode var2_select_Address;
			public Enumerator(seq87_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_Address = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "RepairAt")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Address")));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var3_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ZipCode")))))))) {state = 17; return false; }
				var2_select_Address = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Address")));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ZipCode")))))))) {state = 14; return false; }
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "City"))));
				pos++;
				return true;
			}
			private boolean moveNext_17() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var3_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "City"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq88_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq88_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq88_if_empty closure;
			com.altova.mapforce.IMFNode var3_select_Address;
			com.altova.mapforce.IMFNode var2_select_Address;
			public Enumerator(seq88_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_Address = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "RepairAt")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Address")));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var3_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ZipCode")))))))) {state = 17; return false; }
				var2_select_Address = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Address")));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ZipCode")))))))) {state = 14; return false; }
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "State"))));
				pos++;
				return true;
			}
			private boolean moveNext_17() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var3_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "State"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq89_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq89_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq89_if_empty closure;
			com.altova.mapforce.IMFNode var3_select_Address;
			com.altova.mapforce.IMFNode var2_select_Address;
			public Enumerator(seq89_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_select_Address = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "RepairAt")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Address")));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var3_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ZipCode")))))))) {state = 17; return false; }
				var2_select_Address = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Customer")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Address")));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ZipCode")))))))) {state = 14; return false; }
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ZipCode"))));
				pos++;
				return true;
			}
			private boolean moveNext_17() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var3_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ZipCode"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq90_content_locations__2_ implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq90_content_locations__2_(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq90_content_locations__2_ closure;
			com.altova.mapforce.IMFNode var2_select_Address;
			public Enumerator(seq90_content_locations__2_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var2_select_Address = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Logistics")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Address")));
				current = new MFAttribute("locationType", "", null, com.altova.functions.Core.box("PICKUP"));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = new MFAttribute("addressLine1", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "StreetAddress1"))))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				current = new MFAttribute("addressLine2", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "StreetAddress2"))))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 8;				
				current = new MFAttribute("city", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "City"))))));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 9;				
				current = new MFAttribute("state", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "State"))))));
				pos++;
				return true;
			}
			private boolean moveNext_9() throws Exception {
				state = 0;				
				current = new MFAttribute("zipCode", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Address).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ZipCode"))))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq91_content_parts implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
		com.altova.functions.RuntimeContext var3_bv;
	
		public seq91_content_parts(com.altova.mapforce.IMFNode var1_bv, com.altova.functions.RuntimeContext var3_bv)
		{
			this.var1_bv = var1_bv;
			this.var3_bv = var3_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq91_content_parts closure;
			com.altova.mapforce.IMFNode var4_select_Order;
			com.altova.mapforce.IMFNode var2_select_Merchandise;
			com.altova.mapforce.IEnumerable var5_create_parts_description;
			public Enumerator(seq91_content_parts closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var4_select_Order = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Logistics")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Order")));
				var2_select_Merchandise = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Merchandise")));
				var5_create_parts_description = new com.altova.functions.Core.SequenceCache(com.servicelive.esb.mapforce.user.create_parts_description.create(closure.var3_bv, com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Merchandise).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Description")))), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var4_select_Order).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "WarehouseNumber")))), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var4_select_Order).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "LastMaintenanceDate")))), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var4_select_Order).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "DeliveryStatus")))), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var4_select_Order).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "DeliveryDescription")))), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var4_select_Order).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "HoldCode")))), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var4_select_Order).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "HoldDescription")))), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var4_select_Order).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PendCode")))), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var4_select_Order).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PendDescription")))), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var4_select_Order).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ShipmentMethodCode")))), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var4_select_Order).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PickupLocationCode")))), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var4_select_Order).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ShipmentMethodDescription")))), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var4_select_Order).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "DeliveryTimeCode")))), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var4_select_Order).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "DeliveryTimeDescription"))))));
				current = new MFAttribute("manufacturer", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq92_if_empty(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = new MFAttribute("modelNumber", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq93_if_empty(closure.var1_bv)))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				current = new MFAttribute("serialNumber", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Merchandise).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "SerialNumber"))))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 8;				
				current = new MFAttribute("vendorPartNumber", "", null, com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Merchandise).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Division")))), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Merchandise).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ItemNumber")))))));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(var5_create_parts_description))) {state = 0; return false; }
				current = new MFAttribute("description", "", null, com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first(var5_create_parts_description)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq92_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq92_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq92_if_empty closure;
			com.altova.mapforce.IMFNode var2_select_Merchandise;
			public Enumerator(seq92_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_select_Merchandise = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Merchandise")));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Merchandise).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Brand")))))))) {state = 11; return false; }
				current = "UNKNOWN";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Merchandise).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Brand"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq93_if_empty implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq93_if_empty(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq93_if_empty closure;
			com.altova.mapforce.IMFNode var2_select_Merchandise;
			public Enumerator(seq93_if_empty closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_select_Merchandise = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Merchandise")));
				if (!(com.altova.functions.Lang.empty(com.altova.functions.Core.normalizeSpace(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Merchandise).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Model")))))))) {state = 11; return false; }
				current = "UNKNOWN";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((var2_select_Merchandise).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Model"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq94_content_sales_check_items implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq94_content_sales_check_items(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq94_content_sales_check_items closure;
			public Enumerator(seq94_content_sales_check_items closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				current = new MFAttribute("lineNumber", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "LineNumber"))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = new MFAttribute("division", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Division"))))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				current = new MFAttribute("itemNumber", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ItemNumber"))))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 8;				
				current = new MFAttribute("sku", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "SKU"))))));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 9;				
				current = new MFAttribute("purchaseAmt", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.parseDecimal((java.lang.String)com.altova.functions.Core.first((new seq95_if_equal(closure.var1_bv))))));
				pos++;
				return true;
			}
			private boolean moveNext_9() throws Exception {
				state = 10;				
				current = new MFAttribute("description", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Description"))))));
				pos++;
				return true;
			}
			private boolean moveNext_10() throws Exception {
				state = 11;				
				current = new MFAttribute("quantity", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal((java.lang.String)com.altova.functions.Core.first((new seq96_if_equal(closure.var1_bv)))))))));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 12;				
				current = new MFAttribute("giftFlag", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "GiftFlag"))))));
				pos++;
				return true;
			}
			private boolean moveNext_12() throws Exception {
				state = 0;				
				current = new MFAttribute("giftDate", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "GiftDate"))))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq95_if_equal implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq95_if_equal(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq95_if_equal closure;
			public Enumerator(seq95_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PurchaseAmt")))), ""))) {state = 11; return false; }
				current = "0";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "PurchaseAmt"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq96_if_equal implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq96_if_equal(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq96_if_equal closure;
			public Enumerator(seq96_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Quantity")))), ""))) {state = 11; return false; }
				current = "0";
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Quantity"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq97_content_tasks implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
		com.altova.mapforce.IMFNode var2_bv;
	
		public seq97_content_tasks(com.altova.mapforce.IMFNode var1_bv, com.altova.mapforce.IMFNode var2_bv)
		{
			this.var1_bv = var1_bv;
			this.var2_bv = var2_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq97_content_tasks closure;
			com.altova.mapforce.IMFNode var3_select_Number;
			public Enumerator(seq97_content_tasks closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				var3_select_Number = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Number")));
				current = new MFAttribute("title", "", null, com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.CoreTypes.nodeToString(var3_select_Number), "-"), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Description")))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = new MFAttribute("comments", "", null, com.altova.functions.Core.box(com.altova.functions.Core.concat("Store No:", com.altova.functions.Core.substring(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "SalesCheck")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Number")))), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("1")), com.altova.CoreTypes.decimalToDouble(new java.math.BigDecimal("5"))))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				current = new MFAttribute("default", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.booleanToDecimal(com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Type")))), "R")))))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 8;				
				current = new MFAttribute("externalSku", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString(var3_select_Number)));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 9;				
				current = new MFAttribute("specialtyCode", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var2_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Merchandise")))).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Specialty"))))));
				pos++;
				return true;
			}
			private boolean moveNext_9() throws Exception {
				state = 10;				
				current = new MFAttribute("amount", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Amount")))))));
				pos++;
				return true;
			}
			private boolean moveNext_10() throws Exception {
				state = 11;				
				current = new MFAttribute("sequence_number", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "SequenceNumber"))))))))));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = new MFElement("tasks_oms", "", null, (new seq98_content_tasks_oms(closure.var1_bv)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq98_content_tasks_oms implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_bv;
	
		public seq98_content_tasks_oms(com.altova.mapforce.IMFNode var1_bv)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq98_content_tasks_oms closure;
			public Enumerator(seq98_content_tasks_oms closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 5;				
				current = new MFAttribute("chargeCode", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "ChargeCode"))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = new MFAttribute("coverage", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Coverage"))))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				current = new MFAttribute("type", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Type"))))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 0;				
				current = new MFAttribute("description", "", null, com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((closure.var1_bv).select(IMFNode.MFQueryKind_ChildrenByQName, new javax.xml.namespace.QName("", "Description"))))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}


	private boolean runDoesCloseAll = true;		

	// instances
	protected org.w3c.dom.Node	varRI_Input3Instance;
	protected java.sql.Connection varServiceLiveIntegrationDb10Instance;
	protected long varintegrationId;
		com.altova.db.DbTreeOperations.TransactionHelper transactionHelper;

	public void run(String RI_Input3SourceFilename, java.sql.Connection ServiceLiveIntegrationDb10SourceConnection, long integrationId17SourceParameter, java.sql.Connection ServiceLiveIntegrationDb9TargetConnection) throws Exception {
		// open source streams
		writeTrace("Loading " + RI_Input3SourceFilename + "...\n");
		com.altova.io.FileInput RI_Input3Source = new com.altova.io.FileInput(RI_Input3SourceFilename);

		// run
		run(RI_Input3Source, ServiceLiveIntegrationDb10SourceConnection, integrationId17SourceParameter, ServiceLiveIntegrationDb9TargetConnection);

		// close source streams
		RI_Input3Source.close();
	}


	// main entry point

	public void run(com.altova.io.Input RI_Input3Source, java.sql.Connection ServiceLiveIntegrationDb10SourceConnection, long integrationId17SourceParameter, java.sql.Connection ServiceLiveIntegrationDb9TargetConnection) throws Exception {
		// Open the source(s)
		org.w3c.dom.Document doc_RI_Input3 = XmlTreeOperations.loadDocument(RI_Input3Source);
		varRI_Input3Instance = doc_RI_Input3;
		RI_Input3Source.close();
		writeTrace("Connecting to ServiceLiveIntegrationDb10 database...\n");
			
		varServiceLiveIntegrationDb10Instance = ServiceLiveIntegrationDb10SourceConnection;
		
			varintegrationId = integrationId17SourceParameter;


		// Create the target

		writeTrace("Connecting to ServiceLiveIntegrationDb9 database...\n");
		{

		// Execute mapping

		seq1_Main mapping = new seq1_Main(new com.altova.xml.DOMDocumentAsMFNodeAdapter(varRI_Input3Instance, RI_Input3Source.getFilename()), new com.altova.db.Catalog(varServiceLiveIntegrationDb10Instance), integrationId17SourceParameter);

		writeDB(mapping, ServiceLiveIntegrationDb9TargetConnection);
		// Close the target
		}

		writeTrace("Closing " + ServiceLiveIntegrationDb9TargetConnection + ".\n");
		ServiceLiveIntegrationDb9TargetConnection.close();
		// Close the source
		varServiceLiveIntegrationDb10Instance.close();

		
		if (runDoesCloseAll)
		{
			RI_Input3Source.close();
		}
	}



		static void writeDB(com.altova.mapforce.IEnumerable input, java.sql.Connection target) throws Exception
		{
			com.altova.db.DbTreeOperations.RecordBuffer buf = null;
			com.altova.db.DbTreeOperations.TransactionHelper transactionHelper = new com.altova.db.DbTreeOperations.TransactionHelper(
				target, "", "", "", "SAVEPOINT  %%TRANSACTION_NAME%% ", "ROLLBACK TO SAVEPOINT  %%TRANSACTION_NAME%% "
			);

			com.altova.db.DbTreeOperations.TransactionSentinel sentinel = new com.altova.db.DbTreeOperations.TransactionSentinel(transactionHelper, "");
			try
			{
				for (IEnumerator en = input.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("batches"))
						writeDB_batches5(buf, node, target, transactionHelper);				
				}
				sentinel.commit();
			}
			finally
			{
				sentinel.rollback();
			}
		}

			static void writeDB_batches5(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `batches` (`integrationId`,`fileName`,`statusId`,`createdOn`) VALUES (?,?,?,?)", false);
							command.addParameter(buf.getValue("integrationId"),java.sql.Types.JAVA_OBJECT,2,-1,-1); // Type: smallint 
							command.addParameter(buf.getValue("fileName"),java.sql.Types.JAVA_OBJECT,1024,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("statusId"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("createdOn"),java.sql.Types.JAVA_OBJECT,0,-1,-1); // Type: datetime 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `batchId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				for (IEnumerator en = children.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("transactions"))
						writeDB_transactions5(buf, node, target, transactionHelper);				
				}
				}
			}
			static void writeDB_transactions5(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("batchId", parent.getValue("batchId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `transactions` (`transactionTypeId`,`externalOrderNumber`,`processAfter`,`createdOn`,`statusId`,`batchId`) VALUES (?,?,?,?,?,?)", false);
							command.addParameter(buf.getValue("transactionTypeId"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("externalOrderNumber"),java.sql.Types.JAVA_OBJECT,64,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("processAfter"),java.sql.Types.JAVA_OBJECT,0,-1,-1); // Type: datetime 
							command.addParameter(buf.getValue("createdOn"),java.sql.Types.JAVA_OBJECT,0,-1,-1); // Type: datetime 
							command.addParameter(buf.getValue("statusId"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("batchId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `transactionId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				for (IEnumerator en = children.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("serviceorders"))
						writeDB_serviceorders4(buf, node, target, transactionHelper);				
				}
				}
			}
			static void writeDB_serviceorders4(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("transactionId", parent.getValue("transactionId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `serviceorders` (`retailCancellationFee`,`providerInstructions`,`serviceWindowStartDate`,`serviceWindowStartTime`,`serviceWindowEndDate`,`serviceWindowEndTime`,`templateName`,`nextDay`,`se" +
"rviceWindowTypeFixed`,`externalStatus`,`transactionId`) VALUES (?,?,?,?,?,?,?,?,?,?,?)", false);
							command.addParameter(buf.getValue("retailCancellationFee"),java.sql.Types.JAVA_OBJECT,16,10,2); // Type: decimal 
							command.addParameter(buf.getValue("providerInstructions"),java.sql.Types.JAVA_OBJECT,4096,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceWindowStartDate"),java.sql.Types.JAVA_OBJECT,10,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceWindowStartTime"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceWindowEndDate"),java.sql.Types.JAVA_OBJECT,10,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceWindowEndTime"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("templateName"),java.sql.Types.JAVA_OBJECT,1024,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("nextDay"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("serviceWindowTypeFixed"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("externalStatus"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("transactionId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `serviceOrderId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				for (IEnumerator en = children.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("contacts"))
						writeDB_contacts3(buf, node, target, transactionHelper);				
					if (node.getLocalName().equals("customrefs_oms"))
						writeDB_customrefs_oms(buf, node, target, transactionHelper);				
					if (node.getLocalName().equals("locations"))
						writeDB_locations3(buf, node, target, transactionHelper);				
					if (node.getLocalName().equals("locations (2)"))
						writeDB_locations4(buf, node, target, transactionHelper);				
					if (node.getLocalName().equals("notes"))
						writeDB_notes2(buf, node, target, transactionHelper);				
					if (node.getLocalName().equals("parts"))
						writeDB_parts3(buf, node, target, transactionHelper);				
					if (node.getLocalName().equals("sales_check_items"))
						writeDB_sales_check_items(buf, node, target, transactionHelper);				
					if (node.getLocalName().equals("tasks"))
						writeDB_tasks3(buf, node, target, transactionHelper);				
				}
				}
			}
			static void writeDB_contacts3(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("serviceOrderId", parent.getValue("serviceOrderId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `contacts` (`contactType`,`lastName`,`firstName`,`middleInitial`,`honorific`,`serviceOrderId`) VALUES (?,?,?,?,?,?)", false);
							command.addParameter(buf.getValue("contactType"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("lastName"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("firstName"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("middleInitial"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: char 
							command.addParameter(buf.getValue("honorific"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceOrderId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `contactId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				for (IEnumerator en = children.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("phones"))
						writeDB_phones5(buf, node, target, transactionHelper);				
					if (node.getLocalName().equals("phones (2)"))
						writeDB_phones6(buf, node, target, transactionHelper);				
				}
				}
			}
			static void writeDB_phones5(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("contactId", parent.getValue("contactId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `phones` (`phoneNumber`,`phoneType`,`primary`,`contactId`) VALUES (?,?,?,?)", false);
							command.addParameter(buf.getValue("phoneNumber"),java.sql.Types.JAVA_OBJECT,20,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("phoneType"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("primary"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("contactId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `phoneId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
			static void writeDB_phones6(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("contactId", parent.getValue("contactId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `phones` (`phoneNumber`,`phoneType`,`primary`,`contactId`) VALUES (?,?,?,?)", false);
							command.addParameter(buf.getValue("phoneNumber"),java.sql.Types.JAVA_OBJECT,20,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("phoneType"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("primary"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("contactId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `phoneId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
			static void writeDB_customrefs_oms(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("serviceOrderId", parent.getValue("serviceOrderId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `customrefs_oms` (`unitNumber`,`salesCheckNumber`,`orderNumber`,`salesCheckDate`,`salesCheckTime`,`preferredLanguage`,`serviceRequested`,`sellingAssociate`,`storeNumber`,`scimHandlingCode`" +
",`scimHandlingDescription`,`lastMaintenanceDate`,`merchandiseAvailabilityDate`,`pickupLocationCode`,`specialtyCode`,`merchandiseCode`,`brand`,`orderIdString`,`dateCalculationMethod`,`mainSku`,`processI" +
"d`,`division`,`promisedDate`,`customerNumber`,`serviceOrderId`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", false);
							command.addParameter(buf.getValue("unitNumber"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("salesCheckNumber"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("orderNumber"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("salesCheckDate"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("salesCheckTime"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("preferredLanguage"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceRequested"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("sellingAssociate"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("storeNumber"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("scimHandlingCode"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("scimHandlingDescription"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("lastMaintenanceDate"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("merchandiseAvailabilityDate"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("pickupLocationCode"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("specialtyCode"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("merchandiseCode"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("brand"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("orderIdString"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("dateCalculationMethod"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("mainSku"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("processId"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("division"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("promisedDate"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("customerNumber"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceOrderId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `customRefId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
			static void writeDB_locations3(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("serviceOrderId", parent.getValue("serviceOrderId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `locations` (`locationType`,`locationName`,`locationNotes`,`addressLine1`,`addressLine2`,`city`,`state`,`zipCode`,`serviceOrderId`) VALUES (?,?,?,?,?,?,?,?,?)", false);
							command.addParameter(buf.getValue("locationType"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("locationName"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("locationNotes"),java.sql.Types.JAVA_OBJECT,4096,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("addressLine1"),java.sql.Types.JAVA_OBJECT,1024,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("addressLine2"),java.sql.Types.JAVA_OBJECT,1024,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("city"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("state"),java.sql.Types.JAVA_OBJECT,2,-1,-1); // Type: char 
							command.addParameter(buf.getValue("zipCode"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceOrderId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `locationId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
			static void writeDB_locations4(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("serviceOrderId", parent.getValue("serviceOrderId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `locations` (`locationType`,`addressLine1`,`addressLine2`,`city`,`state`,`zipCode`,`serviceOrderId`) VALUES (?,?,?,?,?,?,?)", false);
							command.addParameter(buf.getValue("locationType"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("addressLine1"),java.sql.Types.JAVA_OBJECT,1024,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("addressLine2"),java.sql.Types.JAVA_OBJECT,1024,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("city"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("state"),java.sql.Types.JAVA_OBJECT,2,-1,-1); // Type: char 
							command.addParameter(buf.getValue("zipCode"),java.sql.Types.JAVA_OBJECT,50,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceOrderId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `locationId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
			static void writeDB_notes2(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("serviceOrderId", parent.getValue("serviceOrderId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `notes` (`text`,`serviceOrderId`) VALUES (?,?)", false);
							command.addParameter(buf.getValue("text"),java.sql.Types.JAVA_OBJECT,4096,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceOrderId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `noteId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
			static void writeDB_parts3(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("serviceOrderId", parent.getValue("serviceOrderId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `parts` (`manufacturer`,`modelNumber`,`serialNumber`,`vendorPartNumber`,`description`,`serviceOrderId`) VALUES (?,?,?,?,?,?)", false);
							command.addParameter(buf.getValue("manufacturer"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("modelNumber"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serialNumber"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("vendorPartNumber"),java.sql.Types.JAVA_OBJECT,255,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("description"),java.sql.Types.JAVA_OBJECT,4096,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceOrderId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `partId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
			static void writeDB_sales_check_items(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("serviceOrderId", parent.getValue("serviceOrderId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `sales_check_items` (`lineNumber`,`division`,`itemNumber`,`sku`,`purchaseAmt`,`description`,`quantity`,`giftFlag`,`giftDate`,`serviceOrderId`) VALUES (?,?,?,?,?,?,?,?,?,?)", false);
							command.addParameter(buf.getValue("lineNumber"),java.sql.Types.JAVA_OBJECT,5,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("division"),java.sql.Types.JAVA_OBJECT,5,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("itemNumber"),java.sql.Types.JAVA_OBJECT,18,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("sku"),java.sql.Types.JAVA_OBJECT,18,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("purchaseAmt"),java.sql.Types.JAVA_OBJECT,16,10,2); // Type: decimal 
							command.addParameter(buf.getValue("description"),java.sql.Types.JAVA_OBJECT,1024,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("quantity"),java.sql.Types.JAVA_OBJECT,4,-1,-1); // Type: int 
							command.addParameter(buf.getValue("giftFlag"),java.sql.Types.JAVA_OBJECT,4,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("giftDate"),java.sql.Types.JAVA_OBJECT,15,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("serviceOrderId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `itemId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
			static void writeDB_tasks3(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("serviceOrderId", parent.getValue("serviceOrderId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `tasks` (`title`,`comments`,`default`,`externalSku`,`specialtyCode`,`amount`,`sequence_number`,`serviceOrderId`) VALUES (?,?,?,?,?,?,?,?)", false);
							command.addParameter(buf.getValue("title"),java.sql.Types.JAVA_OBJECT,1024,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("comments"),java.sql.Types.JAVA_OBJECT,4096,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("default"),java.sql.Types.JAVA_OBJECT,1,-1,-1); // Type: tinyint 
							command.addParameter(buf.getValue("externalSku"),java.sql.Types.JAVA_OBJECT,18,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("specialtyCode"),java.sql.Types.JAVA_OBJECT,30,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("amount"),java.sql.Types.JAVA_OBJECT,16,10,2); // Type: decimal 
							command.addParameter(buf.getValue("sequence_number"),java.sql.Types.JAVA_OBJECT,4,-1,-1); // Type: int 
							command.addParameter(buf.getValue("serviceOrderId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `taskId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				for (IEnumerator en = children.enumerator(); en.moveNext();)
				{
					IMFNode node = (IMFNode) en.current();
					if (node.getLocalName().equals("tasks_oms"))
						writeDB_tasks_oms(buf, node, target, transactionHelper);				
				}
				}
			}
			static void writeDB_tasks_oms(com.altova.db.DbTreeOperations.RecordBuffer parent, IMFNode record, java.sql.Connection target, com.altova.db.DbTreeOperations.TransactionHelper transactionHelper) throws Exception
			{
				
				IEnumerable children = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllChildren, null);
				IEnumerable attributes = record.select(com.altova.mapforce.IMFNode.MFQueryKind_AllAttributes, null);
				com.altova.db.DbTreeOperations.RecordBuffer buf = new com.altova.db.DbTreeOperations.RecordBuffer(target);
				boolean bProcessChildren = true;
				boolean bRowsAffected = false;
				boolean bDeleteRow = false;
				buf.setValue("taskId", parent.getValue("taskId"));
				for (IEnumerator en = attributes.enumerator(); en.moveNext();)
				{					
					IMFNode field = (IMFNode) en.current();
					buf.setValue(field.getLocalName(), field.typedValue());
				}
				if(!bRowsAffected) {
					java.util.ArrayList	cmdList = new java.util.ArrayList();
					com.altova.db.Command command;

							command = new com.altova.db.Command("INSERT INTO `tasks_oms` (`chargeCode`,`coverage`,`type`,`description`,`taskId`) VALUES (?,?,?,?,?)", false);
							command.addParameter(buf.getValue("chargeCode"),java.sql.Types.JAVA_OBJECT,256,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("coverage"),java.sql.Types.JAVA_OBJECT,256,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("type"),java.sql.Types.JAVA_OBJECT,256,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("description"),java.sql.Types.JAVA_OBJECT,1024,-1,-1); // Type: varchar 
							command.addParameter(buf.getValue("taskId"),java.sql.Types.JAVA_OBJECT,8,-1,-1); // Type: bigint 
							cmdList.add(command);
							command = new com.altova.db.Command("SELECT @@IDENTITY AS `taskOmsId`", true);
							cmdList.add(command);

							bRowsAffected = buf.execute(cmdList, transactionHelper);
				}
	
				if (bProcessChildren)
				{					
				}
			}
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}
	static IEnumerable throwUserException(String content)
	{
		throw new com.altova.UserException(content);
	}
}
