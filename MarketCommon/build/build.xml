<?xml version="1.0" encoding="UTF-8"?>

<project name="MarketCommon" basedir="../" default="distribute">
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
	<property name="dir.slCommonBuild.generated" value="../SLCommonBuild/lib/generated" />
	<echo level="info">
	===============================================================================
	                                ${ant.project.name} 
	===============================================================================</echo>
	<target name="package" depends="distribute"/>

	<target name="init">	
		
		<!-- Create the time stamp -->
	    	<tstamp/>
	    <!-- Create build number file -->
			<buildnumber />
		<property name="dir.base" value="${basedir}" />
		<property name="dir.overall.base" value="${dir.base}/overall/base" />

		<property name="dir.product.bin" value="${dir.base}/overall/product/bin" />		
		
		<property name="dir.source" value="${dir.base}/src" />
		<property name="dir.resources" value="${dir.base}/resources" />
		<property name="dir.dest" value="${dir.base}/bin" />
		<property name="dir.build" value="${dir.base}/build" />
		<property name="dir.test" value="${dir.base}/test" />
		<property name="dir.moving-parts" value="${dir.base}/overall/product/moving-parts" />
		<property name="dir.archive" value="${dir.base}/archive" />
		
		<property name="env" value="dev" />
		<property name="app.lastbuild.tag.auto" value="release_1_${build.number}_${env}_${DSTAMP}${TSTAMP}" />	
	
		<property name="dir.service.live.web.util.base" value="../ServiceLiveWebUtil" />
		<property name="deployables.lib" value="${dir.service.live.web.util.base}/lib/deployables"/>
		<property name="nondeployables.lib" value="${dir.service.live.web.util.base}/lib/nondeployables"/>
		<property name="struts2InitialDeployables.lib" value="${dir.service.live.web.util.base}/lib/Struts2InitialDeployables"/>
		<property name="dir.wallet.ServiceLive.Common.base" value="../Wallet/ServiceLive.Common" />
		<property name="dir.slCommonBuild.nondeployables" value="../SLCommonBuild/lib/nondeployables"/>
		<!-- Folder containing uncompressed final release software-->
		<property name="dir.dist" value="${dir.base}/dist"/>

		<!-- TODO JUnit source dir path -->
		<property name="dir.junit.report" value="${dir.base}/${ant.project.name}Reports" />
		    
		<path id="build.class.path">
			<fileset dir="${deployables.lib}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${struts2InitialDeployables.lib}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${nondeployables.lib}">
				<include name="*.jar"/>
			</fileset>			
			<fileset dir="${dir.wallet.ServiceLive.Common.base}/target/dist">
				<include name="*.jar"/>
			</fileset>
		</path>
	</target>

	<target name="clean" depends="init">
		<delete dir="${dir.dest}" failonerror="false"/>
		<mkdir dir="${dir.dest}"/>
		<delete dir="${dir.dist}" failonerror="false"/>
		<mkdir dir="${dir.dist}"/>
		<delete dir="${dir.junit.report}" failonerror="false"/>
		<mkdir dir="${dir.junit.report}"/>	
	</target>
	
	<target name="compile" depends="clean">
		
		<javac
			srcdir="${dir.source}"
			destdir="${dir.dest}"
			classpathref="build.class.path"
			target="1.5"
			source="1.5"
			debug="on"
			deprecation="false"
		/>
		
		<copy todir="${dir.dest}">
			<fileset dir="${dir.source}">
				<include name="**/*.xml"/>
			</fileset>
			<fileset dir="${dir.source}">
				<include name="**/*.tld"/>
			</fileset>
			<fileset dir="${dir.source}">
				<include name="**/*.properties"/>
			</fileset>
		</copy>
		
		<!--<antcall target="config"/> -->   
		
		<jar compress="yes" jarfile="${dir.dist}/MarketCommon.jar">
	            <fileset dir="${dir.dest}">
	                <include name="**/*.class"/>
	            </fileset>
			<fileset dir="${dir.resources}" />
	    </jar>
	</target>
	
	<target name="update-distribute" depends="update,distribute">
	</target>

	<target name="slcommonbuildcopy" depends="compile">
	        <copy file="${dir.dist}/MarketCommon.jar" tofile="${dir.slCommonBuild.generated}/MarketCommon.jar" />
	</target>
	
	<target name="compile-test" depends="slcommonbuildcopy">
		<javac
			srcdir="${dir.test}"
			destdir="${dir.dest}"
			classpathref="build.class.path"
			target="1.5"
			source="1.5"
			debug="on"
			deprecation="false"
		/>
		<copy todir="${dir.dest}">
			<fileset dir="${dir.test}">
				<include name="**/*.xml"/>
			</fileset>
			<fileset dir="${dir.test}">
				<include name="**/*.tld"/>
			</fileset>
			<fileset dir="${dir.test}">
				<include name="**/*.properties"/>
			</fileset>
		</copy>		
	</target>
	
	<!--<target name="create-dirs" depends="init">
		<mkdir dir="${dir.dest}" />
		<mkdir dir="${dir.app}/WEB-INF/classes" />
	        <mkdir dir="${dir.dist}"/>
	        <mkdir dir="${dir.dist}/lib"/>
	</target> -->

	<target name="config">
		<if>
		 <equals arg1="${env}" arg2="prod" />
		 <then>
			<copy file="${dir.moving-parts}/bootstrap.prod.properties" tofile="${dir.app}/WEB-INF/bootstrap.properties"/>
			<copy file="${dir.moving-parts}/bootstrap.prod.properties" tofile="${dir.app}/WEB-INF/classes/bootstrap.properties"/>
			<echo message="*****--- Setting Up Build For Production Environment ---*****"/>
		 </then>
		 <else>
			<if>
			 <equals arg1="${env}" arg2="qa" />
			 <then>
				<copy file="${dir.moving-parts}/bootstrap.qa.properties" tofile="${dir.app}/WEB-INF/bootstrap.properties"/>
				<copy file="${dir.moving-parts}/bootstrap.qa.properties" tofile="${dir.app}/WEB-INF/classes/bootstrap.properties"/>
				<echo message="*****--- Setting Up Build For QA Environment ---*****"/>
			 </then>
			 <else>
				<copy file="${dir.moving-parts}/bootstrap.dev.properties" tofile="${dir.app}/WEB-INF/bootstrap.properties"/>
				<copy file="${dir.moving-parts}/bootstrap.dev.properties" tofile="${dir.app}/WEB-INF/classes/bootstrap.properties"/>
				<echo message="*****--- Setting Up Build For Dev Environment ---*****"/>
			 </else>
			</if>
		 </else>
		</if>
	</target>



	<target name="cleanWorkDir">
		<delete dir="work"/>
	</target>
		
	<target name="initWorkDir">
		<mkdir dir="work"/>
	</target>
	
	<target name="junit-report" description="Runs the JUnit test cases" depends="compile-test">
		<junit fork="yes" haltonfailure="false" printsummary="withOutAndErr" showoutput="yes">		
			<classpath>
				<pathelement path="${build.class.path}"/> 
				<pathelement path="${dir.slCommonBuild.nondeployables}/junit.jar"/> 
				<pathelement path="${dir.dest}"/>
				<fileset dir="${deployables.lib}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
	
			<formatter type="xml" />
				
			<batchtest fork="yes" todir="${dir.junit.report}" >	 
				<fileset dir="${dir.test}" >
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>	  
		</junit>
		<echo message="build date ">${DSTAMP}${TSTAMP}</echo>
		<echo message="build.number ">${build.number}</echo>
		<echo message="full tag ">${app.lastbuild.tag.auto}</echo>
		
		<echo message="Format the tests report" />
		<junitreport todir="${dir.junit.report}">
			<fileset dir="${dir.junit.report}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${dir.junit.report}" />
		</junitreport>

	</target>
	
	<target name="junitinternal" depends="compile-test, cleanWorkDir, initWorkDir">
			<junit fork="yes" haltonfailure="${junit.haltonfailure}" printsummary="withOutAndErr" showoutput="yes">
			
			<classpath>
				<pathelement path="${java.class.path}"/>
				<pathelement path="${dir.dest}"/>
				<fileset dir="${endorsed.lib}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>

			<test name="com.newco.AllTests" todir="work">
				<formatter type="plain" />
			</test>
			</junit>
			<echo message="build date ">${DSTAMP}${TSTAMP}</echo>
			<echo message="build.number ">${build.number}</echo>
			<echo message="full tag ">${app.lastbuild.tag.auto}</echo>

	</target>
	
	<!-- Target to refresh all the non-sources to be obtained from the repository -->	
	<target name="refresh" description="Refresh Market from CVS repository" depends="init">
		<cvs command="login" cvsroot="${app.CVSROOT}" />
		<mkdir dir="."/>
		<cvs command="update -A Market" cvsroot="${app.CVSROOT}" dest="${source.dir.CVS}"/>
	</target>
	
	<!-- Target to refresh all the non-sources to be obtained from the repository -->	
	<target name="update" description="Refresh project from CVS repository" depends="init">
		<cvs command="-q update -C -d -P" cvsroot=":pserver:ajain04:ajain04@chef.sears.com:2402/cvs/source" 
					package="." dest="${basedir}"/>
	</target>
	
	<!-- Tag the files that are just used in the build with the id of the build-->
	<target name="tag" depends="clean, init">
		<cvs command="tag -R -c ${app.lastbuild.tag}" cvsroot="${app.CVSROOT}" package="."/>
		<echo message="*****--- Tagged ALL modules with TAG ${app.lastbuild.tag} ---*****"/>
	</target>
	
	<!-- Target to refresh all tagged files -->
	<target name="refreshtag" depends="clean, init">
		<cvs command="update -A" cvsroot="${app.CVSROOT}" tag="${app.build.tag}" dest="${source.dir.CVS}" />
		<echo message="*****--- Refreshing ALL modules with TAG ${app.build.tag} ---*****"/>
	</target>
	
	<target name="autotag" depends="clean, init">
		<cvs command="tag -R -c ${app.lastbuild.tag.auto}" cvsroot="${app.CVSROOT}" package="."/>
		<echo message="*****--- Tagged ALL modules with TAG ${app.lastbuild.tag} ---*****"/>
	</target>
	
	<target name="mail" depends="init">
		<taskdef name="mimemail" 
		classname="org.apache.tools.ant.taskdefs.optional.mail.MimeMail"/>
		<tstamp/>
		<mimemail 
		   messageMimeType="text/html"
   		   messageFile="${dir.overall.base}/build.txt"
		   tolist="${product.email.list}"
		   mailhost="${smtp.server.name}"
		   subject="${app.build.tag.prefix}_${env}_${DSTAMP}${TSTAMP} - Build Completed Successfully"
		   from="${product.projectowner.email}">
		</mimemail>
	</target>
	
    <!-- Publish the deployment units to the website -->
    <target name="publish" depends="init">    
    	 <scp file="${deploy.local.filepath}/${deploy.local.filename}"
    	       todir="${server.username}:${server.password}@${server.name}:${deploy.remote.dir}" 
    	 	   trust="true"	 
    	 />
    </target>
	
	<!-- This target creates a milestone build -->	
	<target name="milestone" description="Perform a milestone build" depends="init">
		<antcall target="refresh"/>  
		<antcall target="deploy"/>      
		<antcall target="mail"/>
		
		<if>
		 <equals arg1="${auto.publish}" arg2="on" />
		 <then>					
		  	  <input
		  	    message="Are you sure you wish to Publish to the ${env} server?"
		  	    validargs="y,n"
		  	    addproperty="do.publish"
		  	  />
		  	  <condition property="do.abort">
		  	    <equals arg1="n" arg2="${do.publish}"/>
		  	  </condition>
		  	  <fail if="do.abort">Publish aborted by user.</fail>

		 	  <if>
			  	<equals arg1="${do.publish}" arg2="y"/>
			  	<then>
			  		<antcall target="publish"/>  
				 	<echo message="*****--- Successfully Published Milestone Build of ${app.product.name}  to ${env} server ---*****"/>
			  	</then>
			  </if>		 	
		 </then>		
		 <else>
		 	<echo message="*****--- Auto Publish of Milestone Build of ${app.product.name} to ${env} server is currently turned off ---*****"/>
		 </else>
		</if>
			
		<echo message="*****--- Successfully Completed Milestone Build of ${app.product.name}          ---*****"/>
		<echo message="*****--- Please Note:                                                           ---*****"/>
		<echo message="*****---              This build should be tagged after a successful smoke test ---*****"/>
		<echo message="*****---              Update tag id in build.properties.                        ---*****"/>
		<echo message="*****---              Run 'ant tag' to tag this build.                          ---*****"/>
	</target>

	<target name="distribute" depends="junit-report">
	</target>	
		
	<!-- Sonar Integration -->
	<property name="dir.sonar.src" value="${basedir}/src" />
	<property name="dir.sonar.ant.task" value="../SLCommonBuild/lib/nondeployables"/>
	<import file="../../SLCommonBuild/ant/opt/ant-script-library/asl-java-sonar.xml"/>
	<target name="sonar" depends="sonar-init, sonar-run">
	</target>
</project>
