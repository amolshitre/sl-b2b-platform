################################################################### This script downloads the SHC Speciality Add on SKU#AUTHOR : Tommie Jackson#DATE : 02/25/2009 ################################################################### This is for testing purpose  #HOST=ftp://151.149.159.113#USER=sldev#PASSWORD=sldev!HOST=ftp://storm.shs.sears.comUSER=risuserPASSWORD=ris1userSCRIPTDIR=/home/jboss/scriptsLOGFILE=${SCRIPTDIR}/logs/load_shc_speciality_sku.logSTORM_OUTDATA_DIR=/home/sldev/addonARCHIVEDIR=/home/jboss/scripts/archiveDATE=`date +%Y%m%d`#FILE_REG_EXP=STKNUMSLCLS.$DATE.*FILE_REG_EXP=STKNUMSLCLS*DBNAME=QA_I26_SPN_SUPPLIERSCH_DIR=load_sch_${DATE}#------------------------------------------------------------------logit(){	msg=$1	echo `date '+%m%d%y:%H%M%S ' ` ${msg} >> ${LOGFILE}}#------------------------------------------------------------------logit "Start"cd /tmp# lets make a directory that we can blow away at the end of the script# if all is good if [ -d ${SCH_DIR} ]then 	logit "Directory Exist so moving it to temp location"	mv ${SCH_DIR} ${SCH_DIR}_$$fimkdir ${SCH_DIR}if [ "$?" -ne 0 ] then	logit "Error creating temp dir to get SKU"	exit 1ficd ${SCH_DIR}## log in the server and get a list of files we want #lftp -u $USER,$PASSWORD $HOST <<EOFcd $STORM_OUTDATA_DIRcls -l --sort="date" $FILE_REG_EXP > filelist.txtEOF## take the files from oldest to newest #file_to_get=`cat filelist.txt | grep -v "^d" | awk '{print $9}'`echo "------------"echo $file_to_getecho "------------"for fn in $file_to_getdolftp -u $USER,$PASSWORD $HOST <<EOFmget -E $STORM_OUTDATA_DIR/$fnbyeEOFSKUFLNM=`ls -ltr /tmp/${SCH_DIR}/STKNUMSLCLS.* |awk '{print $9}'`chmod a+x $SKUFLNMif [ "$?" -ne 0 ] then	echo "Error changing ${SKUFLNM}"	exit 2 fiecho "---------------------------------";echo "Deleting from shc_specialty_sku";echo "--------------------------------";logit "Deleting from shc_specialty_sku before load"mysql -u supply_usr --password=supply --show-warnings $DBNAME -e "TRUNCATE shc_specialty_sku";logit "Done deleting shc_specialty_sku before the load"echo "--------------------------------";echo "loading to shc_specialty_sku";echo "--------------------------------";FILEN=${SKUFLNM}logit "Processing the following file ${SKUFLNM}"mysql -u supply_usr --password=supply --show-warnings $DBNAME -e "LOAD DATA LOCAL INFILE '$SKUFLNM'  REPLACE INTO TABLE shc_specialty_sku FIELDS TERMINATED BY '|'  LINES TERMINATED BY '\n'  (specialty_code, specialty_description, major_heading_code, major_heading_description, sub_heading_code, sub_heading_description, classification_code, classification_description, coverage, coverage_description, job_code_suffix, stock_number, job_code_descripton, long_description, inclusion_description, sequence, contractor_cost_type, contractor_cost_type_description, dispatch_days_out, mark_up_percentage, active_date, update_date, deactive_date) ;"if [ $? != 0 ]then	logit "Process of ${SKUFLNM} failled"else	logit "Copying File to archive ${SKUFLNM}"	cp ${FILEN} ${ARCHIVEDIR}	if [ $? != 0 ]	then		logit "Copy of file to archive failed"	else		logit "Removing File to archive ${SKUFLNM}"		rm  ${FILEN}	fifidoneecho "--------------------------------";echo "Updating specialty_add_on";echo "--------------------------------";logit "Updating the specialty_add_on from the script";mysql -u supply_usr --password=supply --show-warnings $DBNAME -e "INSERT INTO specialty_add_on (specialty_code, specialty_description, major_heading_code, major_heading_description, sub_heading_code ,  sub_heading_description, classification_code, classification_description, coverage, coverage_description, job_code_suffix,  stock_number, job_code_descripton, long_description, inclusion_description, sequence, contractor_cost_type, contractor_cost_type_description, dispatch_days_out,  mark_up_percentage, active_date, update_date, deactive_date, created_date, modified_date, modified_by) select specialty_code, specialty_description, major_heading_code, major_heading_description, sub_heading_code, sub_heading_description, classification_code, classification_description, coverage, coverage_description, job_code_suffix, stock_number, job_code_descripton, long_description, inclusion_description, sequence, contractor_cost_type, contractor_cost_type_description, dispatch_days_out, mark_up_percentage, active_date, update_date,deactive_date, created_date, modified_date, modified_by from shc_specialty_sku On duplicate key update  specialty_description = VALUES(specialty_description), major_heading_code = VALUES(major_heading_code), major_heading_description = VALUES(major_heading_description ), sub_heading_code = VALUES(sub_heading_code) , sub_heading_description = VALUES(sub_heading_description), classification_code = VALUES(classification_code), 	classification_description = VALUES(classification_description), coverage= VALUES(coverage), coverage_description = VALUES(coverage_description), Job_code_suffix = VALUES(job_code_suffix), stock_number = VALUES(stock_number), job_code_descripton = VALUES(job_code_descripton), long_description = VALUES(long_description), inclusion_description = VALUES(inclusion_description),sequence = VALUES(sequence), contractor_cost_type = VALUES(contractor_cost_type), contractor_cost_type_description = VALUES(contractor_cost_type_description), dispatch_days_out = VALUES(dispatch_days_out), mark_up_percentage = VALUES(mark_up_percentage), active_date = VALUES(active_date), deactive_date = VALUES(deactive_date)";logit "Done Updating the specialty_add_on table";echo "--------------------------------";echo "Deleting from shc_specialty_sku";echo "--------------------------------";logit "Deleting from shc_specialty_sku before load"mysql -u supply_usr --password=supply --show-warnings $DBNAME -e "TRUNCATE shc_specialty_sku";logit "Done deleting shc_specialty_sku before the load"logit "Removing Directory /tmp/${SCH_DIR}"if [ -d /tmp/${SCH_DIR} ]then	rm -rf /tmp/${SCH_DIR}filogit "end"