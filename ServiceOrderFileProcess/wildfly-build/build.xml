<?xml version="1.0" encoding="UTF-8"?>

<project name="ServiceOrderFileProcess" basedir="../" default="distribute">
	<echo level="info">
	===============================================================================
	                                ${ant.project.name} 
	===============================================================================</echo>	
	<target name="package" depends="distribute"/>

	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Create build number file -->
		<buildnumber />
		<property name="dir.base" value="${basedir}" />
		<property name="dir.overall.base" value="${dir.base}/overall/base" />
		<property file="${dir.overall.base}/build.properties" />
		<property name="dir.product.bin" value="${dir.base}/overall/product/bin" />
		<property name="dir.app" value="${dir.base}/web" />
		<property name="dir.source" value="${dir.base}/src/main/java" />
		<property name="dir.resources" value="${dir.base}/src/main/resources" />
		<property name="dir.dest" value="${dir.base}/bin" />
		<property name="dir.omsstaging.dist" value="../OMSStaging/dist" />
		<property name="dir.build" value="${dir.base}/wildfly-build" />
		<property name="dir.test" value="${dir.base}/src/test/java" />
		<property name="dir.moving-parts" value="${dir.base}/overall/product/moving-parts" />
		<property name="dir.archive" value="${dir.base}/archive" />
		<property name="dir.market.backend.base" value="../MarketBackend"/>
		<property name="dir.market.document.base" value="../MarketDocument"/>
		<property name="dir.market.frontend.base" value="../MarketFrontend"/>
		<property name="dir.market.backend.dist" value="../MarketBackend/dist" />
		<property name="dir.market.bi.dist" value="../MarketBusinessInterface/target/dist" />
		<property name="dir.market.common.dist" value="../MarketCommon/dist" />
		<property name="dir.wallet.ServiceLive.Common.dist" value="../Wallet/ServiceLive.Common" />
		<property name="dir.routing.rule.dist" value="../RoutingRulesEngine/target/dist" />
		<property name="dir.common.domain.dist" value="../ServiceLiveCommonDomain/target/dist" />
		<property name="dir.market.document.dist" value="${dir.market.document.base}/dist" />
		<property name="env" value="dev" />
		<property name="app.lastbuild.tag.auto" value="release_1_${build.number}_${env}_${DSTAMP}${TSTAMP}" />
		
		<property name="junit-report.dir" value="${basedir}/${ant.project.name}Reports" />
		<property name="dir.slCommonBuild.nondeployables" value="../SLCommonBuild/lib/nondeployables"/>
		<!-- Folder under which all the libraries are kept -->
		<property name="global.lib.endorsed" value="${dir.base}/lib/endorsed"/>
		<property name="dir.service.live.web.util.base" value="../ServiceLiveWebUtil" />
		<property name="deployables.lib" value="${dir.service.live.web.util.base}/lib/deployables"/>
		<property name="struts2InitialDeployables.lib" value="${dir.service.live.web.util.base}/lib/Struts2InitialDeployables"/>
		<property name="nondeployables.lib" value="${dir.service.live.web.util.base}/lib/nondeployables"/>

		<taskdef resource="net/sf/antcontrib/antcontrib.properties">
			<classpath>
				<pathelement location="${nondeployables.lib}/ant-contrib-1.0b3.jar"/>
			</classpath>
		</taskdef>


		<!-- Folder containing uncompressed final release software-->
		<property name="dir.dist" value="${dir.base}/dist"/>

		<path id="build.class.path">
			<fileset dir="${dir.wallet.ServiceLive.Common.dist}/target/dist">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${global.lib.endorsed}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${deployables.lib}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${struts2InitialDeployables.lib}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${nondeployables.lib}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${dir.market.backend.dist}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${dir.market.bi.dist}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${dir.market.common.dist}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${dir.market.document.dist}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${dir.routing.rule.dist}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${dir.common.domain.dist}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${dir.omsstaging.dist}">
				<include name="OMSStaging.jar"/>
			</fileset>
			<fileset dir="${dir.slCommonBuild.nondeployables}">
	    		<include name="mockito-all-1.8.4.jar"/>
    		</fileset>
		</path>

		<path id="test.class.path">
    		<pathelement location="${build.class.path}" />
			<pathelement location="${dir.dest}"/>
    		<fileset dir="${dir.slCommonBuild.nondeployables}">
	    			<include name="junit.jar" />
	    			<include name="hamcrest-core-1.1.jar" />
	    			<include name="hamcrest-library-1.1.jar" />
	    			<include name="mockito-all-1.8.4.jar"/>
    		</fileset>				
			<fileset dir="${deployables.lib}">
					<include name="*.jar"/>
			</fileset>
			<fileset dir="${dir.market.bi.dist}">
					<include name="*.jar"/>
			</fileset>
			<fileset dir="${dir.market.common.dist}">
					<include name="*.jar"/>
			</fileset>
		</path>
	</target>

	<target name="clean" depends="init">
		<delete includeEmptyDirs="true">
			<fileset dir="${dir.base}" includes="**/*.class" />
			<fileset dir="${dir.base}" includes="**/*.war" />
		</delete>

		<delete dir="${dir.dest}" />
		<mkdir dir="${dir.dest}"/>

		<delete dir="${dir.dist}" quiet="true" failonerror="false"/>
		<mkdir dir="${dir.dist}"/>
		
		<delete dir="${junit-report.dir}" failonerror="false"/>
		<mkdir dir="${junit-report.dir}"/>
	</target>

	<target name="compile" depends="clean">
		<javac 
				srcdir="${dir.source}" 
				destdir="${dir.dest}" 
				classpathref="build.class.path" 
				target="1.8"
				source="1.8"
				debug="on" 
				deprecation="false" />
	</target>

	<target name="jar" depends="init, clean, compile">
		<jar compress="yes" jarfile="${dir.dist}/ServiceOrderFileProcess.jar">
			<fileset dir="${dir.dest}">
				<include name="**/*.class" />
			</fileset>
			<fileset dir="${dir.resources}">
				<include name="**/*" />
			</fileset>
		</jar>
	</target>
	
	<target name="compile-test" depends="jar">
			<javac
				srcdir="${dir.test}"
				destdir="${dir.dest}"
				classpathref="build.class.path"
				target="1.8"
				source="1.8"
				debug="on"
				deprecation="false"
			/>	
	</target>
	
	<target name="junit-report" description="Runs the JUnit test cases" depends="compile-test">			
			<junit fork="yes" haltonfailure="false" printsummary="withOutAndErr" showoutput="yes">		
				<classpath>
						<path refid="test.class.path"/>						  				
				</classpath>
		
				<formatter type="xml" />
					
				<batchtest fork="yes" todir="${junit-report.dir}" >	 
					<fileset dir="${dir.test}" >
						<include name="**/*Test.java" />
					</fileset>
				</batchtest>	  
			</junit>
			<echo message="build date ">${DSTAMP}${TSTAMP}</echo>
			<echo message="build.number ">${build.number}</echo>
			<echo message="full tag ">${app.lastbuild.tag.auto}</echo>
	
			<echo message="Format the tests report" />
			<junitreport todir="${junit-report.dir}">
				<fileset dir="${junit-report.dir}">
					<include name="TEST-*.xml" />
				</fileset>
				<report todir="${junit-report.dir}" />
			</junitreport>		
	</target>
	
	<target name="distribute" depends="junit-report">	
	</target>
	
	<!-- Sonar Integration -->
	<property name="dir.sonar.src" value="${basedir}/src/main/java" />
	<property name="dir.sonar.ant.task" value="../SLCommonBuild/lib/nondeployables"/>
	<import file="../../SLCommonBuild/ant/wildfly-opt/ant-script-library/asl-java-sonar.xml"/>
	<target name="sonar" depends="sonar-init, sonar-run">
	</target>
		
	<!-- Called by CruiseControl -->
	<target name="update-distribute" depends="update,distribute">
	</target>

	<!-- Target to refresh all the non-sources to be obtained from the repository -->
	<target name="update" description="Refresh project from CVS repository" depends="init">
		<cvs command="-q update -d -P" cvsroot=":pserver:ajain04:ajain04@chef.sears.com:2402/cvs/source" 
						package="." dest="${basedir}"/>
	</target>


	<!-- Target to refresh all the non-sources to be obtained from the repository -->
	<target name="refresh" description="Refresh MarketWebServices from CVS repository" depends="init">
		<cvs command="login" cvsroot="${app.CVSROOT}" />
		<mkdir dir="."/>
		<cvs command="update -A MarketWebServices" cvsroot="${app.CVSROOT}" dest="${source.dir.CVS}"/>
	</target>

	<!-- Tag the files that are just used in the build with the id of the build-->
	<target name="tag" depends="clean, init">
		<cvs command="tag -R -c ${app.lastbuild.tag}" cvsroot="${app.CVSROOT}" package="."/>
		<echo message="*****--- Tagged ALL modules with TAG ${app.lastbuild.tag} ---*****"/>
	</target>

	<!-- Target to refresh all tagged files -->
	<target name="refreshtag" depends="clean, init">
		<cvs command="update -A" cvsroot="${app.CVSROOT}" tag="${app.build.tag}" dest="${source.dir.CVS}" />
		<echo message="*****--- Refreshing ALL modules with TAG ${app.build.tag} ---*****"/>
	</target>

	<target name="autotag" depends="clean, init">
		<cvs command="tag -R -c ${app.lastbuild.tag.auto}" cvsroot="${app.CVSROOT}" package="."/>
		<echo message="*****--- Tagged ALL modules with TAG ${app.lastbuild.tag} ---*****"/>
	</target>


	<!-- This target creates a milestone build -->
	<target name="milestone" description="Perform a milestone build" depends="init">
		<antcall target="refresh"/>
		<antcall target="deploy"/>
		<antcall target="mail"/>

		<if>
			<equals arg1="${auto.publish}" arg2="on" />
			<then>
				<input
		  	    message="Are you sure you wish to Publish to the ${env} server?"
		  	    validargs="y,n"
		  	    addproperty="do.publish"
		  	  />
				<condition property="do.abort">
					<equals arg1="n" arg2="${do.publish}"/>
				</condition>
				<fail if="do.abort">Publish aborted by user.</fail>

				<if>
					<equals arg1="${do.publish}" arg2="y"/>
					<then>
						<antcall target="publish"/>
						<echo message="*****--- Successfully Published Milestone Build of ${app.product.name}  to ${env} server ---*****"/>
					</then>
				</if>
			</then>
			<else>
				<echo message="*****--- Auto Publish of Milestone Build of ${app.product.name} to ${env} server is currently turned off ---*****"/>
			</else>
		</if>

		<echo message="*****--- Successfully Completed Milestone Build of ${app.product.name}          ---*****"/>
		<echo message="*****--- Please Note:                                                           ---*****"/>
		<echo message="*****---              This build should be tagged after a successful smoke test ---*****"/>
		<echo message="*****---              Update tag id in build.properties.                        ---*****"/>
		<echo message="*****---              Run 'ant tag' to tag this build.                          ---*****"/>
	</target>
</project>
