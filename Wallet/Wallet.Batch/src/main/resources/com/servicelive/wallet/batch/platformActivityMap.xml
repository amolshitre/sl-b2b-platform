<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">
<sqlMap>

	<typeAlias alias="balance"
		type="com.servicelive.wallet.batch.activity.vo.SpBalanceReportVO" />
	<typeAlias alias="fulfillmentReportVO"
		type="com.servicelive.wallet.batch.activity.vo.DailyFulfillmentReportVO" />
	<typeAlias alias="walletVO"
		type="com.servicelive.wallet.batch.activity.vo.WalletBalanceVO" />
		

    <resultMap id="spBalanceReportResult" class="balance">
        <result property="entityTypeId" column="entity_type_id"/>
        <result property="entityId" column="entity_id"/>
        <result property="accountType" column="account_type"/>
        <result property="promoCode" column="promo_code"/>
        <result property="account" column="v_account"/>
        <result property="slBalance" column="sl_balance"/>
        <result property="slBalanceDate" column="sl_balance_date"/>
        <result property="vlBalance" column="vl_balance"/>
        <result property="vlBalanceDate" column="vl_balance_date"/>
    </resultMap>

    <resultMap id="spWalletResult" class="walletVO">
        <result property="ledgerEntryId" column="ledger_entry_id"/>
        <result property="transAmount" column="trans_amount"/>
        <result property="validatedAmount" column="validated_amount"/>
    </resultMap>

    <parameterMap id="spFulfillmentRptMap" class="java.util.Map">
        <parameter property="rptDate" mode="IN"/>
    </parameterMap>

    <parameterMap id="spAvailableBalanceMap" class="java.util.Map">
        <parameter property="startDate" mode="IN"/>
        <parameter property="endDate" mode="IN"/>
        <parameter property="entityType" mode="IN"/>
        <parameter property="entityId" mode="IN"/>
    </parameterMap>

    <parameterMap id="spProjectBalanceMap" class="java.util.Map">
        <parameter property="startDate" mode="IN"/>
        <parameter property="endDate" mode="IN"/>
        <parameter property="entityId" mode="IN"/>
    </parameterMap>

	<procedure id="spBalanceReport" parameterMap="spFulfillmentRptMap" resultMap="spBalanceReportResult">
       { call sp_balance_report(?) } 
	</procedure>

	<procedure id="spFulfillmentHealthReport"  parameterMap="spFulfillmentRptMap">
       { call sp_fulfillment_daily_report(?) } 
	</procedure>

	<procedure id="spAvailableBalanceVerification" parameterMap="spAvailableBalanceMap" resultMap="spWalletResult">
       { call sp_availableBalance_verification(?, ?, ?, ?) } 
	</procedure>

	<procedure id="spProjectBalanceVerification"  parameterMap="spProjectBalanceMap" resultMap="spWalletResult">
       { call sp_projectBalance_verification(?, ?, ?) } 
	</procedure>
	
	<select id="rpt_fulfillment_daily.select" resultClass="fulfillmentReportVO">
		SELECT report_day AS reportDay
		       ,total_entries AS totalEntries
		       ,unreconciled_entries AS unreconciledEntries
		       ,total_requests AS total_requests
		       ,unmatched_responses AS unmatchedResponses
		  FROM rpt_fulfillment_daily
		 WHERE report_day <![CDATA[ >= ]]> DATE_FORMAT(DATE_SUB(now(), interval 7 day), '%Y-%m-%d');
     </select>
     
     <select id="uniqueEntity.select" parameterClass="walletVO" resultClass="java.lang.Integer">
	   SELECT DISTINCT lte.ledger_entity_id
				  FROM ledger_transaction_entry lte
				 WHERE lte.created_date <![CDATA[ > ]]> #startDate#
				   AND lte.created_date <![CDATA[ < ]]> #endDate#     
	 </select>
     
     <select id="entityType.select" resultClass="java.lang.Integer">
		SELECT lte.ledger_entity_type_id
		  FROM ledger_transaction_entry lte
		 WHERE lte.ledger_entity_id = #entityId#
		 LIMIT 1;
      </select>
	
	<select id="dailyReconciliation.ptd.lastRan" resultClass="java.sql.Date">
		select date(process_run_date) from ptd_process_log where ptd_log_id = (select max(ptd_log_id) from ptd_process_log)
	</select>
	
	<select id="dailyReconciliation.GeneralLedger.lastRan" resultClass="java.sql.Date">
		select date(process_date) from gl_process_log where gl_process_id = (select max(gl_process_id) from gl_process_log)
	</select>	
	
	<select id="dailyReconciliation.Tran.lastRan" resultClass="java.sql.Date">
		select date(created_date) as lastRanDate from trans_process_log where trans_log_id = (select max(trans_log_id) from trans_process_log)
	</select>
	
	<select id="dailyReconciliation.Nacha.view" parameterClass="java.util.HashMap" resultClass="com.servicelive.wallet.batch.activity.vo.ReconciliationViewVO">
		select ledger_transaction_types.descr as transactionType,
		count(*) as numOfRecords , sum(trans_amount) as amount
		from ach_process_queue  inner join  ledger_transaction_types on ledger_transaction_types.transaction_type_id = ach_process_queue.transaction_type_id
		where nacha_process_log_id = (select max(nacha_process_id) from ach_process_log)
		and ach_process_queue.transaction_type_id = #transactionTypeId# and entity_type_id = #entityTypeId#
		group by ach_process_queue.transaction_type_id;
	</select>

	<select id="dailyReconciliation.AutoAchConsolidated.Nacha.view" resultClass="com.servicelive.wallet.batch.activity.vo.ReconciliationViewVO">
		SELECT ledger_transaction_types.descr AS transactionType
		       ,count(*) AS numOfRecords
		       ,sum(trans_amount) AS amount
		FROM    ach_process_queue
		       INNER JOIN
		          ledger_transaction_types
		       ON ledger_transaction_types.transaction_type_id =
		             ach_process_queue.transaction_type_id
		WHERE ach_process_queue.transaction_type_id = 2000
		       AND nacha_process_log_id = (SELECT max(nacha_process_id)
		                                     FROM ach_process_log)
		GROUP BY ach_process_queue.transaction_type_id;
	</select>
     
	<select id="dailyReconciliation.transfile.view" parameterClass="java.lang.Integer" resultClass="com.servicelive.wallet.batch.activity.vo.ReconciliationViewVO">
		select ltt.descr as transactionType, count(*) as numOfRecords, sum(apq.trans_amount) as amount
		from ach_process_queue apq inner join ledger_transaction_types ltt 
			on ltt.transaction_type_id = apq.transaction_type_id
		where apq.transaction_type_id = #transactionTypeId#
			and trans_log_id = (
				select max(trans_log_id) from trans_process_log
			)
		group by ltt.descr;
	</select>
	
	<select id="dailyReconciliation.AckOrg.status.lastRan" parameterClass="java.lang.Integer" resultClass="java.sql.Date">
		select date(created_date) from ach_process_log where process_status >= #processStatusId#  order by created_date desc limit 1
	</select>
</sqlMap>
